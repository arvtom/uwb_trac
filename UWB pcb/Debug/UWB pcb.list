
UWB pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce8c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800d070  0800d070  0001d070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d750  0800d750  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d750  0800d750  0001d750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d758  0800d758  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d758  0800d758  0001d758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d75c  0800d75c  0001d75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e78  200001f4  0800d954  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000106c  0800d954  0002106c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f706  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e26  00000000  00000000  0002f92a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e88  00000000  00000000  00031750  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  000325d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002303e  00000000  00000000  00033398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b9c1  00000000  00000000  000563d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de294  00000000  00000000  00061d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014002b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005008  00000000  00000000  001400a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d054 	.word	0x0800d054

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f8 	.word	0x200001f8
 800021c:	0800d054 	.word	0x0800d054

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9c:	f002 fe63 	bl	8003c66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa0:	f000 f9e0 	bl	8001364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa4:	f000 fd60 	bl	8001a68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa8:	f000 fd24 	bl	80019f4 <MX_DMA_Init>
  MX_UART4_Init();
 8000fac:	f000 fbf6 	bl	800179c <MX_UART4_Init>
  MX_TIM3_Init();
 8000fb0:	f000 fa72 	bl	8001498 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fb4:	f000 fac0 	bl	8001538 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000fb8:	f000 fb0e 	bl	80015d8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000fbc:	f000 fb5c 	bl	8001678 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000fc0:	f000 fbac 	bl	800171c <MX_TIM9_Init>
  MX_UART5_Init();
 8000fc4:	f000 fc1a 	bl	80017fc <MX_UART5_Init>
  MX_USART6_UART_Init();
 8000fc8:	f000 fcdc 	bl	8001984 <MX_USART6_UART_Init>
  MX_UART7_Init();
 8000fcc:	f000 fc4a 	bl	8001864 <MX_UART7_Init>
  MX_UART8_Init();
 8000fd0:	f000 fc78 	bl	80018c4 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8000fd4:	f000 fca6 	bl	8001924 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);//periodas 1s
 8000fd8:	48b2      	ldr	r0, [pc, #712]	; (80012a4 <main+0x30c>)
 8000fda:	f004 fe43 	bl	8005c64 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);//periodas 9ms
 8000fde:	48b2      	ldr	r0, [pc, #712]	; (80012a8 <main+0x310>)
 8000fe0:	f004 fe40 	bl	8005c64 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);//periodas 100ms
 8000fe4:	48b1      	ldr	r0, [pc, #708]	; (80012ac <main+0x314>)
 8000fe6:	f004 fe3d 	bl	8005c64 <HAL_TIM_Base_Start_IT>
	sbus_receive_length = SBUS_RX_LENGTH;
 8000fea:	4bb1      	ldr	r3, [pc, #708]	; (80012b0 <main+0x318>)
 8000fec:	2219      	movs	r2, #25
 8000fee:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxUART4, DISPLAY_RX_LENGTH);
	init_variables();
 8000ff0:	f001 fbf8 	bl	80027e4 <init_variables>
	init_log_microsd();
 8000ff4:	f001 fe88 	bl	8002d08 <init_log_microsd>
	HAL_Delay(1000);
 8000ff8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffc:	f002 fe90 	bl	8003d20 <HAL_Delay>
	//	HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxUART4, DISPLAY_RX_LENGTH);
	HAL_UART_Receive_DMA(&huart6, (uint8_t *)rxUART6, sbus_receive_length);//Receiver
 8001000:	4bab      	ldr	r3, [pc, #684]	; (80012b0 <main+0x318>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b29b      	uxth	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	49aa      	ldr	r1, [pc, #680]	; (80012b4 <main+0x31c>)
 800100a:	48ab      	ldr	r0, [pc, #684]	; (80012b8 <main+0x320>)
 800100c:	f005 ffe3 	bl	8006fd6 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart7, (uint8_t *)rxUART7, UWB_UART_LENGTH);//UWB1
 8001010:	220c      	movs	r2, #12
 8001012:	49aa      	ldr	r1, [pc, #680]	; (80012bc <main+0x324>)
 8001014:	48aa      	ldr	r0, [pc, #680]	; (80012c0 <main+0x328>)
 8001016:	f005 ffde 	bl	8006fd6 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart8, (uint8_t *)rxUART8, UWB_UART_LENGTH);//UWB2
 800101a:	220c      	movs	r2, #12
 800101c:	49a9      	ldr	r1, [pc, #676]	; (80012c4 <main+0x32c>)
 800101e:	48aa      	ldr	r0, [pc, #680]	; (80012c8 <main+0x330>)
 8001020:	f005 ffd9 	bl	8006fd6 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(uwb1_uart_received == 1 && uwb2_uart_received == 1)
 8001024:	4ba9      	ldr	r3, [pc, #676]	; (80012cc <main+0x334>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d1fb      	bne.n	8001024 <main+0x8c>
 800102c:	4ba8      	ldr	r3, [pc, #672]	; (80012d0 <main+0x338>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d1f7      	bne.n	8001024 <main+0x8c>
	  {
		  uwb1_uart_received = 0;
 8001034:	4ba5      	ldr	r3, [pc, #660]	; (80012cc <main+0x334>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
		  uwb2_uart_received = 0;
 800103a:	4ba5      	ldr	r3, [pc, #660]	; (80012d0 <main+0x338>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOA, LD3_Pin);
 8001040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001044:	48a3      	ldr	r0, [pc, #652]	; (80012d4 <main+0x33c>)
 8001046:	f003 fd66 	bl	8004b16 <HAL_GPIO_TogglePin>
		  parse_uwb_uart(&dwm_loc_get1,rxUART7);
 800104a:	499c      	ldr	r1, [pc, #624]	; (80012bc <main+0x324>)
 800104c:	48a2      	ldr	r0, [pc, #648]	; (80012d8 <main+0x340>)
 800104e:	f002 f981 	bl	8003354 <parse_uwb_uart>
		  parse_uwb_uart(&dwm_loc_get2,rxUART8);
 8001052:	499c      	ldr	r1, [pc, #624]	; (80012c4 <main+0x32c>)
 8001054:	48a1      	ldr	r0, [pc, #644]	; (80012dc <main+0x344>)
 8001056:	f002 f97d 	bl	8003354 <parse_uwb_uart>
		  //test = tmr_flag_100ms;
		  tmr_flag_100ms = 0;
 800105a:	4ba1      	ldr	r3, [pc, #644]	; (80012e0 <main+0x348>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
		  measure_ultrasonic();
 8001060:	f000 fef6 	bl	8001e50 <measure_ultrasonic>
		  moving_average_update_float(ultrasonic_distance_cm, &f_usonic_cm);
 8001064:	4b9f      	ldr	r3, [pc, #636]	; (80012e4 <main+0x34c>)
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	489f      	ldr	r0, [pc, #636]	; (80012e8 <main+0x350>)
 800106c:	eeb0 0a67 	vmov.f32	s0, s15
 8001070:	f001 fc5a 	bl	8002928 <moving_average_update_float>
		  if(dwm_loc_get1.packet_loss[0]<=UWB_MAX_PACKET_LOSS && dwm_loc_get2.packet_loss[0]<=UWB_MAX_PACKET_LOSS)
 8001074:	4b98      	ldr	r3, [pc, #608]	; (80012d8 <main+0x340>)
 8001076:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800107a:	2b32      	cmp	r3, #50	; 0x32
 800107c:	d8d2      	bhi.n	8001024 <main+0x8c>
 800107e:	4b97      	ldr	r3, [pc, #604]	; (80012dc <main+0x344>)
 8001080:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001084:	2b32      	cmp	r3, #50	; 0x32
 8001086:	d8cd      	bhi.n	8001024 <main+0x8c>
		  {
			  moving_average_update_float(dwm_loc_get1.distance_to_anchor_cm[0], &f_uwb1_cm);
 8001088:	4b93      	ldr	r3, [pc, #588]	; (80012d8 <main+0x340>)
 800108a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800108e:	4897      	ldr	r0, [pc, #604]	; (80012ec <main+0x354>)
 8001090:	eeb0 0a67 	vmov.f32	s0, s15
 8001094:	f001 fc48 	bl	8002928 <moving_average_update_float>
			  moving_average_update_float(dwm_loc_get2.distance_to_anchor_cm[0], &f_uwb2_cm);
 8001098:	4b90      	ldr	r3, [pc, #576]	; (80012dc <main+0x344>)
 800109a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800109e:	4894      	ldr	r0, [pc, #592]	; (80012f0 <main+0x358>)
 80010a0:	eeb0 0a67 	vmov.f32	s0, s15
 80010a4:	f001 fc40 	bl	8002928 <moving_average_update_float>
			  if (f_uwb1_cm.buf_size >= UWB_FILTER_SIZE && dwm_loc_get1.distance_to_anchor_cm[0] > 0 && dwm_loc_get2.distance_to_anchor_cm[0] > 0)
 80010a8:	4b90      	ldr	r3, [pc, #576]	; (80012ec <main+0x354>)
 80010aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d9b8      	bls.n	8001024 <main+0x8c>
 80010b2:	4b89      	ldr	r3, [pc, #548]	; (80012d8 <main+0x340>)
 80010b4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80010b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c0:	f340 80ef 	ble.w	80012a2 <main+0x30a>
 80010c4:	4b85      	ldr	r3, [pc, #532]	; (80012dc <main+0x344>)
 80010c6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80010ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d2:	f340 80e6 	ble.w	80012a2 <main+0x30a>
			  {
				  update_trig(f_uwb1_cm.value, f_uwb2_cm.value);
 80010d6:	4b85      	ldr	r3, [pc, #532]	; (80012ec <main+0x354>)
 80010d8:	edd3 7a00 	vldr	s15, [r3]
 80010dc:	4b84      	ldr	r3, [pc, #528]	; (80012f0 <main+0x358>)
 80010de:	ed93 7a00 	vldr	s14, [r3]
 80010e2:	eef0 0a47 	vmov.f32	s1, s14
 80010e6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ea:	f001 fc79 	bl	80029e0 <update_trig>
				  moving_average_update_float(trig_theta_est_deg, &f_trig_angle_deg);
 80010ee:	4b81      	ldr	r3, [pc, #516]	; (80012f4 <main+0x35c>)
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	4880      	ldr	r0, [pc, #512]	; (80012f8 <main+0x360>)
 80010f6:	eeb0 0a67 	vmov.f32	s0, s15
 80010fa:	f001 fc15 	bl	8002928 <moving_average_update_float>
				  moving_average_update_float(trig_rho_est_cm, &f_trig_distance_cm);
 80010fe:	4b7f      	ldr	r3, [pc, #508]	; (80012fc <main+0x364>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	487e      	ldr	r0, [pc, #504]	; (8001300 <main+0x368>)
 8001106:	eeb0 0a67 	vmov.f32	s0, s15
 800110a:	f001 fc0d 	bl	8002928 <moving_average_update_float>
				  if (f_trig_angle_deg.buf_size >= TRIG_ANGLE_FILTER_SIZE)
 800110e:	4b7a      	ldr	r3, [pc, #488]	; (80012f8 <main+0x360>)
 8001110:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001114:	2b09      	cmp	r3, #9
 8001116:	d985      	bls.n	8001024 <main+0x8c>
				  {
					  if(rc_in[6] > 1900 && rc_no_pulses < MAX_DROPPED_SBUS_PACKETS && rc_bad_frame == 0 && rc_failsafe == 0)
 8001118:	4b7a      	ldr	r3, [pc, #488]	; (8001304 <main+0x36c>)
 800111a:	edd3 7a06 	vldr	s15, [r3, #24]
 800111e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001308 <main+0x370>
 8001122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	f340 809e 	ble.w	800126a <main+0x2d2>
 800112e:	4b77      	ldr	r3, [pc, #476]	; (800130c <main+0x374>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b03      	cmp	r3, #3
 8001134:	f200 8099 	bhi.w	800126a <main+0x2d2>
 8001138:	4b75      	ldr	r3, [pc, #468]	; (8001310 <main+0x378>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	f040 8094 	bne.w	800126a <main+0x2d2>
 8001142:	4b74      	ldr	r3, [pc, #464]	; (8001314 <main+0x37c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f040 808f 	bne.w	800126a <main+0x2d2>
					  {
						  if(object_tracking==0 && begin_tracking==1)//sekimo ijungimo momentas. Reikia, kad nepagautu kada failsafe ir paskui vel pasileidzia
 800114c:	4b72      	ldr	r3, [pc, #456]	; (8001318 <main+0x380>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d110      	bne.n	8001176 <main+0x1de>
 8001154:	4b71      	ldr	r3, [pc, #452]	; (800131c <main+0x384>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d10c      	bne.n	8001176 <main+0x1de>
						  {
							  tracking_thr = rc_in[0];
 800115c:	4b69      	ldr	r3, [pc, #420]	; (8001304 <main+0x36c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a6f      	ldr	r2, [pc, #444]	; (8001320 <main+0x388>)
 8001162:	6013      	str	r3, [r2, #0]
							  init_PID(&pid_distance);
 8001164:	486f      	ldr	r0, [pc, #444]	; (8001324 <main+0x38c>)
 8001166:	f002 f811 	bl	800318c <init_PID>
							  init_PID(&pid_angle);
 800116a:	486f      	ldr	r0, [pc, #444]	; (8001328 <main+0x390>)
 800116c:	f002 f80e 	bl	800318c <init_PID>
							  init_PID(&pid_altitude);
 8001170:	486e      	ldr	r0, [pc, #440]	; (800132c <main+0x394>)
 8001172:	f002 f80b 	bl	800318c <init_PID>
						  }
						  object_tracking = 1;
 8001176:	4b68      	ldr	r3, [pc, #416]	; (8001318 <main+0x380>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
						  calculate_PID(f_trig_distance_cm.value, setpoint_distance, &pid_distance);
 800117c:	4b60      	ldr	r3, [pc, #384]	; (8001300 <main+0x368>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	4b6b      	ldr	r3, [pc, #428]	; (8001330 <main+0x398>)
 8001184:	ed93 7a00 	vldr	s14, [r3]
 8001188:	4866      	ldr	r0, [pc, #408]	; (8001324 <main+0x38c>)
 800118a:	eef0 0a47 	vmov.f32	s1, s14
 800118e:	eeb0 0a67 	vmov.f32	s0, s15
 8001192:	f002 f819 	bl	80031c8 <calculate_PID>
						  calculate_PID(f_trig_angle_deg.value, setpoint_angle, &pid_angle);
 8001196:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <main+0x360>)
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	4b65      	ldr	r3, [pc, #404]	; (8001334 <main+0x39c>)
 800119e:	ed93 7a00 	vldr	s14, [r3]
 80011a2:	4861      	ldr	r0, [pc, #388]	; (8001328 <main+0x390>)
 80011a4:	eef0 0a47 	vmov.f32	s1, s14
 80011a8:	eeb0 0a67 	vmov.f32	s0, s15
 80011ac:	f002 f80c 	bl	80031c8 <calculate_PID>
						  calculate_PID(f_usonic_cm.value, setpoint_altitude, &pid_altitude);
 80011b0:	4b4d      	ldr	r3, [pc, #308]	; (80012e8 <main+0x350>)
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	4b60      	ldr	r3, [pc, #384]	; (8001338 <main+0x3a0>)
 80011b8:	ed93 7a00 	vldr	s14, [r3]
 80011bc:	485b      	ldr	r0, [pc, #364]	; (800132c <main+0x394>)
 80011be:	eef0 0a47 	vmov.f32	s1, s14
 80011c2:	eeb0 0a67 	vmov.f32	s0, s15
 80011c6:	f001 ffff 	bl	80031c8 <calculate_PID>
						  if(abs(pid_angle.error) < DEADZONE_ANGLE)
 80011ca:	4b57      	ldr	r3, [pc, #348]	; (8001328 <main+0x390>)
 80011cc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80011d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d4:	ee17 3a90 	vmov	r3, s15
 80011d8:	f113 0f13 	cmn.w	r3, #19
 80011dc:	db0c      	blt.n	80011f8 <main+0x260>
 80011de:	4b52      	ldr	r3, [pc, #328]	; (8001328 <main+0x390>)
 80011e0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80011e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e8:	ee17 3a90 	vmov	r3, s15
 80011ec:	2b13      	cmp	r3, #19
 80011ee:	dc03      	bgt.n	80011f8 <main+0x260>
						  {
							  target_locked = 1;
 80011f0:	4b52      	ldr	r3, [pc, #328]	; (800133c <main+0x3a4>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	e002      	b.n	80011fe <main+0x266>
							  //detect_wrong_side();
						  }
						  else
						  {
							  target_locked = 0;
 80011f8:	4b50      	ldr	r3, [pc, #320]	; (800133c <main+0x3a4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
//						  {
//							  u_turn=0;
//							  u_turn_duration=0;
//							  control_yaw = 1500 + pid_angle.pidsum;
//						  }
						  control_yaw = 1500 + pid_angle.plusminus*pid_angle.pidsum;
 80011fe:	4b4a      	ldr	r3, [pc, #296]	; (8001328 <main+0x390>)
 8001200:	ed93 7a00 	vldr	s14, [r3]
 8001204:	4b48      	ldr	r3, [pc, #288]	; (8001328 <main+0x390>)
 8001206:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800120a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001340 <main+0x3a8>
 8001212:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001216:	4b4b      	ldr	r3, [pc, #300]	; (8001344 <main+0x3ac>)
 8001218:	edc3 7a00 	vstr	s15, [r3]
						  control_pitch = 1500 + pid_distance.plusminus*pid_distance.pidsum;
 800121c:	4b41      	ldr	r3, [pc, #260]	; (8001324 <main+0x38c>)
 800121e:	ed93 7a00 	vldr	s14, [r3]
 8001222:	4b40      	ldr	r3, [pc, #256]	; (8001324 <main+0x38c>)
 8001224:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800122c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001340 <main+0x3a8>
 8001230:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001234:	4b44      	ldr	r3, [pc, #272]	; (8001348 <main+0x3b0>)
 8001236:	edc3 7a00 	vstr	s15, [r3]
						  control_thr = tracking_thr + pid_altitude.plusminus*pid_altitude.pidsum;
 800123a:	4b3c      	ldr	r3, [pc, #240]	; (800132c <main+0x394>)
 800123c:	ed93 7a00 	vldr	s14, [r3]
 8001240:	4b3a      	ldr	r3, [pc, #232]	; (800132c <main+0x394>)
 8001242:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001246:	ee27 7a27 	vmul.f32	s14, s14, s15
 800124a:	4b35      	ldr	r3, [pc, #212]	; (8001320 <main+0x388>)
 800124c:	edd3 7a00 	vldr	s15, [r3]
 8001250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001254:	4b3d      	ldr	r3, [pc, #244]	; (800134c <main+0x3b4>)
 8001256:	edc3 7a00 	vstr	s15, [r3]
						  update_log_microsd();
 800125a:	f001 fe15 	bl	8002e88 <update_log_microsd>
						  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800125e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001262:	481c      	ldr	r0, [pc, #112]	; (80012d4 <main+0x33c>)
 8001264:	f003 fc57 	bl	8004b16 <HAL_GPIO_TogglePin>
 8001268:	e008      	b.n	800127c <main+0x2e4>
					  }
					  else
					  {
						  object_tracking = 0;
 800126a:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <main+0x380>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
						  begin_tracking=0;
 8001270:	4b2a      	ldr	r3, [pc, #168]	; (800131c <main+0x384>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
						  target_locked = 0;
 8001276:	4b31      	ldr	r3, [pc, #196]	; (800133c <main+0x3a4>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
					  }
					  write_periodic_LCD();
 800127c:	f001 ff06 	bl	800308c <write_periodic_LCD>
					  HAL_UART_Transmit(&huart4, (uint8_t *)txUART4, DISPLAY_TX_LENGTH, 10);
 8001280:	230a      	movs	r3, #10
 8001282:	220d      	movs	r2, #13
 8001284:	4932      	ldr	r1, [pc, #200]	; (8001350 <main+0x3b8>)
 8001286:	4833      	ldr	r0, [pc, #204]	; (8001354 <main+0x3bc>)
 8001288:	f005 fe12 	bl	8006eb0 <HAL_UART_Transmit>
					  delay = time_10hz - last_time_10hz;
 800128c:	4b32      	ldr	r3, [pc, #200]	; (8001358 <main+0x3c0>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b32      	ldr	r3, [pc, #200]	; (800135c <main+0x3c4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	4a32      	ldr	r2, [pc, #200]	; (8001360 <main+0x3c8>)
 8001298:	6013      	str	r3, [r2, #0]
					  last_time_10hz = time_10hz;
 800129a:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <main+0x3c0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a2f      	ldr	r2, [pc, #188]	; (800135c <main+0x3c4>)
 80012a0:	6013      	str	r3, [r2, #0]
	  if(uwb1_uart_received == 1 && uwb2_uart_received == 1)
 80012a2:	e6bf      	b.n	8001024 <main+0x8c>
 80012a4:	20000af4 	.word	0x20000af4
 80012a8:	20000548 	.word	0x20000548
 80012ac:	20000aa8 	.word	0x20000aa8
 80012b0:	20000004 	.word	0x20000004
 80012b4:	2000023c 	.word	0x2000023c
 80012b8:	20000e74 	.word	0x20000e74
 80012bc:	20000224 	.word	0x20000224
 80012c0:	20000478 	.word	0x20000478
 80012c4:	20000230 	.word	0x20000230
 80012c8:	20000df0 	.word	0x20000df0
 80012cc:	2000035e 	.word	0x2000035e
 80012d0:	2000035f 	.word	0x2000035f
 80012d4:	40020000 	.word	0x40020000
 80012d8:	20000c24 	.word	0x20000c24
 80012dc:	20000f7c 	.word	0x20000f7c
 80012e0:	20000221 	.word	0x20000221
 80012e4:	2000036c 	.word	0x2000036c
 80012e8:	20000a38 	.word	0x20000a38
 80012ec:	20000a70 	.word	0x20000a70
 80012f0:	20000a00 	.word	0x20000a00
 80012f4:	20000374 	.word	0x20000374
 80012f8:	20000440 	.word	0x20000440
 80012fc:	20000370 	.word	0x20000370
 8001300:	20000d28 	.word	0x20000d28
 8001304:	200002dc 	.word	0x200002dc
 8001308:	44ed8000 	.word	0x44ed8000
 800130c:	2000029b 	.word	0x2000029b
 8001310:	20000299 	.word	0x20000299
 8001314:	2000035d 	.word	0x2000035d
 8001318:	2000037c 	.word	0x2000037c
 800131c:	20000210 	.word	0x20000210
 8001320:	20000010 	.word	0x20000010
 8001324:	2000039c 	.word	0x2000039c
 8001328:	20001020 	.word	0x20001020
 800132c:	20000d60 	.word	0x20000d60
 8001330:	2000000c 	.word	0x2000000c
 8001334:	20000378 	.word	0x20000378
 8001338:	20000008 	.word	0x20000008
 800133c:	2000038c 	.word	0x2000038c
 8001340:	44bb8000 	.word	0x44bb8000
 8001344:	20000388 	.word	0x20000388
 8001348:	20000384 	.word	0x20000384
 800134c:	20000380 	.word	0x20000380
 8001350:	2000028c 	.word	0x2000028c
 8001354:	20000ef8 	.word	0x20000ef8
 8001358:	20000214 	.word	0x20000214
 800135c:	20000218 	.word	0x20000218
 8001360:	2000021c 	.word	0x2000021c

08001364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b0b4      	sub	sp, #208	; 0xd0
 8001368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800136e:	2230      	movs	r2, #48	; 0x30
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f006 fe42 	bl	8007ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f006 fe33 	bl	8007ffc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <SystemClock_Config+0x12c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a3d      	ldr	r2, [pc, #244]	; (8001490 <SystemClock_Config+0x12c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <SystemClock_Config+0x12c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ae:	4b39      	ldr	r3, [pc, #228]	; (8001494 <SystemClock_Config+0x130>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a38      	ldr	r2, [pc, #224]	; (8001494 <SystemClock_Config+0x130>)
 80013b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b36      	ldr	r3, [pc, #216]	; (8001494 <SystemClock_Config+0x130>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d4:	2302      	movs	r3, #2
 80013d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013e2:	2308      	movs	r3, #8
 80013e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80013e8:	23d8      	movs	r3, #216	; 0xd8
 80013ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fbf4 	bl	8004bec <HAL_RCC_OscConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800140a:	f002 f825 	bl	8003458 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800140e:	f003 fb9d 	bl	8004b4c <HAL_PWREx_EnableOverDrive>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001418:	f002 f81e 	bl	8003458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	230f      	movs	r3, #15
 800141e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800142e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001432:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800143e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001442:	2107      	movs	r1, #7
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fe75 	bl	8005134 <HAL_RCC_ClockConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001450:	f002 f802 	bl	8003458 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
 8001454:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001458:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_UART8;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800145a:	2300      	movs	r3, #0
 800145c:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800145e:	2300      	movs	r3, #0
 8001460:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001462:	2300      	movs	r3, #0
 8001464:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001466:	2300      	movs	r3, #0
 8001468:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800146a:	2300      	movs	r3, #0
 800146c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 800146e:	2300      	movs	r3, #0
 8001470:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4618      	mov	r0, r3
 8001478:	f004 f852 	bl	8005520 <HAL_RCCEx_PeriphCLKConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x122>
  {
    Error_Handler();
 8001482:	f001 ffe9 	bl	8003458 <Error_Handler>
  }
}
 8001486:	bf00      	nop
 8001488:	37d0      	adds	r7, #208	; 0xd0
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40007000 	.word	0x40007000

08001498 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <MX_TIM3_Init+0x98>)
 80014b8:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <MX_TIM3_Init+0x9c>)
 80014ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 54000-1;
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_TIM3_Init+0x98>)
 80014be:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 80014c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_TIM3_Init+0x98>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_TIM3_Init+0x98>)
 80014cc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80014d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_TIM3_Init+0x98>)
 80014d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_TIM3_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014e0:	4813      	ldr	r0, [pc, #76]	; (8001530 <MX_TIM3_Init+0x98>)
 80014e2:	f004 fb67 	bl	8005bb4 <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80014ec:	f001 ffb4 	bl	8003458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <MX_TIM3_Init+0x98>)
 80014fe:	f005 f837 	bl	8006570 <HAL_TIM_ConfigClockSource>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001508:	f001 ffa6 	bl	8003458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800150c:	2320      	movs	r3, #32
 800150e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_TIM3_Init+0x98>)
 800151a:	f005 fbcf 	bl	8006cbc <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001524:	f001 ff98 	bl	8003458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000af4 	.word	0x20000af4
 8001534:	40000400 	.word	0x40000400

08001538 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <MX_TIM4_Init+0x98>)
 8001558:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <MX_TIM4_Init+0x9c>)
 800155a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 54000-1;
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_TIM4_Init+0x98>)
 800155e:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 8001562:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_TIM4_Init+0x98>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 18-1;
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_TIM4_Init+0x98>)
 800156c:	2211      	movs	r2, #17
 800156e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <MX_TIM4_Init+0x98>)
 8001572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001576:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <MX_TIM4_Init+0x98>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800157e:	4814      	ldr	r0, [pc, #80]	; (80015d0 <MX_TIM4_Init+0x98>)
 8001580:	f004 fb18 	bl	8005bb4 <HAL_TIM_Base_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800158a:	f001 ff65 	bl	8003458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001592:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4619      	mov	r1, r3
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_TIM4_Init+0x98>)
 800159c:	f004 ffe8 	bl	8006570 <HAL_TIM_ConfigClockSource>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80015a6:	f001 ff57 	bl	8003458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015aa:	2320      	movs	r3, #32
 80015ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_TIM4_Init+0x98>)
 80015b8:	f005 fb80 	bl	8006cbc <HAL_TIMEx_MasterConfigSynchronization>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80015c2:	f001 ff49 	bl	8003458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000548 	.word	0x20000548
 80015d4:	40000800 	.word	0x40000800

080015d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <MX_TIM5_Init+0x98>)
 80015f8:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <MX_TIM5_Init+0x9c>)
 80015fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 54000-1;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <MX_TIM5_Init+0x98>)
 80015fe:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 8001602:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_TIM5_Init+0x98>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 200-1;
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <MX_TIM5_Init+0x98>)
 800160c:	22c7      	movs	r2, #199	; 0xc7
 800160e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <MX_TIM5_Init+0x98>)
 8001612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001616:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_TIM5_Init+0x98>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800161e:	4814      	ldr	r0, [pc, #80]	; (8001670 <MX_TIM5_Init+0x98>)
 8001620:	f004 fac8 	bl	8005bb4 <HAL_TIM_Base_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800162a:	f001 ff15 	bl	8003458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001632:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4619      	mov	r1, r3
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <MX_TIM5_Init+0x98>)
 800163c:	f004 ff98 	bl	8006570 <HAL_TIM_ConfigClockSource>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001646:	f001 ff07 	bl	8003458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800164a:	2320      	movs	r3, #32
 800164c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <MX_TIM5_Init+0x98>)
 8001658:	f005 fb30 	bl	8006cbc <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001662:	f001 fef9 	bl	8003458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	3720      	adds	r7, #32
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000aa8 	.word	0x20000aa8
 8001674:	40000c00 	.word	0x40000c00

08001678 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001696:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <MX_TIM8_Init+0x9c>)
 8001698:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <MX_TIM8_Init+0xa0>)
 800169a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 216-1;
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <MX_TIM8_Init+0x9c>)
 800169e:	22d7      	movs	r2, #215	; 0xd7
 80016a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <MX_TIM8_Init+0x9c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_TIM8_Init+0x9c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <MX_TIM8_Init+0x9c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MX_TIM8_Init+0x9c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <MX_TIM8_Init+0x9c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016c0:	4814      	ldr	r0, [pc, #80]	; (8001714 <MX_TIM8_Init+0x9c>)
 80016c2:	f004 fa77 	bl	8005bb4 <HAL_TIM_Base_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80016cc:	f001 fec4 	bl	8003458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4619      	mov	r1, r3
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <MX_TIM8_Init+0x9c>)
 80016de:	f004 ff47 	bl	8006570 <HAL_TIM_ConfigClockSource>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80016e8:	f001 feb6 	bl	8003458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_TIM8_Init+0x9c>)
 80016fe:	f005 fadd 	bl	8006cbc <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001708:	f001 fea6 	bl	8003458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200004fc 	.word	0x200004fc
 8001718:	40010400 	.word	0x40010400

0800171c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001722:	463b      	mov	r3, r7
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <MX_TIM9_Init+0x78>)
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <MX_TIM9_Init+0x7c>)
 8001732:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 216-1;
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_TIM9_Init+0x78>)
 8001736:	22d7      	movs	r2, #215	; 0xd7
 8001738:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <MX_TIM9_Init+0x78>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF-1;
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_TIM9_Init+0x78>)
 8001742:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001746:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <MX_TIM9_Init+0x78>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_TIM9_Init+0x78>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8001754:	480f      	ldr	r0, [pc, #60]	; (8001794 <MX_TIM9_Init+0x78>)
 8001756:	f004 fafd 	bl	8005d54 <HAL_TIM_IC_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001760:	f001 fe7a 	bl	8003458 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001764:	230a      	movs	r3, #10
 8001766:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001768:	2301      	movs	r3, #1
 800176a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 8001770:	2304      	movs	r3, #4
 8001772:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	2200      	movs	r2, #0
 8001778:	4619      	mov	r1, r3
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <MX_TIM9_Init+0x78>)
 800177c:	f004 fe63 	bl	8006446 <HAL_TIM_IC_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 8001786:	f001 fe67 	bl	8003458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000da4 	.word	0x20000da4
 8001798:	40014000 	.word	0x40014000

0800179c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_UART4_Init+0x58>)
 80017a2:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <MX_UART4_Init+0x5c>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <MX_UART4_Init+0x58>)
 80017a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_UART4_Init+0x58>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_UART4_Init+0x58>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_UART4_Init+0x58>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_UART4_Init+0x58>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_UART4_Init+0x58>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_UART4_Init+0x58>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <MX_UART4_Init+0x58>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_UART4_Init+0x58>)
 80017da:	2200      	movs	r2, #0
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_UART4_Init+0x58>)
 80017e0:	f005 fb18 	bl	8006e14 <HAL_UART_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80017ea:	f001 fe35 	bl	8003458 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000ef8 	.word	0x20000ef8
 80017f8:	40004c00 	.word	0x40004c00

080017fc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <MX_UART5_Init+0x5c>)
 8001802:	4a16      	ldr	r2, [pc, #88]	; (800185c <MX_UART5_Init+0x60>)
 8001804:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 100000;
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_UART5_Init+0x5c>)
 8001808:	4a15      	ldr	r2, [pc, #84]	; (8001860 <MX_UART5_Init+0x64>)
 800180a:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_UART5_Init+0x5c>)
 800180e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001812:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_2;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <MX_UART5_Init+0x5c>)
 8001816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800181a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_UART5_Init+0x5c>)
 800181e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001822:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_UART5_Init+0x5c>)
 8001826:	220c      	movs	r2, #12
 8001828:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_UART5_Init+0x5c>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_UART5_Init+0x5c>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_UART5_Init+0x5c>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_UART5_Init+0x5c>)
 800183e:	2200      	movs	r2, #0
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_UART5_Init+0x5c>)
 8001844:	f005 fae6 	bl	8006e14 <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_UART5_Init+0x56>
  {
    Error_Handler();
 800184e:	f001 fe03 	bl	8003458 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000b40 	.word	0x20000b40
 800185c:	40005000 	.word	0x40005000
 8001860:	000186a0 	.word	0x000186a0

08001864 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_UART7_Init+0x58>)
 800186a:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <MX_UART7_Init+0x5c>)
 800186c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <MX_UART7_Init+0x58>)
 8001870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001874:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_UART7_Init+0x58>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_UART7_Init+0x58>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_UART7_Init+0x58>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_UART7_Init+0x58>)
 800188a:	220c      	movs	r2, #12
 800188c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MX_UART7_Init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_UART7_Init+0x58>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <MX_UART7_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_UART7_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_UART7_Init+0x58>)
 80018a8:	f005 fab4 	bl	8006e14 <HAL_UART_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80018b2:	f001 fdd1 	bl	8003458 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000478 	.word	0x20000478
 80018c0:	40007800 	.word	0x40007800

080018c4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_UART8_Init+0x58>)
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <MX_UART8_Init+0x5c>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_UART8_Init+0x58>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_UART8_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_UART8_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_UART8_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_UART8_Init+0x58>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_UART8_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_UART8_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_UART8_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_UART8_Init+0x58>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_UART8_Init+0x58>)
 8001908:	f005 fa84 	bl	8006e14 <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8001912:	f001 fda1 	bl	8003458 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000df0 	.word	0x20000df0
 8001920:	40007c00 	.word	0x40007c00

08001924 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_USART3_UART_Init+0x58>)
 800192a:	4a15      	ldr	r2, [pc, #84]	; (8001980 <MX_USART3_UART_Init+0x5c>)
 800192c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <MX_USART3_UART_Init+0x58>)
 8001930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001934:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_USART3_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_USART3_UART_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_USART3_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_USART3_UART_Init+0x58>)
 800194a:	220c      	movs	r2, #12
 800194c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <MX_USART3_UART_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_USART3_UART_Init+0x58>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <MX_USART3_UART_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_USART3_UART_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_USART3_UART_Init+0x58>)
 8001968:	f005 fa54 	bl	8006e14 <HAL_UART_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001972:	f001 fd71 	bl	8003458 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000594 	.word	0x20000594
 8001980:	40004800 	.word	0x40004800

08001984 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <MX_USART6_UART_Init+0x64>)
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <MX_USART6_UART_Init+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 100000;
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <MX_USART6_UART_Init+0x64>)
 8001990:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <MX_USART6_UART_Init+0x6c>)
 8001992:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_USART6_UART_Init+0x64>)
 8001996:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800199a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_2;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_USART6_UART_Init+0x64>)
 800199e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a2:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <MX_USART6_UART_Init+0x64>)
 80019a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_USART6_UART_Init+0x64>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <MX_USART6_UART_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_USART6_UART_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <MX_USART6_UART_Init+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_USART6_UART_Init+0x64>)
 80019c6:	2202      	movs	r2, #2
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <MX_USART6_UART_Init+0x64>)
 80019cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_USART6_UART_Init+0x64>)
 80019d4:	f005 fa1e 	bl	8006e14 <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART6_UART_Init+0x5e>
  {
    Error_Handler();
 80019de:	f001 fd3b 	bl	8003458 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000e74 	.word	0x20000e74
 80019ec:	40011400 	.word	0x40011400
 80019f0:	000186a0 	.word	0x000186a0

080019f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_DMA_Init+0x70>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a19      	ldr	r2, [pc, #100]	; (8001a64 <MX_DMA_Init+0x70>)
 8001a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_DMA_Init+0x70>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_DMA_Init+0x70>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a13      	ldr	r2, [pc, #76]	; (8001a64 <MX_DMA_Init+0x70>)
 8001a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_DMA_Init+0x70>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	200e      	movs	r0, #14
 8001a30:	f002 fa73 	bl	8003f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001a34:	200e      	movs	r0, #14
 8001a36:	f002 fa8c 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2011      	movs	r0, #17
 8001a40:	f002 fa6b 	bl	8003f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a44:	2011      	movs	r0, #17
 8001a46:	f002 fa84 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2039      	movs	r0, #57	; 0x39
 8001a50:	f002 fa63 	bl	8003f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001a54:	2039      	movs	r0, #57	; 0x39
 8001a56:	f002 fa7c 	bl	8003f52 <HAL_NVIC_EnableIRQ>

}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a39      	ldr	r2, [pc, #228]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001a84:	f043 0310 	orr.w	r3, r3, #16
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a96:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a33      	ldr	r2, [pc, #204]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a2d      	ldr	r2, [pc, #180]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a27      	ldr	r2, [pc, #156]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a21      	ldr	r2, [pc, #132]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a1b      	ldr	r2, [pc, #108]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <MX_GPIO_Init+0x100>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2110      	movs	r1, #16
 8001b12:	4816      	ldr	r0, [pc, #88]	; (8001b6c <MX_GPIO_Init+0x104>)
 8001b14:	f002 ffe6 	bl	8004ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001b1e:	4814      	ldr	r0, [pc, #80]	; (8001b70 <MX_GPIO_Init+0x108>)
 8001b20:	f002 ffe0 	bl	8004ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001b24:	2310      	movs	r3, #16
 8001b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480c      	ldr	r0, [pc, #48]	; (8001b6c <MX_GPIO_Init+0x104>)
 8001b3c:	f002 fe38 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 8001b40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_GPIO_Init+0x108>)
 8001b5a:	f002 fe29 	bl	80047b0 <HAL_GPIO_Init>

}
 8001b5e:	bf00      	nop
 8001b60:	3730      	adds	r7, #48	; 0x30
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40020000 	.word	0x40020000

08001b74 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	if (htim->Instance == TIM3)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a24      	ldr	r2, [pc, #144]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d107      	bne.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		tmr_flag_1s++;
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b92:	701a      	strb	r2, [r3, #0]
	else if (htim->Instance == TIM5)
	{
		tmr_flag_100ms++;
		time_10hz++;
	}
}
 8001b94:	e039      	b.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0x96>
	else if (htim->Instance == TIM4)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a20      	ldr	r2, [pc, #128]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d123      	bne.n	8001be8 <HAL_TIM_PeriodElapsedCallback+0x74>
		if (rc_packets > 0)
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d018      	beq.n	8001bda <HAL_TIM_PeriodElapsedCallback+0x66>
			rc_packets = 0;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
			rc_no_pulses = 0;
 8001bae:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
			if(rc_bad_frame==0 && rc_failsafe==0)
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d126      	bne.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0x96>
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d122      	bne.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0x96>
				sbus_passthrough();
 8001bc4:	f000 fd70 	bl	80026a8 <sbus_passthrough>
				write_sbus();
 8001bc8:	f000 fbcc 	bl	8002364 <write_sbus>
				HAL_UART_Transmit(&huart5, (uint8_t *)txUART5, SBUS_TX_LENGTH, 10);
 8001bcc:	230a      	movs	r3, #10
 8001bce:	2219      	movs	r2, #25
 8001bd0:	4917      	ldr	r1, [pc, #92]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001bd2:	4818      	ldr	r0, [pc, #96]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001bd4:	f005 f96c 	bl	8006eb0 <HAL_UART_Transmit>
}
 8001bd8:	e017      	b.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0x96>
			rc_no_pulses++;
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001be4:	701a      	strb	r2, [r3, #0]
}
 8001be6:	e010      	b.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0x96>
	else if (htim->Instance == TIM5)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d10b      	bne.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0x96>
		tmr_flag_100ms++;
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001bfe:	701a      	strb	r2, [r3, #0]
		time_10hz++;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	3301      	adds	r3, #1
 8001c06:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001c08:	6013      	str	r3, [r2, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40000400 	.word	0x40000400
 8001c18:	20000220 	.word	0x20000220
 8001c1c:	40000800 	.word	0x40000800
 8001c20:	2000029a 	.word	0x2000029a
 8001c24:	2000029b 	.word	0x2000029b
 8001c28:	20000299 	.word	0x20000299
 8001c2c:	2000035d 	.word	0x2000035d
 8001c30:	20000270 	.word	0x20000270
 8001c34:	20000b40 	.word	0x20000b40
 8001c38:	40000c00 	.word	0x40000c00
 8001c3c:	20000221 	.word	0x20000221
 8001c40:	20000214 	.word	0x20000214

08001c44 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	if(IC_index == 0) //First edge
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10a      	bne.n	8001c6a <HAL_TIM_IC_CaptureCallback+0x26>
	{
		IC_time1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001c54:	2100      	movs	r1, #0
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f004 fd44 	bl	80066e4 <HAL_TIM_ReadCapturedValue>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001c60:	601a      	str	r2, [r3, #0]
		IC_index = 1;
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
	{
		IC_time2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		IC_index = 0;
		IC_flag = 1;
	}
}
 8001c68:	e010      	b.n	8001c8c <HAL_TIM_IC_CaptureCallback+0x48>
	else if(IC_index == 1) //Second edge
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d10c      	bne.n	8001c8c <HAL_TIM_IC_CaptureCallback+0x48>
		IC_time2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001c72:	2100      	movs	r1, #0
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f004 fd35 	bl	80066e4 <HAL_TIM_ReadCapturedValue>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <HAL_TIM_IC_CaptureCallback+0x58>)
 8001c7e:	601a      	str	r2, [r3, #0]
		IC_index = 0;
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
		IC_flag = 1;
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000361 	.word	0x20000361
 8001c98:	20000364 	.word	0x20000364
 8001c9c:	20000368 	.word	0x20000368
 8001ca0:	20000360 	.word	0x20000360

08001ca4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
  if (huart->Instance == USART6)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <HAL_UART_RxCpltCallback+0x74>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d110      	bne.n	8001cd8 <HAL_UART_RxCpltCallback+0x34>
  {
	  rc_packets++;
 8001cb6:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HAL_UART_RxCpltCallback+0x78>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <HAL_UART_RxCpltCallback+0x78>)
 8001cc0:	701a      	strb	r2, [r3, #0]
	  read_sbus();
 8001cc2:	f000 f951 	bl	8001f68 <read_sbus>
	  HAL_UART_Receive_DMA(&huart6, (uint8_t *)rxUART6, sbus_receive_length);
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_UART_RxCpltCallback+0x7c>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4915      	ldr	r1, [pc, #84]	; (8001d24 <HAL_UART_RxCpltCallback+0x80>)
 8001cd0:	4815      	ldr	r0, [pc, #84]	; (8001d28 <HAL_UART_RxCpltCallback+0x84>)
 8001cd2:	f005 f980 	bl	8006fd6 <HAL_UART_Receive_DMA>

//  else if (huart->Instance == UART4)
//  {
//	  HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxUART4, DISPLAY_RX_LENGTH);
//  }
}
 8001cd6:	e01a      	b.n	8001d0e <HAL_UART_RxCpltCallback+0x6a>
  else if (huart->Instance == UART7)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <HAL_UART_RxCpltCallback+0x88>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d108      	bne.n	8001cf4 <HAL_UART_RxCpltCallback+0x50>
	  uwb1_uart_received = 1;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_UART_RxCpltCallback+0x8c>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart7, (uint8_t *)rxUART7, UWB_UART_LENGTH);
 8001ce8:	220c      	movs	r2, #12
 8001cea:	4912      	ldr	r1, [pc, #72]	; (8001d34 <HAL_UART_RxCpltCallback+0x90>)
 8001cec:	4812      	ldr	r0, [pc, #72]	; (8001d38 <HAL_UART_RxCpltCallback+0x94>)
 8001cee:	f005 f972 	bl	8006fd6 <HAL_UART_Receive_DMA>
}
 8001cf2:	e00c      	b.n	8001d0e <HAL_UART_RxCpltCallback+0x6a>
  else if (huart->Instance == UART8)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <HAL_UART_RxCpltCallback+0x98>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d107      	bne.n	8001d0e <HAL_UART_RxCpltCallback+0x6a>
	  uwb2_uart_received = 1;
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_UART_RxCpltCallback+0x9c>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart8, (uint8_t *)rxUART8, UWB_UART_LENGTH);
 8001d04:	220c      	movs	r2, #12
 8001d06:	490f      	ldr	r1, [pc, #60]	; (8001d44 <HAL_UART_RxCpltCallback+0xa0>)
 8001d08:	480f      	ldr	r0, [pc, #60]	; (8001d48 <HAL_UART_RxCpltCallback+0xa4>)
 8001d0a:	f005 f964 	bl	8006fd6 <HAL_UART_Receive_DMA>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40011400 	.word	0x40011400
 8001d1c:	2000029a 	.word	0x2000029a
 8001d20:	20000004 	.word	0x20000004
 8001d24:	2000023c 	.word	0x2000023c
 8001d28:	20000e74 	.word	0x20000e74
 8001d2c:	40007800 	.word	0x40007800
 8001d30:	2000035e 	.word	0x2000035e
 8001d34:	20000224 	.word	0x20000224
 8001d38:	20000478 	.word	0x20000478
 8001d3c:	40007c00 	.word	0x40007c00
 8001d40:	2000035f 	.word	0x2000035f
 8001d44:	20000230 	.word	0x20000230
 8001d48:	20000df0 	.word	0x20000df0

08001d4c <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  uart_error++;
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <HAL_UART_ErrorCallback+0x74>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_UART_ErrorCallback+0x74>)
 8001d5e:	701a      	strb	r2, [r3, #0]
  if (huart->Instance == USART6)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <HAL_UART_ErrorCallback+0x78>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d10b      	bne.n	8001d82 <HAL_UART_ErrorCallback+0x36>
  {
	  //HAL_UART_DMAStop()
	  HAL_UART_AbortReceive(&huart6);
 8001d6a:	4817      	ldr	r0, [pc, #92]	; (8001dc8 <HAL_UART_ErrorCallback+0x7c>)
 8001d6c:	f005 f970 	bl	8007050 <HAL_UART_AbortReceive>
	  HAL_UART_Receive_DMA(&huart6, (uint8_t *)rxUART6, sbus_receive_length);
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_UART_ErrorCallback+0x80>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	4915      	ldr	r1, [pc, #84]	; (8001dd0 <HAL_UART_ErrorCallback+0x84>)
 8001d7a:	4813      	ldr	r0, [pc, #76]	; (8001dc8 <HAL_UART_ErrorCallback+0x7c>)
 8001d7c:	f005 f92b 	bl	8006fd6 <HAL_UART_Receive_DMA>
//	  HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxUART4, DISPLAY_RX_LENGTH);
//  }
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001d80:	e01a      	b.n	8001db8 <HAL_UART_ErrorCallback+0x6c>
  else if (huart->Instance == UART7)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <HAL_UART_ErrorCallback+0x88>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d108      	bne.n	8001d9e <HAL_UART_ErrorCallback+0x52>
		HAL_UART_AbortReceive(&huart7);
 8001d8c:	4812      	ldr	r0, [pc, #72]	; (8001dd8 <HAL_UART_ErrorCallback+0x8c>)
 8001d8e:	f005 f95f 	bl	8007050 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart7, (uint8_t *)rxUART7, UWB_UART_LENGTH);
 8001d92:	220c      	movs	r2, #12
 8001d94:	4911      	ldr	r1, [pc, #68]	; (8001ddc <HAL_UART_ErrorCallback+0x90>)
 8001d96:	4810      	ldr	r0, [pc, #64]	; (8001dd8 <HAL_UART_ErrorCallback+0x8c>)
 8001d98:	f005 f91d 	bl	8006fd6 <HAL_UART_Receive_DMA>
}
 8001d9c:	e00c      	b.n	8001db8 <HAL_UART_ErrorCallback+0x6c>
  else if (huart->Instance == UART8)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a0f      	ldr	r2, [pc, #60]	; (8001de0 <HAL_UART_ErrorCallback+0x94>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d107      	bne.n	8001db8 <HAL_UART_ErrorCallback+0x6c>
	  HAL_UART_AbortReceive(&huart8);
 8001da8:	480e      	ldr	r0, [pc, #56]	; (8001de4 <HAL_UART_ErrorCallback+0x98>)
 8001daa:	f005 f951 	bl	8007050 <HAL_UART_AbortReceive>
	  HAL_UART_Receive_DMA(&huart8, (uint8_t *)rxUART8, UWB_UART_LENGTH);
 8001dae:	220c      	movs	r2, #12
 8001db0:	490d      	ldr	r1, [pc, #52]	; (8001de8 <HAL_UART_ErrorCallback+0x9c>)
 8001db2:	480c      	ldr	r0, [pc, #48]	; (8001de4 <HAL_UART_ErrorCallback+0x98>)
 8001db4:	f005 f90f 	bl	8006fd6 <HAL_UART_Receive_DMA>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000222 	.word	0x20000222
 8001dc4:	40011400 	.word	0x40011400
 8001dc8:	20000e74 	.word	0x20000e74
 8001dcc:	20000004 	.word	0x20000004
 8001dd0:	2000023c 	.word	0x2000023c
 8001dd4:	40007800 	.word	0x40007800
 8001dd8:	20000478 	.word	0x20000478
 8001ddc:	20000224 	.word	0x20000224
 8001de0:	40007c00 	.word	0x40007c00
 8001de4:	20000df0 	.word	0x20000df0
 8001de8:	20000230 	.word	0x20000230

08001dec <usDelay>:
void usDelay(uint32_t uSec)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d801      	bhi.n	8001dfe <usDelay+0x12>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1;
 8001dfe:	4a13      	ldr	r2, [pc, #76]	; (8001e4c <usDelay+0x60>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <usDelay+0x60>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <usDelay+0x60>)
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <usDelay+0x60>)
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <usDelay+0x60>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <usDelay+0x60>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8001e24:	bf00      	nop
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <usDelay+0x60>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d1f9      	bne.n	8001e26 <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <usDelay+0x60>)
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <usDelay+0x60>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6113      	str	r3, [r2, #16]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40010400 	.word	0x40010400

08001e50 <measure_ultrasonic>:
void measure_ultrasonic()
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
	//Reset TRIG
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2110      	movs	r1, #16
 8001e5a:	4839      	ldr	r0, [pc, #228]	; (8001f40 <measure_ultrasonic+0xf0>)
 8001e5c:	f002 fe42 	bl	8004ae4 <HAL_GPIO_WritePin>
	usDelay(3);
 8001e60:	2003      	movs	r0, #3
 8001e62:	f7ff ffc3 	bl	8001dec <usDelay>
	//10us impulse on TRIG
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	2110      	movs	r1, #16
 8001e6a:	4835      	ldr	r0, [pc, #212]	; (8001f40 <measure_ultrasonic+0xf0>)
 8001e6c:	f002 fe3a 	bl	8004ae4 <HAL_GPIO_WritePin>
	usDelay(10);
 8001e70:	200a      	movs	r0, #10
 8001e72:	f7ff ffbb 	bl	8001dec <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2110      	movs	r1, #16
 8001e7a:	4831      	ldr	r0, [pc, #196]	; (8001f40 <measure_ultrasonic+0xf0>)
 8001e7c:	f002 fe32 	bl	8004ae4 <HAL_GPIO_WritePin>
	HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1);
 8001e80:	2100      	movs	r1, #0
 8001e82:	4830      	ldr	r0, [pc, #192]	; (8001f44 <measure_ultrasonic+0xf4>)
 8001e84:	f003 ffbe 	bl	8005e04 <HAL_TIM_IC_Start_IT>
	uint32_t startTick = HAL_GetTick();
 8001e88:	f001 ff3e 	bl	8003d08 <HAL_GetTick>
 8001e8c:	6038      	str	r0, [r7, #0]
	uint32_t tick_difference = HAL_GetTick() - startTick;
 8001e8e:	f001 ff3b 	bl	8003d08 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	607b      	str	r3, [r7, #4]
	while (tick_difference < ULTRASONIC_TIMEOUT_MS)
 8001e9a:	e009      	b.n	8001eb0 <measure_ultrasonic+0x60>
	{
		if (IC_flag == 1)
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <measure_ultrasonic+0xf8>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d009      	beq.n	8001eb8 <measure_ultrasonic+0x68>
			break;
		else
			tick_difference = HAL_GetTick() - startTick;
 8001ea4:	f001 ff30 	bl	8003d08 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	607b      	str	r3, [r7, #4]
	while (tick_difference < ULTRASONIC_TIMEOUT_MS)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b13      	cmp	r3, #19
 8001eb4:	d9f2      	bls.n	8001e9c <measure_ultrasonic+0x4c>
 8001eb6:	e000      	b.n	8001eba <measure_ultrasonic+0x6a>
			break;
 8001eb8:	bf00      	nop
	}
	HAL_TIM_IC_Stop_IT(&htim9, TIM_CHANNEL_1);
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4821      	ldr	r0, [pc, #132]	; (8001f44 <measure_ultrasonic+0xf4>)
 8001ebe:	f004 f8eb 	bl	8006098 <HAL_TIM_IC_Stop_IT>
	if(IC_flag == 1 && IC_time2 > IC_time1 && tick_difference < ULTRASONIC_TIMEOUT_MS)
 8001ec2:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <measure_ultrasonic+0xf8>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d118      	bne.n	8001efc <measure_ultrasonic+0xac>
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <measure_ultrasonic+0xfc>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <measure_ultrasonic+0x100>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d912      	bls.n	8001efc <measure_ultrasonic+0xac>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b13      	cmp	r3, #19
 8001eda:	d80f      	bhi.n	8001efc <measure_ultrasonic+0xac>
	{
		ultrasonic_distance_cm = (IC_time2 - IC_time1) * speed_of_sound;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <measure_ultrasonic+0xfc>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <measure_ultrasonic+0x100>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001f54 <measure_ultrasonic+0x104>
 8001ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <measure_ultrasonic+0x108>)
 8001ef8:	edc3 7a00 	vstr	s15, [r3]
	}
	if (ultrasonic_distance_cm > ULTRASONIC_MAX_DISTANCE_CM)
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <measure_ultrasonic+0x108>)
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001f5c <measure_ultrasonic+0x10c>
 8001f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0e:	dd03      	ble.n	8001f18 <measure_ultrasonic+0xc8>
		ultrasonic_distance_cm = ULTRASONIC_MAX_DISTANCE_CM;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <measure_ultrasonic+0x108>)
 8001f12:	4a13      	ldr	r2, [pc, #76]	; (8001f60 <measure_ultrasonic+0x110>)
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e00c      	b.n	8001f32 <measure_ultrasonic+0xe2>
	else if (ultrasonic_distance_cm < ULTRASONIC_MIN_DISTANCE_CM)
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <measure_ultrasonic+0x108>)
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2a:	d502      	bpl.n	8001f32 <measure_ultrasonic+0xe2>
		ultrasonic_distance_cm = ULTRASONIC_MIN_DISTANCE_CM;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <measure_ultrasonic+0x108>)
 8001f2e:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <measure_ultrasonic+0x114>)
 8001f30:	601a      	str	r2, [r3, #0]
	IC_flag = 0;
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <measure_ultrasonic+0xf8>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	20000da4 	.word	0x20000da4
 8001f48:	20000360 	.word	0x20000360
 8001f4c:	20000368 	.word	0x20000368
 8001f50:	20000364 	.word	0x20000364
 8001f54:	3c8c7e28 	.word	0x3c8c7e28
 8001f58:	2000036c 	.word	0x2000036c
 8001f5c:	43fa0000 	.word	0x43fa0000
 8001f60:	43fa0000 	.word	0x43fa0000
 8001f64:	40a00000 	.word	0x40a00000

08001f68 <read_sbus>:
void read_sbus()
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	71bb      	strb	r3, [r7, #6]
	if(rxUART6[0] == SBUS_START && rxUART6[24] == SBUS_END)
 8001f72:	4b9a      	ldr	r3, [pc, #616]	; (80021dc <read_sbus+0x274>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b0f      	cmp	r3, #15
 8001f78:	f040 81d0 	bne.w	800231c <read_sbus+0x3b4>
 8001f7c:	4b97      	ldr	r3, [pc, #604]	; (80021dc <read_sbus+0x274>)
 8001f7e:	7e1b      	ldrb	r3, [r3, #24]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f040 81cb 	bne.w	800231c <read_sbus+0x3b4>
	{
		//failsafe
		rc_frame_lost = (rxUART6[i+23] & 0x04) >> 2;
 8001f86:	79bb      	ldrb	r3, [r7, #6]
 8001f88:	3317      	adds	r3, #23
 8001f8a:	4a94      	ldr	r2, [pc, #592]	; (80021dc <read_sbus+0x274>)
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	109b      	asrs	r3, r3, #2
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b91      	ldr	r3, [pc, #580]	; (80021e0 <read_sbus+0x278>)
 8001f9a:	701a      	strb	r2, [r3, #0]
		rc_failsafe = (rxUART6[i+23] & 0x08) >> 3;
 8001f9c:	79bb      	ldrb	r3, [r7, #6]
 8001f9e:	3317      	adds	r3, #23
 8001fa0:	4a8e      	ldr	r2, [pc, #568]	; (80021dc <read_sbus+0x274>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	10db      	asrs	r3, r3, #3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4b8d      	ldr	r3, [pc, #564]	; (80021e4 <read_sbus+0x27c>)
 8001fb0:	701a      	strb	r2, [r3, #0]
		//16 channels, 11bit per channel
		rc_in_raw[0] = (rxUART6[i+1] | rxUART6[i+2] << 8) & 0x07ff;
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4a89      	ldr	r2, [pc, #548]	; (80021dc <read_sbus+0x274>)
 8001fb8:	5cd3      	ldrb	r3, [r2, r3]
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	79bb      	ldrb	r3, [r7, #6]
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	4986      	ldr	r1, [pc, #536]	; (80021dc <read_sbus+0x274>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b84      	ldr	r3, [pc, #528]	; (80021e8 <read_sbus+0x280>)
 8001fd6:	801a      	strh	r2, [r3, #0]
		rc_in_raw[1] = (rxUART6[i+2] >> 3 | rxUART6[i+3] << 5) & 0x07ff;
 8001fd8:	79bb      	ldrb	r3, [r7, #6]
 8001fda:	3302      	adds	r3, #2
 8001fdc:	4a7f      	ldr	r2, [pc, #508]	; (80021dc <read_sbus+0x274>)
 8001fde:	5cd3      	ldrb	r3, [r2, r3]
 8001fe0:	08db      	lsrs	r3, r3, #3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	b21a      	sxth	r2, r3
 8001fe6:	79bb      	ldrb	r3, [r7, #6]
 8001fe8:	3303      	adds	r3, #3
 8001fea:	497c      	ldr	r1, [pc, #496]	; (80021dc <read_sbus+0x274>)
 8001fec:	5ccb      	ldrb	r3, [r1, r3]
 8001fee:	015b      	lsls	r3, r3, #5
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	4b7a      	ldr	r3, [pc, #488]	; (80021e8 <read_sbus+0x280>)
 8002000:	805a      	strh	r2, [r3, #2]
		rc_in_raw[2] = (rxUART6[i+3] >> 6 | rxUART6[i+4] << 2 | rxUART6[i+5] << 10) & 0x07ff;
 8002002:	79bb      	ldrb	r3, [r7, #6]
 8002004:	3303      	adds	r3, #3
 8002006:	4a75      	ldr	r2, [pc, #468]	; (80021dc <read_sbus+0x274>)
 8002008:	5cd3      	ldrb	r3, [r2, r3]
 800200a:	099b      	lsrs	r3, r3, #6
 800200c:	b2db      	uxtb	r3, r3
 800200e:	b21a      	sxth	r2, r3
 8002010:	79bb      	ldrb	r3, [r7, #6]
 8002012:	3304      	adds	r3, #4
 8002014:	4971      	ldr	r1, [pc, #452]	; (80021dc <read_sbus+0x274>)
 8002016:	5ccb      	ldrb	r3, [r1, r3]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	b21b      	sxth	r3, r3
 800201c:	4313      	orrs	r3, r2
 800201e:	b21a      	sxth	r2, r3
 8002020:	79bb      	ldrb	r3, [r7, #6]
 8002022:	3305      	adds	r3, #5
 8002024:	496d      	ldr	r1, [pc, #436]	; (80021dc <read_sbus+0x274>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	029b      	lsls	r3, r3, #10
 800202a:	b21b      	sxth	r3, r3
 800202c:	4313      	orrs	r3, r2
 800202e:	b21b      	sxth	r3, r3
 8002030:	b29b      	uxth	r3, r3
 8002032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002036:	b29a      	uxth	r2, r3
 8002038:	4b6b      	ldr	r3, [pc, #428]	; (80021e8 <read_sbus+0x280>)
 800203a:	809a      	strh	r2, [r3, #4]
		rc_in_raw[3] = (rxUART6[i+5] >> 1 | rxUART6[i+6] << 7) & 0x07ff;
 800203c:	79bb      	ldrb	r3, [r7, #6]
 800203e:	3305      	adds	r3, #5
 8002040:	4a66      	ldr	r2, [pc, #408]	; (80021dc <read_sbus+0x274>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	b21a      	sxth	r2, r3
 800204a:	79bb      	ldrb	r3, [r7, #6]
 800204c:	3306      	adds	r3, #6
 800204e:	4963      	ldr	r1, [pc, #396]	; (80021dc <read_sbus+0x274>)
 8002050:	5ccb      	ldrb	r3, [r1, r3]
 8002052:	01db      	lsls	r3, r3, #7
 8002054:	b21b      	sxth	r3, r3
 8002056:	4313      	orrs	r3, r2
 8002058:	b21b      	sxth	r3, r3
 800205a:	b29b      	uxth	r3, r3
 800205c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002060:	b29a      	uxth	r2, r3
 8002062:	4b61      	ldr	r3, [pc, #388]	; (80021e8 <read_sbus+0x280>)
 8002064:	80da      	strh	r2, [r3, #6]
		rc_in_raw[4] = (rxUART6[i+6] >> 4 | rxUART6[i+7] << 4) & 0x07ff;
 8002066:	79bb      	ldrb	r3, [r7, #6]
 8002068:	3306      	adds	r3, #6
 800206a:	4a5c      	ldr	r2, [pc, #368]	; (80021dc <read_sbus+0x274>)
 800206c:	5cd3      	ldrb	r3, [r2, r3]
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	b2db      	uxtb	r3, r3
 8002072:	b21a      	sxth	r2, r3
 8002074:	79bb      	ldrb	r3, [r7, #6]
 8002076:	3307      	adds	r3, #7
 8002078:	4958      	ldr	r1, [pc, #352]	; (80021dc <read_sbus+0x274>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	b21b      	sxth	r3, r3
 8002080:	4313      	orrs	r3, r2
 8002082:	b21b      	sxth	r3, r3
 8002084:	b29b      	uxth	r3, r3
 8002086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800208a:	b29a      	uxth	r2, r3
 800208c:	4b56      	ldr	r3, [pc, #344]	; (80021e8 <read_sbus+0x280>)
 800208e:	811a      	strh	r2, [r3, #8]
		rc_in_raw[5] = (rxUART6[i+7] >> 7 | rxUART6[i+8] << 1 | rxUART6[i+9] << 9) & 0x07ff;
 8002090:	79bb      	ldrb	r3, [r7, #6]
 8002092:	3307      	adds	r3, #7
 8002094:	4a51      	ldr	r2, [pc, #324]	; (80021dc <read_sbus+0x274>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	09db      	lsrs	r3, r3, #7
 800209a:	b2db      	uxtb	r3, r3
 800209c:	b21a      	sxth	r2, r3
 800209e:	79bb      	ldrb	r3, [r7, #6]
 80020a0:	3308      	adds	r3, #8
 80020a2:	494e      	ldr	r1, [pc, #312]	; (80021dc <read_sbus+0x274>)
 80020a4:	5ccb      	ldrb	r3, [r1, r3]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b21a      	sxth	r2, r3
 80020ae:	79bb      	ldrb	r3, [r7, #6]
 80020b0:	3309      	adds	r3, #9
 80020b2:	494a      	ldr	r1, [pc, #296]	; (80021dc <read_sbus+0x274>)
 80020b4:	5ccb      	ldrb	r3, [r1, r3]
 80020b6:	025b      	lsls	r3, r3, #9
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b21b      	sxth	r3, r3
 80020be:	b29b      	uxth	r3, r3
 80020c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <read_sbus+0x280>)
 80020c8:	815a      	strh	r2, [r3, #10]
		rc_in_raw[6] = (rxUART6[i+9] >> 2 | rxUART6[i+10] << 6) & 0x07ff;
 80020ca:	79bb      	ldrb	r3, [r7, #6]
 80020cc:	3309      	adds	r3, #9
 80020ce:	4a43      	ldr	r2, [pc, #268]	; (80021dc <read_sbus+0x274>)
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	b21a      	sxth	r2, r3
 80020d8:	79bb      	ldrb	r3, [r7, #6]
 80020da:	330a      	adds	r3, #10
 80020dc:	493f      	ldr	r1, [pc, #252]	; (80021dc <read_sbus+0x274>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	019b      	lsls	r3, r3, #6
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <read_sbus+0x280>)
 80020f2:	819a      	strh	r2, [r3, #12]
		rc_in_raw[7] = (rxUART6[i+10] >> 5 | rxUART6[i+11] << 3) & 0x07ff;
 80020f4:	79bb      	ldrb	r3, [r7, #6]
 80020f6:	330a      	adds	r3, #10
 80020f8:	4a38      	ldr	r2, [pc, #224]	; (80021dc <read_sbus+0x274>)
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	095b      	lsrs	r3, r3, #5
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	b21a      	sxth	r2, r3
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	330b      	adds	r3, #11
 8002106:	4935      	ldr	r1, [pc, #212]	; (80021dc <read_sbus+0x274>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	b21b      	sxth	r3, r3
 800210e:	4313      	orrs	r3, r2
 8002110:	b21b      	sxth	r3, r3
 8002112:	b29b      	uxth	r3, r3
 8002114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002118:	b29a      	uxth	r2, r3
 800211a:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <read_sbus+0x280>)
 800211c:	81da      	strh	r2, [r3, #14]
		rc_in_raw[8] = (rxUART6[i+12] | rxUART6[i+13] << 8) & 0x07ff;
 800211e:	79bb      	ldrb	r3, [r7, #6]
 8002120:	330c      	adds	r3, #12
 8002122:	4a2e      	ldr	r2, [pc, #184]	; (80021dc <read_sbus+0x274>)
 8002124:	5cd3      	ldrb	r3, [r2, r3]
 8002126:	b21a      	sxth	r2, r3
 8002128:	79bb      	ldrb	r3, [r7, #6]
 800212a:	330d      	adds	r3, #13
 800212c:	492b      	ldr	r1, [pc, #172]	; (80021dc <read_sbus+0x274>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	b21b      	sxth	r3, r3
 8002134:	4313      	orrs	r3, r2
 8002136:	b21b      	sxth	r3, r3
 8002138:	b29b      	uxth	r3, r3
 800213a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800213e:	b29a      	uxth	r2, r3
 8002140:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <read_sbus+0x280>)
 8002142:	821a      	strh	r2, [r3, #16]
		rc_in_raw[9] = (rxUART6[i+13] >> 3 | rxUART6[i+14] << 5) & 0x07ff;
 8002144:	79bb      	ldrb	r3, [r7, #6]
 8002146:	330d      	adds	r3, #13
 8002148:	4a24      	ldr	r2, [pc, #144]	; (80021dc <read_sbus+0x274>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	08db      	lsrs	r3, r3, #3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	b21a      	sxth	r2, r3
 8002152:	79bb      	ldrb	r3, [r7, #6]
 8002154:	330e      	adds	r3, #14
 8002156:	4921      	ldr	r1, [pc, #132]	; (80021dc <read_sbus+0x274>)
 8002158:	5ccb      	ldrb	r3, [r1, r3]
 800215a:	015b      	lsls	r3, r3, #5
 800215c:	b21b      	sxth	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	b21b      	sxth	r3, r3
 8002162:	b29b      	uxth	r3, r3
 8002164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002168:	b29a      	uxth	r2, r3
 800216a:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <read_sbus+0x280>)
 800216c:	825a      	strh	r2, [r3, #18]
		rc_in_raw[10] = (rxUART6[i+14] >> 6 | rxUART6[i+15] << 2 | rxUART6[i+16] << 10) & 0x07ff;
 800216e:	79bb      	ldrb	r3, [r7, #6]
 8002170:	330e      	adds	r3, #14
 8002172:	4a1a      	ldr	r2, [pc, #104]	; (80021dc <read_sbus+0x274>)
 8002174:	5cd3      	ldrb	r3, [r2, r3]
 8002176:	099b      	lsrs	r3, r3, #6
 8002178:	b2db      	uxtb	r3, r3
 800217a:	b21a      	sxth	r2, r3
 800217c:	79bb      	ldrb	r3, [r7, #6]
 800217e:	330f      	adds	r3, #15
 8002180:	4916      	ldr	r1, [pc, #88]	; (80021dc <read_sbus+0x274>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	b21b      	sxth	r3, r3
 8002188:	4313      	orrs	r3, r2
 800218a:	b21a      	sxth	r2, r3
 800218c:	79bb      	ldrb	r3, [r7, #6]
 800218e:	3310      	adds	r3, #16
 8002190:	4912      	ldr	r1, [pc, #72]	; (80021dc <read_sbus+0x274>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	029b      	lsls	r3, r3, #10
 8002196:	b21b      	sxth	r3, r3
 8002198:	4313      	orrs	r3, r2
 800219a:	b21b      	sxth	r3, r3
 800219c:	b29b      	uxth	r3, r3
 800219e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <read_sbus+0x280>)
 80021a6:	829a      	strh	r2, [r3, #20]
		rc_in_raw[11] = (rxUART6[i+16] >> 1 | rxUART6[i+17] << 7) & 0x07ff;
 80021a8:	79bb      	ldrb	r3, [r7, #6]
 80021aa:	3310      	adds	r3, #16
 80021ac:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <read_sbus+0x274>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	b21a      	sxth	r2, r3
 80021b6:	79bb      	ldrb	r3, [r7, #6]
 80021b8:	3311      	adds	r3, #17
 80021ba:	4908      	ldr	r1, [pc, #32]	; (80021dc <read_sbus+0x274>)
 80021bc:	5ccb      	ldrb	r3, [r1, r3]
 80021be:	01db      	lsls	r3, r3, #7
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <read_sbus+0x280>)
 80021d0:	82da      	strh	r2, [r3, #22]
		rc_in_raw[12] = (rxUART6[i+17] >> 4 | rxUART6[i+18] << 4) & 0x07ff;
 80021d2:	79bb      	ldrb	r3, [r7, #6]
 80021d4:	3311      	adds	r3, #17
 80021d6:	4a01      	ldr	r2, [pc, #4]	; (80021dc <read_sbus+0x274>)
 80021d8:	5cd3      	ldrb	r3, [r2, r3]
 80021da:	e007      	b.n	80021ec <read_sbus+0x284>
 80021dc:	2000023c 	.word	0x2000023c
 80021e0:	2000035c 	.word	0x2000035c
 80021e4:	2000035d 	.word	0x2000035d
 80021e8:	2000029c 	.word	0x2000029c
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	79bb      	ldrb	r3, [r7, #6]
 80021f4:	3312      	adds	r3, #18
 80021f6:	4952      	ldr	r1, [pc, #328]	; (8002340 <read_sbus+0x3d8>)
 80021f8:	5ccb      	ldrb	r3, [r1, r3]
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	4313      	orrs	r3, r2
 8002200:	b21b      	sxth	r3, r3
 8002202:	b29b      	uxth	r3, r3
 8002204:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002208:	b29a      	uxth	r2, r3
 800220a:	4b4e      	ldr	r3, [pc, #312]	; (8002344 <read_sbus+0x3dc>)
 800220c:	831a      	strh	r2, [r3, #24]
		rc_in_raw[13] = (rxUART6[i+18] >> 7 | rxUART6[i+19] << 1 | rxUART6[i+20] << 9) & 0x07ff;
 800220e:	79bb      	ldrb	r3, [r7, #6]
 8002210:	3312      	adds	r3, #18
 8002212:	4a4b      	ldr	r2, [pc, #300]	; (8002340 <read_sbus+0x3d8>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	09db      	lsrs	r3, r3, #7
 8002218:	b2db      	uxtb	r3, r3
 800221a:	b21a      	sxth	r2, r3
 800221c:	79bb      	ldrb	r3, [r7, #6]
 800221e:	3313      	adds	r3, #19
 8002220:	4947      	ldr	r1, [pc, #284]	; (8002340 <read_sbus+0x3d8>)
 8002222:	5ccb      	ldrb	r3, [r1, r3]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b21a      	sxth	r2, r3
 800222c:	79bb      	ldrb	r3, [r7, #6]
 800222e:	3314      	adds	r3, #20
 8002230:	4943      	ldr	r1, [pc, #268]	; (8002340 <read_sbus+0x3d8>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	025b      	lsls	r3, r3, #9
 8002236:	b21b      	sxth	r3, r3
 8002238:	4313      	orrs	r3, r2
 800223a:	b21b      	sxth	r3, r3
 800223c:	b29b      	uxth	r3, r3
 800223e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002242:	b29a      	uxth	r2, r3
 8002244:	4b3f      	ldr	r3, [pc, #252]	; (8002344 <read_sbus+0x3dc>)
 8002246:	835a      	strh	r2, [r3, #26]
		rc_in_raw[14] = (rxUART6[i+20] >> 2 | rxUART6[i+21] << 6) & 0x07ff;
 8002248:	79bb      	ldrb	r3, [r7, #6]
 800224a:	3314      	adds	r3, #20
 800224c:	4a3c      	ldr	r2, [pc, #240]	; (8002340 <read_sbus+0x3d8>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	b2db      	uxtb	r3, r3
 8002254:	b21a      	sxth	r2, r3
 8002256:	79bb      	ldrb	r3, [r7, #6]
 8002258:	3315      	adds	r3, #21
 800225a:	4939      	ldr	r1, [pc, #228]	; (8002340 <read_sbus+0x3d8>)
 800225c:	5ccb      	ldrb	r3, [r1, r3]
 800225e:	019b      	lsls	r3, r3, #6
 8002260:	b21b      	sxth	r3, r3
 8002262:	4313      	orrs	r3, r2
 8002264:	b21b      	sxth	r3, r3
 8002266:	b29b      	uxth	r3, r3
 8002268:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800226c:	b29a      	uxth	r2, r3
 800226e:	4b35      	ldr	r3, [pc, #212]	; (8002344 <read_sbus+0x3dc>)
 8002270:	839a      	strh	r2, [r3, #28]
		rc_in_raw[15] = (rxUART6[i+21] >> 5 | rxUART6[i+22] << 3) & 0x07ff;
 8002272:	79bb      	ldrb	r3, [r7, #6]
 8002274:	3315      	adds	r3, #21
 8002276:	4a32      	ldr	r2, [pc, #200]	; (8002340 <read_sbus+0x3d8>)
 8002278:	5cd3      	ldrb	r3, [r2, r3]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	b2db      	uxtb	r3, r3
 800227e:	b21a      	sxth	r2, r3
 8002280:	79bb      	ldrb	r3, [r7, #6]
 8002282:	3316      	adds	r3, #22
 8002284:	492e      	ldr	r1, [pc, #184]	; (8002340 <read_sbus+0x3d8>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	b21b      	sxth	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	b21b      	sxth	r3, r3
 8002290:	b29b      	uxth	r3, r3
 8002292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002296:	b29a      	uxth	r2, r3
 8002298:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <read_sbus+0x3dc>)
 800229a:	83da      	strh	r2, [r3, #30]
		for(uint8_t i = 0; i < SBUS_CHANNELS; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	71fb      	strb	r3, [r7, #7]
 80022a0:	e01a      	b.n	80022d8 <read_sbus+0x370>
		{
			rc_in[i] = (5 * rc_in_raw[i] / 8) + 880;//int to float
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	4a27      	ldr	r2, [pc, #156]	; (8002344 <read_sbus+0x3dc>)
 80022a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022aa:	461a      	mov	r2, r3
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	da00      	bge.n	80022b8 <read_sbus+0x350>
 80022b6:	3307      	adds	r3, #7
 80022b8:	10db      	asrs	r3, r3, #3
 80022ba:	f503 725c 	add.w	r2, r3, #880	; 0x370
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	ee07 2a90 	vmov	s15, r2
 80022c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c8:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <read_sbus+0x3e0>)
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t i = 0; i < SBUS_CHANNELS; i++)
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	3301      	adds	r3, #1
 80022d6:	71fb      	strb	r3, [r7, #7]
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	2b0f      	cmp	r3, #15
 80022dc:	d9e1      	bls.n	80022a2 <read_sbus+0x33a>
		}
		rc_bad_frame = 0;
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <read_sbus+0x3e4>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
		if(last_state_rcin6 <= 1900 && rc_in[6] > 1900)
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <read_sbus+0x3e8>)
 80022e6:	edd3 7a00 	vldr	s15, [r3]
 80022ea:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002354 <read_sbus+0x3ec>
 80022ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f6:	d80c      	bhi.n	8002312 <read_sbus+0x3aa>
 80022f8:	4b13      	ldr	r3, [pc, #76]	; (8002348 <read_sbus+0x3e0>)
 80022fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80022fe:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002354 <read_sbus+0x3ec>
 8002302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230a:	dd02      	ble.n	8002312 <read_sbus+0x3aa>
			begin_tracking = 1;
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <read_sbus+0x3f0>)
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
		last_state_rcin6 = rc_in[6];
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <read_sbus+0x3e0>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <read_sbus+0x3e8>)
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	e00d      	b.n	8002338 <read_sbus+0x3d0>
	}
	else
	{
		rc_bad_frame = 1;
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <read_sbus+0x3e4>)
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive(&huart6);
 8002322:	480e      	ldr	r0, [pc, #56]	; (800235c <read_sbus+0x3f4>)
 8002324:	f004 fe94 	bl	8007050 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart6, (uint8_t *)rxUART6, sbus_receive_length);
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <read_sbus+0x3f8>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	4903      	ldr	r1, [pc, #12]	; (8002340 <read_sbus+0x3d8>)
 8002332:	480a      	ldr	r0, [pc, #40]	; (800235c <read_sbus+0x3f4>)
 8002334:	f004 fe4f 	bl	8006fd6 <HAL_UART_Receive_DMA>
	}
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	2000023c 	.word	0x2000023c
 8002344:	2000029c 	.word	0x2000029c
 8002348:	200002dc 	.word	0x200002dc
 800234c:	20000299 	.word	0x20000299
 8002350:	20000000 	.word	0x20000000
 8002354:	44ed8000 	.word	0x44ed8000
 8002358:	20000210 	.word	0x20000210
 800235c:	20000e74 	.word	0x20000e74
 8002360:	20000004 	.word	0x20000004

08002364 <write_sbus>:
void write_sbus()
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
	//float to int
	for(uint8_t i = 0; i < SBUS_CHANNELS; i++)
 800236a:	2300      	movs	r3, #0
 800236c:	71fb      	strb	r3, [r7, #7]
 800236e:	e036      	b.n	80023de <write_sbus+0x7a>
	{
		//rc_in[i] = (5 * rc_in_raw[i] / 8) + 880;
		rc_out_raw[i] = (rc_out[i] - 880) * 8 / 5;
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	4aa4      	ldr	r2, [pc, #656]	; (8002604 <write_sbus+0x2a0>)
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8002608 <write_sbus+0x2a4>
 8002380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002384:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002388:	ee27 7a87 	vmul.f32	s14, s15, s14
 800238c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002390:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239a:	ee17 2a90 	vmov	r2, s15
 800239e:	b291      	uxth	r1, r2
 80023a0:	4a9a      	ldr	r2, [pc, #616]	; (800260c <write_sbus+0x2a8>)
 80023a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (rc_out_raw[i] < SBUS_CHANNEL_MIN)
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	4a98      	ldr	r2, [pc, #608]	; (800260c <write_sbus+0x2a8>)
 80023aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023ae:	2bac      	cmp	r3, #172	; 0xac
 80023b0:	d804      	bhi.n	80023bc <write_sbus+0x58>
			rc_out_raw[i] = SBUS_CHANNEL_MIN;
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	4a95      	ldr	r2, [pc, #596]	; (800260c <write_sbus+0x2a8>)
 80023b6:	21ad      	movs	r1, #173	; 0xad
 80023b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (rc_out_raw[i] > SBUS_CHANNEL_MAX)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	4a93      	ldr	r2, [pc, #588]	; (800260c <write_sbus+0x2a8>)
 80023c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023c4:	f240 7214 	movw	r2, #1812	; 0x714
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d905      	bls.n	80023d8 <write_sbus+0x74>
			rc_out_raw[i] = SBUS_CHANNEL_MAX;
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	4a8f      	ldr	r2, [pc, #572]	; (800260c <write_sbus+0x2a8>)
 80023d0:	f240 7114 	movw	r1, #1812	; 0x714
 80023d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < SBUS_CHANNELS; i++)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	3301      	adds	r3, #1
 80023dc:	71fb      	strb	r3, [r7, #7]
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2b0f      	cmp	r3, #15
 80023e2:	d9c5      	bls.n	8002370 <write_sbus+0xc>
	}

	txUART5[0] = SBUS_START;
 80023e4:	4b8a      	ldr	r3, [pc, #552]	; (8002610 <write_sbus+0x2ac>)
 80023e6:	220f      	movs	r2, #15
 80023e8:	701a      	strb	r2, [r3, #0]
	//16 channels, 11bit per channel
	txUART5[1] = ((rc_out_raw[0] & 0x07ff));
 80023ea:	4b88      	ldr	r3, [pc, #544]	; (800260c <write_sbus+0x2a8>)
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b87      	ldr	r3, [pc, #540]	; (8002610 <write_sbus+0x2ac>)
 80023f2:	705a      	strb	r2, [r3, #1]
	txUART5[2] = ((rc_out_raw[0] & 0x07ff) >> 8 | (rc_out_raw[1] & 0x07ff) << 3);
 80023f4:	4b85      	ldr	r3, [pc, #532]	; (800260c <write_sbus+0x2a8>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	121b      	asrs	r3, r3, #8
 80023fa:	b25b      	sxtb	r3, r3
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	b25a      	sxtb	r2, r3
 8002402:	4b82      	ldr	r3, [pc, #520]	; (800260c <write_sbus+0x2a8>)
 8002404:	885b      	ldrh	r3, [r3, #2]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	b25b      	sxtb	r3, r3
 800240a:	f023 0307 	bic.w	r3, r3, #7
 800240e:	b25b      	sxtb	r3, r3
 8002410:	4313      	orrs	r3, r2
 8002412:	b25b      	sxtb	r3, r3
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b7e      	ldr	r3, [pc, #504]	; (8002610 <write_sbus+0x2ac>)
 8002418:	709a      	strb	r2, [r3, #2]
	txUART5[3] = ((rc_out_raw[1] & 0x07ff) >> 5 | (rc_out_raw[2] & 0x07ff) << 6);
 800241a:	4b7c      	ldr	r3, [pc, #496]	; (800260c <write_sbus+0x2a8>)
 800241c:	885b      	ldrh	r3, [r3, #2]
 800241e:	115b      	asrs	r3, r3, #5
 8002420:	b25b      	sxtb	r3, r3
 8002422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002426:	b25a      	sxtb	r2, r3
 8002428:	4b78      	ldr	r3, [pc, #480]	; (800260c <write_sbus+0x2a8>)
 800242a:	889b      	ldrh	r3, [r3, #4]
 800242c:	019b      	lsls	r3, r3, #6
 800242e:	b25b      	sxtb	r3, r3
 8002430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002434:	b25b      	sxtb	r3, r3
 8002436:	4313      	orrs	r3, r2
 8002438:	b25b      	sxtb	r3, r3
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b74      	ldr	r3, [pc, #464]	; (8002610 <write_sbus+0x2ac>)
 800243e:	70da      	strb	r2, [r3, #3]
	txUART5[4] = ((rc_out_raw[2] & 0x07ff) >> 2);
 8002440:	4b72      	ldr	r3, [pc, #456]	; (800260c <write_sbus+0x2a8>)
 8002442:	889b      	ldrh	r3, [r3, #4]
 8002444:	109b      	asrs	r3, r3, #2
 8002446:	b2da      	uxtb	r2, r3
 8002448:	4b71      	ldr	r3, [pc, #452]	; (8002610 <write_sbus+0x2ac>)
 800244a:	711a      	strb	r2, [r3, #4]
	txUART5[5] = ((rc_out_raw[2] & 0x07ff) >> 10 | (rc_out_raw[3] & 0x07ff) << 1);
 800244c:	4b6f      	ldr	r3, [pc, #444]	; (800260c <write_sbus+0x2a8>)
 800244e:	889b      	ldrh	r3, [r3, #4]
 8002450:	129b      	asrs	r3, r3, #10
 8002452:	b25b      	sxtb	r3, r3
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	b25a      	sxtb	r2, r3
 800245a:	4b6c      	ldr	r3, [pc, #432]	; (800260c <write_sbus+0x2a8>)
 800245c:	88db      	ldrh	r3, [r3, #6]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	b25b      	sxtb	r3, r3
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	b25b      	sxtb	r3, r3
 8002468:	4313      	orrs	r3, r2
 800246a:	b25b      	sxtb	r3, r3
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b68      	ldr	r3, [pc, #416]	; (8002610 <write_sbus+0x2ac>)
 8002470:	715a      	strb	r2, [r3, #5]
	txUART5[6] = ((rc_out_raw[3] & 0x07ff) >> 7 | (rc_out_raw[4] & 0x07ff) << 4);
 8002472:	4b66      	ldr	r3, [pc, #408]	; (800260c <write_sbus+0x2a8>)
 8002474:	88db      	ldrh	r3, [r3, #6]
 8002476:	11db      	asrs	r3, r3, #7
 8002478:	b25b      	sxtb	r3, r3
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	b25a      	sxtb	r2, r3
 8002480:	4b62      	ldr	r3, [pc, #392]	; (800260c <write_sbus+0x2a8>)
 8002482:	891b      	ldrh	r3, [r3, #8]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	b25b      	sxtb	r3, r3
 8002488:	f023 030f 	bic.w	r3, r3, #15
 800248c:	b25b      	sxtb	r3, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	b25b      	sxtb	r3, r3
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b5e      	ldr	r3, [pc, #376]	; (8002610 <write_sbus+0x2ac>)
 8002496:	719a      	strb	r2, [r3, #6]
	txUART5[7] = ((rc_out_raw[4] & 0x07ff) >> 4 | (rc_out_raw[5] & 0x07ff) << 7);
 8002498:	4b5c      	ldr	r3, [pc, #368]	; (800260c <write_sbus+0x2a8>)
 800249a:	891b      	ldrh	r3, [r3, #8]
 800249c:	111b      	asrs	r3, r3, #4
 800249e:	b25b      	sxtb	r3, r3
 80024a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a4:	b25a      	sxtb	r2, r3
 80024a6:	4b59      	ldr	r3, [pc, #356]	; (800260c <write_sbus+0x2a8>)
 80024a8:	895b      	ldrh	r3, [r3, #10]
 80024aa:	01db      	lsls	r3, r3, #7
 80024ac:	b25b      	sxtb	r3, r3
 80024ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80024b2:	b25b      	sxtb	r3, r3
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b55      	ldr	r3, [pc, #340]	; (8002610 <write_sbus+0x2ac>)
 80024bc:	71da      	strb	r2, [r3, #7]
	txUART5[8] = ((rc_out_raw[5] & 0x07ff) >> 1);
 80024be:	4b53      	ldr	r3, [pc, #332]	; (800260c <write_sbus+0x2a8>)
 80024c0:	895b      	ldrh	r3, [r3, #10]
 80024c2:	105b      	asrs	r3, r3, #1
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b52      	ldr	r3, [pc, #328]	; (8002610 <write_sbus+0x2ac>)
 80024c8:	721a      	strb	r2, [r3, #8]
	txUART5[9] = ((rc_out_raw[5] & 0x07ff) >> 9 | (rc_out_raw[6] & 0x07ff) << 2);
 80024ca:	4b50      	ldr	r3, [pc, #320]	; (800260c <write_sbus+0x2a8>)
 80024cc:	895b      	ldrh	r3, [r3, #10]
 80024ce:	125b      	asrs	r3, r3, #9
 80024d0:	b25b      	sxtb	r3, r3
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	b25a      	sxtb	r2, r3
 80024d8:	4b4c      	ldr	r3, [pc, #304]	; (800260c <write_sbus+0x2a8>)
 80024da:	899b      	ldrh	r3, [r3, #12]
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	b25b      	sxtb	r3, r3
 80024e0:	f023 0303 	bic.w	r3, r3, #3
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b25b      	sxtb	r3, r3
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	4b48      	ldr	r3, [pc, #288]	; (8002610 <write_sbus+0x2ac>)
 80024ee:	725a      	strb	r2, [r3, #9]
	txUART5[10] = ((rc_out_raw[6] & 0x07ff) >> 6 | (rc_out_raw[7] & 0x07ff) << 5);
 80024f0:	4b46      	ldr	r3, [pc, #280]	; (800260c <write_sbus+0x2a8>)
 80024f2:	899b      	ldrh	r3, [r3, #12]
 80024f4:	119b      	asrs	r3, r3, #6
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	b25a      	sxtb	r2, r3
 80024fe:	4b43      	ldr	r3, [pc, #268]	; (800260c <write_sbus+0x2a8>)
 8002500:	89db      	ldrh	r3, [r3, #14]
 8002502:	015b      	lsls	r3, r3, #5
 8002504:	b25b      	sxtb	r3, r3
 8002506:	4313      	orrs	r3, r2
 8002508:	b25b      	sxtb	r3, r3
 800250a:	b2da      	uxtb	r2, r3
 800250c:	4b40      	ldr	r3, [pc, #256]	; (8002610 <write_sbus+0x2ac>)
 800250e:	729a      	strb	r2, [r3, #10]
	txUART5[11] = ((rc_out_raw[7] & 0x07ff) >> 3);
 8002510:	4b3e      	ldr	r3, [pc, #248]	; (800260c <write_sbus+0x2a8>)
 8002512:	89db      	ldrh	r3, [r3, #14]
 8002514:	10db      	asrs	r3, r3, #3
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <write_sbus+0x2ac>)
 800251a:	72da      	strb	r2, [r3, #11]
	txUART5[12] = ((rc_out_raw[8] & 0x07ff));
 800251c:	4b3b      	ldr	r3, [pc, #236]	; (800260c <write_sbus+0x2a8>)
 800251e:	8a1b      	ldrh	r3, [r3, #16]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <write_sbus+0x2ac>)
 8002524:	731a      	strb	r2, [r3, #12]
	txUART5[13] = ((rc_out_raw[8] & 0x07ff) >> 8 | (rc_out_raw[9] & 0x07ff) << 3);
 8002526:	4b39      	ldr	r3, [pc, #228]	; (800260c <write_sbus+0x2a8>)
 8002528:	8a1b      	ldrh	r3, [r3, #16]
 800252a:	121b      	asrs	r3, r3, #8
 800252c:	b25b      	sxtb	r3, r3
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	b25a      	sxtb	r2, r3
 8002534:	4b35      	ldr	r3, [pc, #212]	; (800260c <write_sbus+0x2a8>)
 8002536:	8a5b      	ldrh	r3, [r3, #18]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	b25b      	sxtb	r3, r3
 800253c:	f023 0307 	bic.w	r3, r3, #7
 8002540:	b25b      	sxtb	r3, r3
 8002542:	4313      	orrs	r3, r2
 8002544:	b25b      	sxtb	r3, r3
 8002546:	b2da      	uxtb	r2, r3
 8002548:	4b31      	ldr	r3, [pc, #196]	; (8002610 <write_sbus+0x2ac>)
 800254a:	735a      	strb	r2, [r3, #13]
	txUART5[14] = ((rc_out_raw[9] & 0x07ff) >> 5 | (rc_out_raw[10] & 0x07ff) << 6);
 800254c:	4b2f      	ldr	r3, [pc, #188]	; (800260c <write_sbus+0x2a8>)
 800254e:	8a5b      	ldrh	r3, [r3, #18]
 8002550:	115b      	asrs	r3, r3, #5
 8002552:	b25b      	sxtb	r3, r3
 8002554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002558:	b25a      	sxtb	r2, r3
 800255a:	4b2c      	ldr	r3, [pc, #176]	; (800260c <write_sbus+0x2a8>)
 800255c:	8a9b      	ldrh	r3, [r3, #20]
 800255e:	019b      	lsls	r3, r3, #6
 8002560:	b25b      	sxtb	r3, r3
 8002562:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002566:	b25b      	sxtb	r3, r3
 8002568:	4313      	orrs	r3, r2
 800256a:	b25b      	sxtb	r3, r3
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b28      	ldr	r3, [pc, #160]	; (8002610 <write_sbus+0x2ac>)
 8002570:	739a      	strb	r2, [r3, #14]
	txUART5[15] = ((rc_out_raw[10] & 0x07ff) >> 2);
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <write_sbus+0x2a8>)
 8002574:	8a9b      	ldrh	r3, [r3, #20]
 8002576:	109b      	asrs	r3, r3, #2
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4b25      	ldr	r3, [pc, #148]	; (8002610 <write_sbus+0x2ac>)
 800257c:	73da      	strb	r2, [r3, #15]
	txUART5[16] = ((rc_out_raw[10] & 0x07ff) >> 10 | (rc_out_raw[11] & 0x07ff) << 1);
 800257e:	4b23      	ldr	r3, [pc, #140]	; (800260c <write_sbus+0x2a8>)
 8002580:	8a9b      	ldrh	r3, [r3, #20]
 8002582:	129b      	asrs	r3, r3, #10
 8002584:	b25b      	sxtb	r3, r3
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	b25a      	sxtb	r2, r3
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <write_sbus+0x2a8>)
 800258e:	8adb      	ldrh	r3, [r3, #22]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	b25b      	sxtb	r3, r3
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	b25b      	sxtb	r3, r3
 800259a:	4313      	orrs	r3, r2
 800259c:	b25b      	sxtb	r3, r3
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <write_sbus+0x2ac>)
 80025a2:	741a      	strb	r2, [r3, #16]
	txUART5[17] = ((rc_out_raw[11] & 0x07ff) >> 7 | (rc_out_raw[12] & 0x07ff) << 4);
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <write_sbus+0x2a8>)
 80025a6:	8adb      	ldrh	r3, [r3, #22]
 80025a8:	11db      	asrs	r3, r3, #7
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	b25a      	sxtb	r2, r3
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <write_sbus+0x2a8>)
 80025b4:	8b1b      	ldrh	r3, [r3, #24]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	b25b      	sxtb	r3, r3
 80025ba:	f023 030f 	bic.w	r3, r3, #15
 80025be:	b25b      	sxtb	r3, r3
 80025c0:	4313      	orrs	r3, r2
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <write_sbus+0x2ac>)
 80025c8:	745a      	strb	r2, [r3, #17]
	txUART5[18] = ((rc_out_raw[12] & 0x07ff) >> 4 | (rc_out_raw[13] & 0x07ff) << 7);
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <write_sbus+0x2a8>)
 80025cc:	8b1b      	ldrh	r3, [r3, #24]
 80025ce:	111b      	asrs	r3, r3, #4
 80025d0:	b25b      	sxtb	r3, r3
 80025d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025d6:	b25a      	sxtb	r2, r3
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <write_sbus+0x2a8>)
 80025da:	8b5b      	ldrh	r3, [r3, #26]
 80025dc:	01db      	lsls	r3, r3, #7
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80025e4:	b25b      	sxtb	r3, r3
 80025e6:	4313      	orrs	r3, r2
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <write_sbus+0x2ac>)
 80025ee:	749a      	strb	r2, [r3, #18]
	txUART5[19] = ((rc_out_raw[13] & 0x07ff) >> 1);
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <write_sbus+0x2a8>)
 80025f2:	8b5b      	ldrh	r3, [r3, #26]
 80025f4:	105b      	asrs	r3, r3, #1
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <write_sbus+0x2ac>)
 80025fa:	74da      	strb	r2, [r3, #19]
	txUART5[20] = ((rc_out_raw[13] & 0x07ff) >> 9 | (rc_out_raw[14] & 0x07ff) << 2);
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <write_sbus+0x2a8>)
 80025fe:	8b5b      	ldrh	r3, [r3, #26]
 8002600:	125b      	asrs	r3, r3, #9
 8002602:	e007      	b.n	8002614 <write_sbus+0x2b0>
 8002604:	2000031c 	.word	0x2000031c
 8002608:	445c0000 	.word	0x445c0000
 800260c:	200002bc 	.word	0x200002bc
 8002610:	20000270 	.word	0x20000270
 8002614:	b25b      	sxtb	r3, r3
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	b25a      	sxtb	r2, r3
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <write_sbus+0x334>)
 800261e:	8b9b      	ldrh	r3, [r3, #28]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	b25b      	sxtb	r3, r3
 8002624:	f023 0303 	bic.w	r3, r3, #3
 8002628:	b25b      	sxtb	r3, r3
 800262a:	4313      	orrs	r3, r2
 800262c:	b25b      	sxtb	r3, r3
 800262e:	b2da      	uxtb	r2, r3
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <write_sbus+0x338>)
 8002632:	751a      	strb	r2, [r3, #20]
	txUART5[21] = ((rc_out_raw[14] & 0x07ff) >> 6 | (rc_out_raw[15] & 0x07ff) << 5);
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <write_sbus+0x334>)
 8002636:	8b9b      	ldrh	r3, [r3, #28]
 8002638:	119b      	asrs	r3, r3, #6
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	b25a      	sxtb	r2, r3
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <write_sbus+0x334>)
 8002644:	8bdb      	ldrh	r3, [r3, #30]
 8002646:	015b      	lsls	r3, r3, #5
 8002648:	b25b      	sxtb	r3, r3
 800264a:	4313      	orrs	r3, r2
 800264c:	b25b      	sxtb	r3, r3
 800264e:	b2da      	uxtb	r2, r3
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <write_sbus+0x338>)
 8002652:	755a      	strb	r2, [r3, #21]
	txUART5[22] = ((rc_out_raw[15] & 0x07ff) >> 3);
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <write_sbus+0x334>)
 8002656:	8bdb      	ldrh	r3, [r3, #30]
 8002658:	10db      	asrs	r3, r3, #3
 800265a:	b2da      	uxtb	r2, r3
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <write_sbus+0x338>)
 800265e:	759a      	strb	r2, [r3, #22]
	txUART5[23] = ((rc_failsafe & 0x01) << 3) | ((rc_frame_lost & 0x01) << 2);
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <write_sbus+0x33c>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	b25b      	sxtb	r3, r3
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	b25a      	sxtb	r2, r3
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <write_sbus+0x340>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	b25b      	sxtb	r3, r3
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	b25b      	sxtb	r3, r3
 800267c:	4313      	orrs	r3, r2
 800267e:	b25b      	sxtb	r3, r3
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <write_sbus+0x338>)
 8002684:	75da      	strb	r2, [r3, #23]
	txUART5[24] = SBUS_END;
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <write_sbus+0x338>)
 8002688:	2200      	movs	r2, #0
 800268a:	761a      	strb	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	200002bc 	.word	0x200002bc
 800269c:	20000270 	.word	0x20000270
 80026a0:	2000035d 	.word	0x2000035d
 80026a4:	2000035c 	.word	0x2000035c

080026a8 <sbus_passthrough>:
void sbus_passthrough()
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
	if (object_tracking == 1)
 80026ae:	4b45      	ldr	r3, [pc, #276]	; (80027c4 <sbus_passthrough+0x11c>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d149      	bne.n	800274a <sbus_passthrough+0xa2>
	{
//		rc_out[0] = rc_in[0];//thr
		rc_out[0] = control_thr;//thr
 80026b6:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <sbus_passthrough+0x120>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a44      	ldr	r2, [pc, #272]	; (80027cc <sbus_passthrough+0x124>)
 80026bc:	6013      	str	r3, [r2, #0]
		rc_out[1] = rc_in[1];//roll
 80026be:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <sbus_passthrough+0x128>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a42      	ldr	r2, [pc, #264]	; (80027cc <sbus_passthrough+0x124>)
 80026c4:	6053      	str	r3, [r2, #4]
//		rc_out[2] = rc_in[2];//pitch
		if(target_locked==1)
 80026c6:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <sbus_passthrough+0x12c>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d104      	bne.n	80026d8 <sbus_passthrough+0x30>
			rc_out[2] = control_pitch;
 80026ce:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <sbus_passthrough+0x130>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a3e      	ldr	r2, [pc, #248]	; (80027cc <sbus_passthrough+0x124>)
 80026d4:	6093      	str	r3, [r2, #8]
 80026d6:	e003      	b.n	80026e0 <sbus_passthrough+0x38>
		else
			rc_out[2] = rc_in[2];//pitch
 80026d8:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <sbus_passthrough+0x128>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a3b      	ldr	r2, [pc, #236]	; (80027cc <sbus_passthrough+0x124>)
 80026de:	6093      	str	r3, [r2, #8]
//		rc_out[3] = rc_in[3];//yaw
		rc_out[3] = control_yaw;//yaw
 80026e0:	4b3e      	ldr	r3, [pc, #248]	; (80027dc <sbus_passthrough+0x134>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a39      	ldr	r2, [pc, #228]	; (80027cc <sbus_passthrough+0x124>)
 80026e6:	60d3      	str	r3, [r2, #12]
		rc_out[4] = rc_in[4];
 80026e8:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <sbus_passthrough+0x128>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	4a37      	ldr	r2, [pc, #220]	; (80027cc <sbus_passthrough+0x124>)
 80026ee:	6113      	str	r3, [r2, #16]
		rc_out[5] = rc_in[5];
 80026f0:	4b37      	ldr	r3, [pc, #220]	; (80027d0 <sbus_passthrough+0x128>)
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	4a35      	ldr	r2, [pc, #212]	; (80027cc <sbus_passthrough+0x124>)
 80026f6:	6153      	str	r3, [r2, #20]
		rc_out[6] = rc_in[6];
 80026f8:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <sbus_passthrough+0x128>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	4a33      	ldr	r2, [pc, #204]	; (80027cc <sbus_passthrough+0x124>)
 80026fe:	6193      	str	r3, [r2, #24]
		rc_out[7] = rc_in[7];
 8002700:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <sbus_passthrough+0x128>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	4a31      	ldr	r2, [pc, #196]	; (80027cc <sbus_passthrough+0x124>)
 8002706:	61d3      	str	r3, [r2, #28]
		rc_out[8] = rc_in[8];
 8002708:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <sbus_passthrough+0x128>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4a2f      	ldr	r2, [pc, #188]	; (80027cc <sbus_passthrough+0x124>)
 800270e:	6213      	str	r3, [r2, #32]
		rc_out[9] = rc_in[9];
 8002710:	4b2f      	ldr	r3, [pc, #188]	; (80027d0 <sbus_passthrough+0x128>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	4a2d      	ldr	r2, [pc, #180]	; (80027cc <sbus_passthrough+0x124>)
 8002716:	6253      	str	r3, [r2, #36]	; 0x24
		rc_out[10] = rc_in[10];
 8002718:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <sbus_passthrough+0x128>)
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	4a2b      	ldr	r2, [pc, #172]	; (80027cc <sbus_passthrough+0x124>)
 800271e:	6293      	str	r3, [r2, #40]	; 0x28
		rc_out[11] = rc_in[11];
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <sbus_passthrough+0x128>)
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	4a29      	ldr	r2, [pc, #164]	; (80027cc <sbus_passthrough+0x124>)
 8002726:	62d3      	str	r3, [r2, #44]	; 0x2c
		rc_out[12] = rc_in[12];
 8002728:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <sbus_passthrough+0x128>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	4a27      	ldr	r2, [pc, #156]	; (80027cc <sbus_passthrough+0x124>)
 800272e:	6313      	str	r3, [r2, #48]	; 0x30
		rc_out[13] = rc_in[13];
 8002730:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <sbus_passthrough+0x128>)
 8002732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002734:	4a25      	ldr	r2, [pc, #148]	; (80027cc <sbus_passthrough+0x124>)
 8002736:	6353      	str	r3, [r2, #52]	; 0x34
		rc_out[14] = rc_in[14];
 8002738:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <sbus_passthrough+0x128>)
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	4a23      	ldr	r2, [pc, #140]	; (80027cc <sbus_passthrough+0x124>)
 800273e:	6393      	str	r3, [r2, #56]	; 0x38
		rc_out[15] = rc_in[15];
 8002740:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <sbus_passthrough+0x128>)
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	4a21      	ldr	r2, [pc, #132]	; (80027cc <sbus_passthrough+0x124>)
 8002746:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002748:	e012      	b.n	8002770 <sbus_passthrough+0xc8>
	}
	else
	{
		for (uint8_t i = 0; i < SBUS_CHANNELS; i++)
 800274a:	2300      	movs	r3, #0
 800274c:	71fb      	strb	r3, [r7, #7]
 800274e:	e00c      	b.n	800276a <sbus_passthrough+0xc2>
		{
			rc_out[i] = rc_in[i];
 8002750:	79fa      	ldrb	r2, [r7, #7]
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	491e      	ldr	r1, [pc, #120]	; (80027d0 <sbus_passthrough+0x128>)
 8002756:	0092      	lsls	r2, r2, #2
 8002758:	440a      	add	r2, r1
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	491b      	ldr	r1, [pc, #108]	; (80027cc <sbus_passthrough+0x124>)
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < SBUS_CHANNELS; i++)
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	3301      	adds	r3, #1
 8002768:	71fb      	strb	r3, [r7, #7]
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	2b0f      	cmp	r3, #15
 800276e:	d9ef      	bls.n	8002750 <sbus_passthrough+0xa8>
		}
	}
	for(uint8_t i = 0; i < SBUS_CHANNELS; i++)
 8002770:	2300      	movs	r3, #0
 8002772:	71bb      	strb	r3, [r7, #6]
 8002774:	e01c      	b.n	80027b0 <sbus_passthrough+0x108>
	{
		if (rc_out_raw[i] < RC_MIN)
 8002776:	79bb      	ldrb	r3, [r7, #6]
 8002778:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <sbus_passthrough+0x138>)
 800277a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800277e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002782:	d205      	bcs.n	8002790 <sbus_passthrough+0xe8>
			rc_out_raw[i] = RC_MIN;
 8002784:	79bb      	ldrb	r3, [r7, #6]
 8002786:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <sbus_passthrough+0x138>)
 8002788:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800278c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (rc_out_raw[i] > RC_MAX)
 8002790:	79bb      	ldrb	r3, [r7, #6]
 8002792:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <sbus_passthrough+0x138>)
 8002794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002798:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800279c:	d905      	bls.n	80027aa <sbus_passthrough+0x102>
			rc_out_raw[i] = RC_MAX;
 800279e:	79bb      	ldrb	r3, [r7, #6]
 80027a0:	4a0f      	ldr	r2, [pc, #60]	; (80027e0 <sbus_passthrough+0x138>)
 80027a2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80027a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < SBUS_CHANNELS; i++)
 80027aa:	79bb      	ldrb	r3, [r7, #6]
 80027ac:	3301      	adds	r3, #1
 80027ae:	71bb      	strb	r3, [r7, #6]
 80027b0:	79bb      	ldrb	r3, [r7, #6]
 80027b2:	2b0f      	cmp	r3, #15
 80027b4:	d9df      	bls.n	8002776 <sbus_passthrough+0xce>
	}
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	2000037c 	.word	0x2000037c
 80027c8:	20000380 	.word	0x20000380
 80027cc:	2000031c 	.word	0x2000031c
 80027d0:	200002dc 	.word	0x200002dc
 80027d4:	2000038c 	.word	0x2000038c
 80027d8:	20000384 	.word	0x20000384
 80027dc:	20000388 	.word	0x20000388
 80027e0:	200002bc 	.word	0x200002bc

080027e4 <init_variables>:
void init_variables()
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
	pid_altitude.plusminus=1;
 80027e8:	4b39      	ldr	r3, [pc, #228]	; (80028d0 <init_variables+0xec>)
 80027ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80027ee:	601a      	str	r2, [r3, #0]
	pid_altitude.Kp = P_altitude;
 80027f0:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <init_variables+0xec>)
 80027f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80027f6:	605a      	str	r2, [r3, #4]
	pid_altitude.Ki = I_altitude;
 80027f8:	4b35      	ldr	r3, [pc, #212]	; (80028d0 <init_variables+0xec>)
 80027fa:	4a36      	ldr	r2, [pc, #216]	; (80028d4 <init_variables+0xf0>)
 80027fc:	609a      	str	r2, [r3, #8]
	pid_altitude.Kd = D_altitude;
 80027fe:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <init_variables+0xec>)
 8002800:	4a34      	ldr	r2, [pc, #208]	; (80028d4 <init_variables+0xf0>)
 8002802:	60da      	str	r2, [r3, #12]
	pid_altitude.T = 0.1;
 8002804:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <init_variables+0xec>)
 8002806:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <init_variables+0xf4>)
 8002808:	625a      	str	r2, [r3, #36]	; 0x24
	pid_altitude.tau = D_FILTER_TIME_CONSTANT;
 800280a:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <init_variables+0xec>)
 800280c:	4a33      	ldr	r2, [pc, #204]	; (80028dc <init_variables+0xf8>)
 800280e:	611a      	str	r2, [r3, #16]
	pid_altitude.lim_min = PID_MIN_ALT;
 8002810:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <init_variables+0xec>)
 8002812:	4a33      	ldr	r2, [pc, #204]	; (80028e0 <init_variables+0xfc>)
 8002814:	615a      	str	r2, [r3, #20]
	pid_altitude.lim_max = PID_MAX_ALT;
 8002816:	4b2e      	ldr	r3, [pc, #184]	; (80028d0 <init_variables+0xec>)
 8002818:	4a32      	ldr	r2, [pc, #200]	; (80028e4 <init_variables+0x100>)
 800281a:	619a      	str	r2, [r3, #24]
	pid_altitude.lim_min_int = PID_MIN_ALT_I;
 800281c:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <init_variables+0xec>)
 800281e:	4a32      	ldr	r2, [pc, #200]	; (80028e8 <init_variables+0x104>)
 8002820:	61da      	str	r2, [r3, #28]
	pid_altitude.lim_max_int = PID_MAX_ALT_I;
 8002822:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <init_variables+0xec>)
 8002824:	4a31      	ldr	r2, [pc, #196]	; (80028ec <init_variables+0x108>)
 8002826:	621a      	str	r2, [r3, #32]

	pid_angle.plusminus=-1;
 8002828:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <init_variables+0x10c>)
 800282a:	4a32      	ldr	r2, [pc, #200]	; (80028f4 <init_variables+0x110>)
 800282c:	601a      	str	r2, [r3, #0]
	pid_angle.Kp = P_angle;
 800282e:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <init_variables+0x10c>)
 8002830:	4a31      	ldr	r2, [pc, #196]	; (80028f8 <init_variables+0x114>)
 8002832:	605a      	str	r2, [r3, #4]
	pid_angle.Ki = I_angle;
 8002834:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <init_variables+0x10c>)
 8002836:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800283a:	609a      	str	r2, [r3, #8]
	pid_angle.Kd = D_angle;
 800283c:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <init_variables+0x10c>)
 800283e:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <init_variables+0x118>)
 8002840:	60da      	str	r2, [r3, #12]
	pid_angle.T = 0.1;
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <init_variables+0x10c>)
 8002844:	4a24      	ldr	r2, [pc, #144]	; (80028d8 <init_variables+0xf4>)
 8002846:	625a      	str	r2, [r3, #36]	; 0x24
	pid_angle.tau = D_FILTER_TIME_CONSTANT;
 8002848:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <init_variables+0x10c>)
 800284a:	4a24      	ldr	r2, [pc, #144]	; (80028dc <init_variables+0xf8>)
 800284c:	611a      	str	r2, [r3, #16]
	pid_angle.lim_min = PID_MIN;
 800284e:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <init_variables+0x10c>)
 8002850:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <init_variables+0x11c>)
 8002852:	615a      	str	r2, [r3, #20]
	pid_angle.lim_max = PID_MAX;
 8002854:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <init_variables+0x10c>)
 8002856:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <init_variables+0x120>)
 8002858:	619a      	str	r2, [r3, #24]
	pid_angle.lim_min_int = PID_MIN;
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <init_variables+0x10c>)
 800285c:	4a28      	ldr	r2, [pc, #160]	; (8002900 <init_variables+0x11c>)
 800285e:	61da      	str	r2, [r3, #28]
	pid_angle.lim_max_int = PID_MAX;
 8002860:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <init_variables+0x10c>)
 8002862:	4a28      	ldr	r2, [pc, #160]	; (8002904 <init_variables+0x120>)
 8002864:	621a      	str	r2, [r3, #32]

	pid_distance.plusminus=-1;
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <init_variables+0x124>)
 8002868:	4a22      	ldr	r2, [pc, #136]	; (80028f4 <init_variables+0x110>)
 800286a:	601a      	str	r2, [r3, #0]
	pid_distance.Kp = P_distance;
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <init_variables+0x124>)
 800286e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002872:	605a      	str	r2, [r3, #4]
	pid_distance.Ki = I_distance;
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <init_variables+0x124>)
 8002876:	4a25      	ldr	r2, [pc, #148]	; (800290c <init_variables+0x128>)
 8002878:	609a      	str	r2, [r3, #8]
	pid_distance.Kd = D_distance;
 800287a:	4b23      	ldr	r3, [pc, #140]	; (8002908 <init_variables+0x124>)
 800287c:	4a24      	ldr	r2, [pc, #144]	; (8002910 <init_variables+0x12c>)
 800287e:	60da      	str	r2, [r3, #12]
	pid_distance.T = 0.1;
 8002880:	4b21      	ldr	r3, [pc, #132]	; (8002908 <init_variables+0x124>)
 8002882:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <init_variables+0xf4>)
 8002884:	625a      	str	r2, [r3, #36]	; 0x24
	pid_distance.lim_min = PID_MIN;
 8002886:	4b20      	ldr	r3, [pc, #128]	; (8002908 <init_variables+0x124>)
 8002888:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <init_variables+0x11c>)
 800288a:	615a      	str	r2, [r3, #20]
	pid_distance.lim_max = PID_MAX;
 800288c:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <init_variables+0x124>)
 800288e:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <init_variables+0x120>)
 8002890:	619a      	str	r2, [r3, #24]
	pid_distance.lim_min_int = PID_MIN;
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <init_variables+0x124>)
 8002894:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <init_variables+0x11c>)
 8002896:	61da      	str	r2, [r3, #28]
	pid_distance.lim_max_int = PID_MAX;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <init_variables+0x124>)
 800289a:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <init_variables+0x120>)
 800289c:	621a      	str	r2, [r3, #32]

	f_uwb1_cm.filter_size = UWB_FILTER_SIZE;
 800289e:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <init_variables+0x130>)
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
//	f_uwb1_cm.moving_sum = 0.0f;

	f_uwb2_cm.filter_size = UWB_FILTER_SIZE;
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <init_variables+0x134>)
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
//	f_uwb2_cm.moving_sum = 0.0f;

	f_usonic_cm.filter_size = USONIC_FILTER_SIZE;
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <init_variables+0x138>)
 80028b0:	2202      	movs	r2, #2
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
//	f_usonic_cm.moving_sum = 0.0f;

	f_trig_angle_deg.filter_size = TRIG_ANGLE_FILTER_SIZE;
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <init_variables+0x13c>)
 80028b8:	220a      	movs	r2, #10
 80028ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
//	f_trig_angle_deg.filter_size = 3;
//	f_trig_angle_deg.moving_sum = 0.0f;
//	f_trig_angle_deg.buf_size = 0;
//	f_trig_angle_deg.window_index = 0;

	f_trig_distance_cm.filter_size = TRIG_DISTANCE_FILTER_SIZE;
 80028be:	4b19      	ldr	r3, [pc, #100]	; (8002924 <init_variables+0x140>)
 80028c0:	2202      	movs	r2, #2
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	//	float moving_sum;
	//	uint8_t window_index;
	//	float buf[MAX_FILTER_SIZE];
	//	uint8_t buf_size;
	//	uint8_t filter_size;
}
 80028c6:	bf00      	nop
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	20000d60 	.word	0x20000d60
 80028d4:	3d4ccccd 	.word	0x3d4ccccd
 80028d8:	3dcccccd 	.word	0x3dcccccd
 80028dc:	3c2dab9f 	.word	0x3c2dab9f
 80028e0:	c3480000 	.word	0xc3480000
 80028e4:	43480000 	.word	0x43480000
 80028e8:	c2480000 	.word	0xc2480000
 80028ec:	42480000 	.word	0x42480000
 80028f0:	20001020 	.word	0x20001020
 80028f4:	bf800000 	.word	0xbf800000
 80028f8:	40400000 	.word	0x40400000
 80028fc:	3e99999a 	.word	0x3e99999a
 8002900:	c3fa0000 	.word	0xc3fa0000
 8002904:	43fa0000 	.word	0x43fa0000
 8002908:	2000039c 	.word	0x2000039c
 800290c:	3ccccccd 	.word	0x3ccccccd
 8002910:	3cf5c28f 	.word	0x3cf5c28f
 8002914:	20000a70 	.word	0x20000a70
 8002918:	20000a00 	.word	0x20000a00
 800291c:	20000a38 	.word	0x20000a38
 8002920:	20000440 	.word	0x20000440
 8002924:	20000d28 	.word	0x20000d28

08002928 <moving_average_update_float>:
void moving_average_update_float(float input, struct f_float *s)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002932:	6038      	str	r0, [r7, #0]
	s->moving_sum = s->moving_sum - s->buf[s->window_index] + input;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	ed93 7a01 	vldr	s14, [r3, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	7a1b      	ldrb	r3, [r3, #8]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	3302      	adds	r3, #2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	3304      	adds	r3, #4
 8002948:	edd3 7a00 	vldr	s15, [r3]
 800294c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002950:	edd7 7a01 	vldr	s15, [r7, #4]
 8002954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	edc3 7a01 	vstr	s15, [r3, #4]
	s->buf[s->window_index] = input;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	7a1b      	ldrb	r3, [r3, #8]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	3302      	adds	r3, #2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	601a      	str	r2, [r3, #0]
	s->window_index++;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	7a1b      	ldrb	r3, [r3, #8]
 8002974:	3301      	adds	r3, #1
 8002976:	b2da      	uxtb	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	721a      	strb	r2, [r3, #8]
	if (s->window_index > s->filter_size - 1)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	7a1b      	ldrb	r3, [r3, #8]
 8002980:	461a      	mov	r2, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002988:	3b01      	subs	r3, #1
 800298a:	429a      	cmp	r2, r3
 800298c:	dd08      	ble.n	80029a0 <moving_average_update_float+0x78>
	{
		s->window_index = 0;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2200      	movs	r2, #0
 8002992:	721a      	strb	r2, [r3, #8]
		s->buf_size = s->filter_size;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	if (s->buf_size == s->filter_size)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d10e      	bne.n	80029ce <moving_average_update_float+0xa6>
	{
		s->value = s->moving_sum / s->filter_size;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029bc:	ee07 3a90 	vmov	s15, r3
 80029c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	0000      	movs	r0, r0
 80029dc:	0000      	movs	r0, r0
	...

080029e0 <update_trig>:
void update_trig(float B, float A)
{
 80029e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029e4:	b089      	sub	sp, #36	; 0x24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	ed87 0a01 	vstr	s0, [r7, #4]
 80029ec:	edc7 0a00 	vstr	s1, [r7]
	//     rx1(B)     *    rx2(A)
	//     *          *      *
	//   *             *       *
	//  *              *degA1    *
	//degA*****rx12(C)*****rx12/2**degB
	if (B > A + UWB_RX_TO_RX_DISTANCE_CM)
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7fd fdd1 	bl	8000598 <__aeabi_f2d>
 80029f6:	4604      	mov	r4, r0
 80029f8:	460d      	mov	r5, r1
 80029fa:	6838      	ldr	r0, [r7, #0]
 80029fc:	f7fd fdcc 	bl	8000598 <__aeabi_f2d>
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	4bb8      	ldr	r3, [pc, #736]	; (8002ce8 <update_trig+0x308>)
 8002a06:	f7fd fc69 	bl	80002dc <__adddf3>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4620      	mov	r0, r4
 8002a10:	4629      	mov	r1, r5
 8002a12:	f7fe f8a9 	bl	8000b68 <__aeabi_dcmpgt>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d010      	beq.n	8002a3e <update_trig+0x5e>
	{
		trig_rho_est_cm = (A+B)/2;
 8002a1c:	ed97 7a00 	vldr	s14, [r7]
 8002a20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a28:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a30:	4bae      	ldr	r3, [pc, #696]	; (8002cec <update_trig+0x30c>)
 8002a32:	edc3 7a00 	vstr	s15, [r3]
		trig_theta_est_deg = -90;
 8002a36:	4bae      	ldr	r3, [pc, #696]	; (8002cf0 <update_trig+0x310>)
 8002a38:	4aae      	ldr	r2, [pc, #696]	; (8002cf4 <update_trig+0x314>)
 8002a3a:	601a      	str	r2, [r3, #0]
		float A_pow_2 = pow(A,2);
		float radA1 = acos((A_pow_2+pow(C,2)-pow(B,2))/(2*A*C));
		trig_rho_est_cm = sqrt(A_pow_2+C_div_2_pow_2-2*A*C_div_2*cos(radA1));
		trig_theta_est_deg = conv_to_deg*acos((pow(trig_rho_est_cm,2)+C_div_2_pow_2-A_pow_2)/(2*trig_rho_est_cm*C_div_2))-90;
	}
}
 8002a3c:	e146      	b.n	8002ccc <update_trig+0x2ec>
	else if (A > B + UWB_RX_TO_RX_DISTANCE_CM)
 8002a3e:	6838      	ldr	r0, [r7, #0]
 8002a40:	f7fd fdaa 	bl	8000598 <__aeabi_f2d>
 8002a44:	4604      	mov	r4, r0
 8002a46:	460d      	mov	r5, r1
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7fd fda5 	bl	8000598 <__aeabi_f2d>
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	4ba5      	ldr	r3, [pc, #660]	; (8002ce8 <update_trig+0x308>)
 8002a54:	f7fd fc42 	bl	80002dc <__adddf3>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	4629      	mov	r1, r5
 8002a60:	f7fe f882 	bl	8000b68 <__aeabi_dcmpgt>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d010      	beq.n	8002a8c <update_trig+0xac>
		trig_rho_est_cm = (A+B)/2;
 8002a6a:	ed97 7a00 	vldr	s14, [r7]
 8002a6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a76:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a7e:	4b9b      	ldr	r3, [pc, #620]	; (8002cec <update_trig+0x30c>)
 8002a80:	edc3 7a00 	vstr	s15, [r3]
		trig_theta_est_deg = 90;
 8002a84:	4b9a      	ldr	r3, [pc, #616]	; (8002cf0 <update_trig+0x310>)
 8002a86:	4a9c      	ldr	r2, [pc, #624]	; (8002cf8 <update_trig+0x318>)
 8002a88:	601a      	str	r2, [r3, #0]
}
 8002a8a:	e11f      	b.n	8002ccc <update_trig+0x2ec>
		float C = UWB_RX_TO_RX_DISTANCE_CM;
 8002a8c:	4b9b      	ldr	r3, [pc, #620]	; (8002cfc <update_trig+0x31c>)
 8002a8e:	61fb      	str	r3, [r7, #28]
		float C_div_2 = UWB_RX_TO_RX_DISTANCE_CM/2;
 8002a90:	4b9b      	ldr	r3, [pc, #620]	; (8002d00 <update_trig+0x320>)
 8002a92:	61bb      	str	r3, [r7, #24]
		float C_div_2_pow_2 = pow(C_div_2,2);
 8002a94:	69b8      	ldr	r0, [r7, #24]
 8002a96:	f7fd fd7f 	bl	8000598 <__aeabi_f2d>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	460c      	mov	r4, r1
 8002a9e:	ed9f 1b8e 	vldr	d1, [pc, #568]	; 8002cd8 <update_trig+0x2f8>
 8002aa2:	ec44 3b10 	vmov	d0, r3, r4
 8002aa6:	f008 f88d 	bl	800abc4 <pow>
 8002aaa:	ec54 3b10 	vmov	r3, r4, d0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	f7fe f8a1 	bl	8000bf8 <__aeabi_d2f>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	617b      	str	r3, [r7, #20]
		float A_pow_2 = pow(A,2);
 8002aba:	6838      	ldr	r0, [r7, #0]
 8002abc:	f7fd fd6c 	bl	8000598 <__aeabi_f2d>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	460c      	mov	r4, r1
 8002ac4:	ed9f 1b84 	vldr	d1, [pc, #528]	; 8002cd8 <update_trig+0x2f8>
 8002ac8:	ec44 3b10 	vmov	d0, r3, r4
 8002acc:	f008 f87a 	bl	800abc4 <pow>
 8002ad0:	ec54 3b10 	vmov	r3, r4, d0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	f7fe f88e 	bl	8000bf8 <__aeabi_d2f>
 8002adc:	4603      	mov	r3, r0
 8002ade:	613b      	str	r3, [r7, #16]
		float radA1 = acos((A_pow_2+pow(C,2)-pow(B,2))/(2*A*C));
 8002ae0:	6938      	ldr	r0, [r7, #16]
 8002ae2:	f7fd fd59 	bl	8000598 <__aeabi_f2d>
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	460d      	mov	r5, r1
 8002aea:	69f8      	ldr	r0, [r7, #28]
 8002aec:	f7fd fd54 	bl	8000598 <__aeabi_f2d>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	ed9f 1b78 	vldr	d1, [pc, #480]	; 8002cd8 <update_trig+0x2f8>
 8002af8:	ec43 2b10 	vmov	d0, r2, r3
 8002afc:	f008 f862 	bl	800abc4 <pow>
 8002b00:	ec53 2b10 	vmov	r2, r3, d0
 8002b04:	4620      	mov	r0, r4
 8002b06:	4629      	mov	r1, r5
 8002b08:	f7fd fbe8 	bl	80002dc <__adddf3>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	460c      	mov	r4, r1
 8002b10:	4625      	mov	r5, r4
 8002b12:	461c      	mov	r4, r3
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7fd fd3f 	bl	8000598 <__aeabi_f2d>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 8002cd8 <update_trig+0x2f8>
 8002b22:	ec43 2b10 	vmov	d0, r2, r3
 8002b26:	f008 f84d 	bl	800abc4 <pow>
 8002b2a:	ec53 2b10 	vmov	r2, r3, d0
 8002b2e:	4620      	mov	r0, r4
 8002b30:	4629      	mov	r1, r5
 8002b32:	f7fd fbd1 	bl	80002d8 <__aeabi_dsub>
 8002b36:	4603      	mov	r3, r0
 8002b38:	460c      	mov	r4, r1
 8002b3a:	4625      	mov	r5, r4
 8002b3c:	461c      	mov	r4, r3
 8002b3e:	edd7 7a00 	vldr	s15, [r7]
 8002b42:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b46:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4e:	ee17 0a90 	vmov	r0, s15
 8002b52:	f7fd fd21 	bl	8000598 <__aeabi_f2d>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	f7fd fe9d 	bl	800089c <__aeabi_ddiv>
 8002b62:	4603      	mov	r3, r0
 8002b64:	460c      	mov	r4, r1
 8002b66:	ec44 3b17 	vmov	d7, r3, r4
 8002b6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002b6e:	eef0 0a67 	vmov.f32	s1, s15
 8002b72:	f007 ffcf 	bl	800ab14 <acos>
 8002b76:	ec54 3b10 	vmov	r3, r4, d0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	4621      	mov	r1, r4
 8002b7e:	f7fe f83b 	bl	8000bf8 <__aeabi_d2f>
 8002b82:	4603      	mov	r3, r0
 8002b84:	60fb      	str	r3, [r7, #12]
		trig_rho_est_cm = sqrt(A_pow_2+C_div_2_pow_2-2*A*C_div_2*cos(radA1));
 8002b86:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b92:	ee17 0a90 	vmov	r0, s15
 8002b96:	f7fd fcff 	bl	8000598 <__aeabi_f2d>
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	460d      	mov	r5, r1
 8002b9e:	edd7 7a00 	vldr	s15, [r7]
 8002ba2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002ba6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bae:	ee17 0a90 	vmov	r0, s15
 8002bb2:	f7fd fcf1 	bl	8000598 <__aeabi_f2d>
 8002bb6:	4680      	mov	r8, r0
 8002bb8:	4689      	mov	r9, r1
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f7fd fcec 	bl	8000598 <__aeabi_f2d>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	ec43 2b10 	vmov	d0, r2, r3
 8002bc8:	f007 ff3a 	bl	800aa40 <cos>
 8002bcc:	ec53 2b10 	vmov	r2, r3, d0
 8002bd0:	4640      	mov	r0, r8
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	f7fd fd38 	bl	8000648 <__aeabi_dmul>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4620      	mov	r0, r4
 8002bde:	4629      	mov	r1, r5
 8002be0:	f7fd fb7a 	bl	80002d8 <__aeabi_dsub>
 8002be4:	4603      	mov	r3, r0
 8002be6:	460c      	mov	r4, r1
 8002be8:	ec44 3b17 	vmov	d7, r3, r4
 8002bec:	eeb0 0a47 	vmov.f32	s0, s14
 8002bf0:	eef0 0a67 	vmov.f32	s1, s15
 8002bf4:	f008 f956 	bl	800aea4 <sqrt>
 8002bf8:	ec54 3b10 	vmov	r3, r4, d0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	4621      	mov	r1, r4
 8002c00:	f7fd fffa 	bl	8000bf8 <__aeabi_d2f>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b39      	ldr	r3, [pc, #228]	; (8002cec <update_trig+0x30c>)
 8002c08:	601a      	str	r2, [r3, #0]
		trig_theta_est_deg = conv_to_deg*acos((pow(trig_rho_est_cm,2)+C_div_2_pow_2-A_pow_2)/(2*trig_rho_est_cm*C_div_2))-90;
 8002c0a:	4b38      	ldr	r3, [pc, #224]	; (8002cec <update_trig+0x30c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd fcc2 	bl	8000598 <__aeabi_f2d>
 8002c14:	4603      	mov	r3, r0
 8002c16:	460c      	mov	r4, r1
 8002c18:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8002cd8 <update_trig+0x2f8>
 8002c1c:	ec44 3b10 	vmov	d0, r3, r4
 8002c20:	f007 ffd0 	bl	800abc4 <pow>
 8002c24:	ec56 5b10 	vmov	r5, r6, d0
 8002c28:	6978      	ldr	r0, [r7, #20]
 8002c2a:	f7fd fcb5 	bl	8000598 <__aeabi_f2d>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	460c      	mov	r4, r1
 8002c32:	461a      	mov	r2, r3
 8002c34:	4623      	mov	r3, r4
 8002c36:	4628      	mov	r0, r5
 8002c38:	4631      	mov	r1, r6
 8002c3a:	f7fd fb4f 	bl	80002dc <__adddf3>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	460c      	mov	r4, r1
 8002c42:	4625      	mov	r5, r4
 8002c44:	461c      	mov	r4, r3
 8002c46:	6938      	ldr	r0, [r7, #16]
 8002c48:	f7fd fca6 	bl	8000598 <__aeabi_f2d>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4620      	mov	r0, r4
 8002c52:	4629      	mov	r1, r5
 8002c54:	f7fd fb40 	bl	80002d8 <__aeabi_dsub>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	460c      	mov	r4, r1
 8002c5c:	4625      	mov	r5, r4
 8002c5e:	461c      	mov	r4, r3
 8002c60:	4b22      	ldr	r3, [pc, #136]	; (8002cec <update_trig+0x30c>)
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002c6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c72:	ee17 0a90 	vmov	r0, s15
 8002c76:	f7fd fc8f 	bl	8000598 <__aeabi_f2d>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4620      	mov	r0, r4
 8002c80:	4629      	mov	r1, r5
 8002c82:	f7fd fe0b 	bl	800089c <__aeabi_ddiv>
 8002c86:	4603      	mov	r3, r0
 8002c88:	460c      	mov	r4, r1
 8002c8a:	ec44 3b17 	vmov	d7, r3, r4
 8002c8e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c92:	eef0 0a67 	vmov.f32	s1, s15
 8002c96:	f007 ff3d 	bl	800ab14 <acos>
 8002c9a:	ec51 0b10 	vmov	r0, r1, d0
 8002c9e:	a310      	add	r3, pc, #64	; (adr r3, 8002ce0 <update_trig+0x300>)
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	f7fd fcd0 	bl	8000648 <__aeabi_dmul>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	460c      	mov	r4, r1
 8002cac:	4618      	mov	r0, r3
 8002cae:	4621      	mov	r1, r4
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <update_trig+0x324>)
 8002cb6:	f7fd fb0f 	bl	80002d8 <__aeabi_dsub>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	f7fd ff99 	bl	8000bf8 <__aeabi_d2f>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <update_trig+0x310>)
 8002cca:	601a      	str	r2, [r3, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	3724      	adds	r7, #36	; 0x24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cd6:	bf00      	nop
 8002cd8:	00000000 	.word	0x00000000
 8002cdc:	40000000 	.word	0x40000000
 8002ce0:	b05cc3e8 	.word	0xb05cc3e8
 8002ce4:	404ca5dd 	.word	0x404ca5dd
 8002ce8:	403d8000 	.word	0x403d8000
 8002cec:	20000370 	.word	0x20000370
 8002cf0:	20000374 	.word	0x20000374
 8002cf4:	c2b40000 	.word	0xc2b40000
 8002cf8:	42b40000 	.word	0x42b40000
 8002cfc:	41ec0000 	.word	0x41ec0000
 8002d00:	416c0000 	.word	0x416c0000
 8002d04:	40568000 	.word	0x40568000

08002d08 <init_log_microsd>:
void init_log_microsd()
{
 8002d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d0c:	b09d      	sub	sp, #116	; 0x74
 8002d0e:	af12      	add	r7, sp, #72	; 0x48
	//memset(microsd_buf,0,MICROSD_BUFFER_SIZE);
	//sdcard buffer up to 128 bytes. After 120 bytes wait at least 44ms
	microsd_buf[0]=0x0d;
 8002d10:	4b53      	ldr	r3, [pc, #332]	; (8002e60 <init_log_microsd+0x158>)
 8002d12:	220d      	movs	r2, #13
 8002d14:	701a      	strb	r2, [r3, #0]
	microsd_buf[1]=0x0a;
 8002d16:	4b52      	ldr	r3, [pc, #328]	; (8002e60 <init_log_microsd+0x158>)
 8002d18:	220a      	movs	r2, #10
 8002d1a:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit(&huart3, (uint8_t *)microsd_buf, 2, 10);
 8002d1c:	230a      	movs	r3, #10
 8002d1e:	2202      	movs	r2, #2
 8002d20:	494f      	ldr	r1, [pc, #316]	; (8002e60 <init_log_microsd+0x158>)
 8002d22:	4850      	ldr	r0, [pc, #320]	; (8002e64 <init_log_microsd+0x15c>)
 8002d24:	f004 f8c4 	bl	8006eb0 <HAL_UART_Transmit>
	//HAL_Delay(100);//wait for card
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%s\r\n", "New log begin");
 8002d28:	4b4f      	ldr	r3, [pc, #316]	; (8002e68 <init_log_microsd+0x160>)
 8002d2a:	4a50      	ldr	r2, [pc, #320]	; (8002e6c <init_log_microsd+0x164>)
 8002d2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d30:	484b      	ldr	r0, [pc, #300]	; (8002e60 <init_log_microsd+0x158>)
 8002d32:	f005 fdc7 	bl	80088c4 <sniprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)microsd_buf, 14, 10);
 8002d36:	230a      	movs	r3, #10
 8002d38:	220e      	movs	r2, #14
 8002d3a:	4949      	ldr	r1, [pc, #292]	; (8002e60 <init_log_microsd+0x158>)
 8002d3c:	4849      	ldr	r0, [pc, #292]	; (8002e64 <init_log_microsd+0x15c>)
 8002d3e:	f004 f8b7 	bl	8006eb0 <HAL_UART_Transmit>
	HAL_Delay(100);//wait for card
 8002d42:	2064      	movs	r0, #100	; 0x64
 8002d44:	f000 ffec 	bl	8003d20 <HAL_Delay>
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%s\r\n", "P_angle;I_angle;D_angle;"
 8002d48:	4b49      	ldr	r3, [pc, #292]	; (8002e70 <init_log_microsd+0x168>)
 8002d4a:	4a48      	ldr	r2, [pc, #288]	; (8002e6c <init_log_microsd+0x164>)
 8002d4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d50:	4843      	ldr	r0, [pc, #268]	; (8002e60 <init_log_microsd+0x158>)
 8002d52:	f005 fdb7 	bl	80088c4 <sniprintf>
			"P_distance;I_distance;D_distance;P_altitude;I_altitude;D_altitude");
	HAL_UART_Transmit(&huart3, (uint8_t *)microsd_buf, 91, 10);
 8002d56:	230a      	movs	r3, #10
 8002d58:	225b      	movs	r2, #91	; 0x5b
 8002d5a:	4941      	ldr	r1, [pc, #260]	; (8002e60 <init_log_microsd+0x158>)
 8002d5c:	4841      	ldr	r0, [pc, #260]	; (8002e64 <init_log_microsd+0x15c>)
 8002d5e:	f004 f8a7 	bl	8006eb0 <HAL_UART_Transmit>
	HAL_Delay(100);//wait for card
 8002d62:	2064      	movs	r0, #100	; 0x64
 8002d64:	f000 ffdc 	bl	8003d20 <HAL_Delay>
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;\r\n",
			pid_angle.Kp,pid_angle.Ki,pid_angle.
 8002d68:	4b42      	ldr	r3, [pc, #264]	; (8002e74 <init_log_microsd+0x16c>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;\r\n",
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fc13 	bl	8000598 <__aeabi_f2d>
 8002d72:	e9c7 0108 	strd	r0, r1, [r7, #32]
			pid_angle.Kp,pid_angle.Ki,pid_angle.
 8002d76:	4b3f      	ldr	r3, [pc, #252]	; (8002e74 <init_log_microsd+0x16c>)
 8002d78:	689b      	ldr	r3, [r3, #8]
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;\r\n",
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd fc0c 	bl	8000598 <__aeabi_f2d>
 8002d80:	e9c7 0106 	strd	r0, r1, [r7, #24]
			pid_angle.Kp,pid_angle.Ki,pid_angle.
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <init_log_microsd+0x16c>)
 8002d86:	68db      	ldr	r3, [r3, #12]
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;\r\n",
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fc05 	bl	8000598 <__aeabi_f2d>
 8002d8e:	e9c7 0104 	strd	r0, r1, [r7, #16]
			Kd,pid_distance.Kp,pid_distance.Ki,pid_distance.Kd,
 8002d92:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <init_log_microsd+0x170>)
 8002d94:	685b      	ldr	r3, [r3, #4]
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;\r\n",
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fbfe 	bl	8000598 <__aeabi_f2d>
 8002d9c:	e9c7 0102 	strd	r0, r1, [r7, #8]
			Kd,pid_distance.Kp,pid_distance.Ki,pid_distance.Kd,
 8002da0:	4b35      	ldr	r3, [pc, #212]	; (8002e78 <init_log_microsd+0x170>)
 8002da2:	689b      	ldr	r3, [r3, #8]
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;\r\n",
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fbf7 	bl	8000598 <__aeabi_f2d>
 8002daa:	e9c7 0100 	strd	r0, r1, [r7]
			Kd,pid_distance.Kp,pid_distance.Ki,pid_distance.Kd,
 8002dae:	4b32      	ldr	r3, [pc, #200]	; (8002e78 <init_log_microsd+0x170>)
 8002db0:	68db      	ldr	r3, [r3, #12]
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;\r\n",
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fbf0 	bl	8000598 <__aeabi_f2d>
 8002db8:	4682      	mov	sl, r0
 8002dba:	468b      	mov	fp, r1
			pid_altitude.Kp,pid_altitude.Ki,pid_altitude.Kd);
 8002dbc:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <init_log_microsd+0x174>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;\r\n",
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fbe9 	bl	8000598 <__aeabi_f2d>
 8002dc6:	4680      	mov	r8, r0
 8002dc8:	4689      	mov	r9, r1
			pid_altitude.Kp,pid_altitude.Ki,pid_altitude.Kd);
 8002dca:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <init_log_microsd+0x174>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;\r\n",
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fbe2 	bl	8000598 <__aeabi_f2d>
 8002dd4:	4605      	mov	r5, r0
 8002dd6:	460e      	mov	r6, r1
			pid_altitude.Kp,pid_altitude.Ki,pid_altitude.Kd);
 8002dd8:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <init_log_microsd+0x174>)
 8002dda:	68db      	ldr	r3, [r3, #12]
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;%1.4f;\r\n",
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd fbdb 	bl	8000598 <__aeabi_f2d>
 8002de2:	4603      	mov	r3, r0
 8002de4:	460c      	mov	r4, r1
 8002de6:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002dea:	e9cd 560e 	strd	r5, r6, [sp, #56]	; 0x38
 8002dee:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8002df2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002df6:	ed97 7b00 	vldr	d7, [r7]
 8002dfa:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002dfe:	ed97 7b02 	vldr	d7, [r7, #8]
 8002e02:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002e06:	ed97 7b04 	vldr	d7, [r7, #16]
 8002e0a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002e0e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002e12:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002e16:	ed97 7b08 	vldr	d7, [r7, #32]
 8002e1a:	ed8d 7b00 	vstr	d7, [sp]
 8002e1e:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <init_log_microsd+0x178>)
 8002e20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e24:	480e      	ldr	r0, [pc, #56]	; (8002e60 <init_log_microsd+0x158>)
 8002e26:	f005 fd4d 	bl	80088c4 <sniprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)microsd_buf, 65, 10);
 8002e2a:	230a      	movs	r3, #10
 8002e2c:	2241      	movs	r2, #65	; 0x41
 8002e2e:	490c      	ldr	r1, [pc, #48]	; (8002e60 <init_log_microsd+0x158>)
 8002e30:	480c      	ldr	r0, [pc, #48]	; (8002e64 <init_log_microsd+0x15c>)
 8002e32:	f004 f83d 	bl	8006eb0 <HAL_UART_Transmit>
	HAL_Delay(100);//wait for card
 8002e36:	2064      	movs	r0, #100	; 0x64
 8002e38:	f000 ff72 	bl	8003d20 <HAL_Delay>
//			"angle;dist;"
//			"angleErr;distErr;altErr;"
//			"anglePidsum;distPidsum;altPidsum;"
//			"anglePsum,angleIsum,angleDsum"
//			"trck;tme;pktLss1;pktLss2");
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%s\r\n", "uwb1;uwb2;usnic;"
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <init_log_microsd+0x17c>)
 8002e3e:	4a0b      	ldr	r2, [pc, #44]	; (8002e6c <init_log_microsd+0x164>)
 8002e40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e44:	4806      	ldr	r0, [pc, #24]	; (8002e60 <init_log_microsd+0x158>)
 8002e46:	f005 fd3d 	bl	80088c4 <sniprintf>
				"angle;dist;"
				"angleErr;distErr;altErr;"
				"anglePidsum;distPidsum;altPidsum;"
				"distPsum,distIsum,distDsum"
				"trck;tme;pktLss1;pktLss2;trg_l");
	HAL_UART_Transmit(&huart3, (uint8_t *)microsd_buf, 110, 10);
 8002e4a:	230a      	movs	r3, #10
 8002e4c:	226e      	movs	r2, #110	; 0x6e
 8002e4e:	4904      	ldr	r1, [pc, #16]	; (8002e60 <init_log_microsd+0x158>)
 8002e50:	4804      	ldr	r0, [pc, #16]	; (8002e64 <init_log_microsd+0x15c>)
 8002e52:	f004 f82d 	bl	8006eb0 <HAL_UART_Transmit>
}
 8002e56:	bf00      	nop
 8002e58:	372c      	adds	r7, #44	; 0x2c
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e60:	20000618 	.word	0x20000618
 8002e64:	20000594 	.word	0x20000594
 8002e68:	0800d070 	.word	0x0800d070
 8002e6c:	0800d080 	.word	0x0800d080
 8002e70:	0800d088 	.word	0x0800d088
 8002e74:	20001020 	.word	0x20001020
 8002e78:	2000039c 	.word	0x2000039c
 8002e7c:	20000d60 	.word	0x20000d60
 8002e80:	0800d0e4 	.word	0x0800d0e4
 8002e84:	0800d120 	.word	0x0800d120

08002e88 <update_log_microsd>:
void update_log_microsd()
{
 8002e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e8c:	b0bb      	sub	sp, #236	; 0xec
 8002e8e:	af22      	add	r7, sp, #136	; 0x88
	memset(microsd_buf,0,MICROSD_BUFFER_SIZE);
 8002e90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e94:	2100      	movs	r1, #0
 8002e96:	486c      	ldr	r0, [pc, #432]	; (8003048 <update_log_microsd+0x1c0>)
 8002e98:	f005 f8b0 	bl	8007ffc <memset>
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
					"%3.1f;%4.1f;"
					"%3.1f;%4.1f;%3.1f;"
					"%3.1f;%3.1f;%3.1f;"
					"%3.1f;%3.1f;%3.1f;"
					"%d;%d;%d;%d;%d\r\n",f_uwb1_cm.value,f_uwb2_cm.value,f_usonic_cm.value,
 8002e9c:	4b6b      	ldr	r3, [pc, #428]	; (800304c <update_log_microsd+0x1c4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fd fb79 	bl	8000598 <__aeabi_f2d>
 8002ea6:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
					"%d;%d;%d;%d;%d\r\n",f_uwb1_cm.value,f_uwb2_cm.value,f_usonic_cm.value,
 8002eaa:	4b69      	ldr	r3, [pc, #420]	; (8003050 <update_log_microsd+0x1c8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd fb72 	bl	8000598 <__aeabi_f2d>
 8002eb4:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
					"%d;%d;%d;%d;%d\r\n",f_uwb1_cm.value,f_uwb2_cm.value,f_usonic_cm.value,
 8002eb8:	4b66      	ldr	r3, [pc, #408]	; (8003054 <update_log_microsd+0x1cc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd fb6b 	bl	8000598 <__aeabi_f2d>
 8002ec2:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
					f_trig_angle_deg.value,f_trig_distance_cm.value,
 8002ec6:	4b64      	ldr	r3, [pc, #400]	; (8003058 <update_log_microsd+0x1d0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd fb64 	bl	8000598 <__aeabi_f2d>
 8002ed0:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
					f_trig_angle_deg.value,f_trig_distance_cm.value,
 8002ed4:	4b61      	ldr	r3, [pc, #388]	; (800305c <update_log_microsd+0x1d4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fb5d 	bl	8000598 <__aeabi_f2d>
 8002ede:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
					pid_angle.error,pid_distance.error,pid_altitude.error,
 8002ee2:	4b5f      	ldr	r3, [pc, #380]	; (8003060 <update_log_microsd+0x1d8>)
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fb56 	bl	8000598 <__aeabi_f2d>
 8002eec:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
					pid_angle.error,pid_distance.error,pid_altitude.error,
 8002ef0:	4b5c      	ldr	r3, [pc, #368]	; (8003064 <update_log_microsd+0x1dc>)
 8002ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fb4f 	bl	8000598 <__aeabi_f2d>
 8002efa:	e9c7 0108 	strd	r0, r1, [r7, #32]
					pid_angle.error,pid_distance.error,pid_altitude.error,
 8002efe:	4b5a      	ldr	r3, [pc, #360]	; (8003068 <update_log_microsd+0x1e0>)
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fb48 	bl	8000598 <__aeabi_f2d>
 8002f08:	e9c7 0106 	strd	r0, r1, [r7, #24]
					pid_angle.pidsum,pid_distance.pidsum,pid_altitude.pidsum,
 8002f0c:	4b54      	ldr	r3, [pc, #336]	; (8003060 <update_log_microsd+0x1d8>)
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd fb41 	bl	8000598 <__aeabi_f2d>
 8002f16:	e9c7 0104 	strd	r0, r1, [r7, #16]
					pid_angle.pidsum,pid_distance.pidsum,pid_altitude.pidsum,
 8002f1a:	4b52      	ldr	r3, [pc, #328]	; (8003064 <update_log_microsd+0x1dc>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fb3a 	bl	8000598 <__aeabi_f2d>
 8002f24:	e9c7 0102 	strd	r0, r1, [r7, #8]
					pid_angle.pidsum,pid_distance.pidsum,pid_altitude.pidsum,
 8002f28:	4b4f      	ldr	r3, [pc, #316]	; (8003068 <update_log_microsd+0x1e0>)
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fb33 	bl	8000598 <__aeabi_f2d>
 8002f32:	e9c7 0100 	strd	r0, r1, [r7]
					pid_distance.psum,pid_distance.isum,pid_distance.dsum,
 8002f36:	4b4b      	ldr	r3, [pc, #300]	; (8003064 <update_log_microsd+0x1dc>)
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fb2c 	bl	8000598 <__aeabi_f2d>
 8002f40:	4682      	mov	sl, r0
 8002f42:	468b      	mov	fp, r1
					pid_distance.psum,pid_distance.isum,pid_distance.dsum,
 8002f44:	4b47      	ldr	r3, [pc, #284]	; (8003064 <update_log_microsd+0x1dc>)
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd fb25 	bl	8000598 <__aeabi_f2d>
 8002f4e:	4680      	mov	r8, r0
 8002f50:	4689      	mov	r9, r1
					pid_distance.psum,pid_distance.isum,pid_distance.dsum,
 8002f52:	4b44      	ldr	r3, [pc, #272]	; (8003064 <update_log_microsd+0x1dc>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd fb1e 	bl	8000598 <__aeabi_f2d>
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	460d      	mov	r5, r1
 8002f60:	4b42      	ldr	r3, [pc, #264]	; (800306c <update_log_microsd+0x1e4>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	461e      	mov	r6, r3
 8002f66:	4b42      	ldr	r3, [pc, #264]	; (8003070 <update_log_microsd+0x1e8>)
 8002f68:	6819      	ldr	r1, [r3, #0]
					object_tracking,time_10hz,dwm_loc_get1.packet_loss[0],dwm_loc_get2.packet_loss[0],target_locked
 8002f6a:	4b42      	ldr	r3, [pc, #264]	; (8003074 <update_log_microsd+0x1ec>)
 8002f6c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002f70:	4618      	mov	r0, r3
					object_tracking,time_10hz,dwm_loc_get1.packet_loss[0],dwm_loc_get2.packet_loss[0],target_locked
 8002f72:	4b41      	ldr	r3, [pc, #260]	; (8003078 <update_log_microsd+0x1f0>)
 8002f74:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
	snprintf(microsd_buf, MICROSD_BUFFER_SIZE, "%4.1f;%4.1f;%3.1f;"
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b40      	ldr	r3, [pc, #256]	; (800307c <update_log_microsd+0x1f4>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	9320      	str	r3, [sp, #128]	; 0x80
 8002f80:	921f      	str	r2, [sp, #124]	; 0x7c
 8002f82:	901e      	str	r0, [sp, #120]	; 0x78
 8002f84:	911d      	str	r1, [sp, #116]	; 0x74
 8002f86:	961c      	str	r6, [sp, #112]	; 0x70
 8002f88:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 8002f8c:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 8002f90:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
 8002f94:	ed97 7b00 	vldr	d7, [r7]
 8002f98:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002f9c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002fa0:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002fa4:	ed97 7b04 	vldr	d7, [r7, #16]
 8002fa8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002fac:	ed97 7b06 	vldr	d7, [r7, #24]
 8002fb0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002fb4:	ed97 7b08 	vldr	d7, [r7, #32]
 8002fb8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002fbc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002fc0:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002fc4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002fc8:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002fcc:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002fd0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002fd4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002fd8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002fdc:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002fe0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002fe4:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002fe8:	ed8d 7b00 	vstr	d7, [sp]
 8002fec:	4a24      	ldr	r2, [pc, #144]	; (8003080 <update_log_microsd+0x1f8>)
 8002fee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ff2:	4815      	ldr	r0, [pc, #84]	; (8003048 <update_log_microsd+0x1c0>)
 8002ff4:	f005 fc66 	bl	80088c4 <sniprintf>
//			trig_theta_est_deg, trig_rho_est_cm,
//			f_trig_angle_deg.buf_size,f_trig_angle_deg.filter_size,
//			f_trig_angle_deg.moving_sum,f_trig_angle_deg.window_index,
//			f_trig_angle_deg.buf[0],f_trig_angle_deg.buf[1],f_trig_angle_deg.buf[2]
//			);
	for(uint16_t i=0;i<=MICROSD_BUFFER_SIZE-1;i++)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002ffe:	e011      	b.n	8003024 <update_log_microsd+0x19c>
	{
		if(microsd_buf[i] == 0x0A)//ascii \n
 8003000:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003004:	4a10      	ldr	r2, [pc, #64]	; (8003048 <update_log_microsd+0x1c0>)
 8003006:	5cd3      	ldrb	r3, [r2, r3]
 8003008:	2b0a      	cmp	r3, #10
 800300a:	d106      	bne.n	800301a <update_log_microsd+0x192>
		{
			microsd_buf_size = i+1;
 800300c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003010:	3301      	adds	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <update_log_microsd+0x1fc>)
 8003016:	801a      	strh	r2, [r3, #0]
			break;
 8003018:	e009      	b.n	800302e <update_log_microsd+0x1a6>
	for(uint16_t i=0;i<=MICROSD_BUFFER_SIZE-1;i++)
 800301a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800301e:	3301      	adds	r3, #1
 8003020:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003024:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800302c:	d3e8      	bcc.n	8003000 <update_log_microsd+0x178>
		}
	}
	HAL_UART_Transmit(&huart3, (uint8_t *)microsd_buf, microsd_buf_size, 10);
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <update_log_microsd+0x1fc>)
 8003030:	881a      	ldrh	r2, [r3, #0]
 8003032:	230a      	movs	r3, #10
 8003034:	4904      	ldr	r1, [pc, #16]	; (8003048 <update_log_microsd+0x1c0>)
 8003036:	4814      	ldr	r0, [pc, #80]	; (8003088 <update_log_microsd+0x200>)
 8003038:	f003 ff3a 	bl	8006eb0 <HAL_UART_Transmit>
}
 800303c:	bf00      	nop
 800303e:	3764      	adds	r7, #100	; 0x64
 8003040:	46bd      	mov	sp, r7
 8003042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003046:	bf00      	nop
 8003048:	20000618 	.word	0x20000618
 800304c:	20000a70 	.word	0x20000a70
 8003050:	20000a00 	.word	0x20000a00
 8003054:	20000a38 	.word	0x20000a38
 8003058:	20000440 	.word	0x20000440
 800305c:	20000d28 	.word	0x20000d28
 8003060:	20001020 	.word	0x20001020
 8003064:	2000039c 	.word	0x2000039c
 8003068:	20000d60 	.word	0x20000d60
 800306c:	2000037c 	.word	0x2000037c
 8003070:	20000214 	.word	0x20000214
 8003074:	20000c24 	.word	0x20000c24
 8003078:	20000f7c 	.word	0x20000f7c
 800307c:	2000038c 	.word	0x2000038c
 8003080:	0800d1b0 	.word	0x0800d1b0
 8003084:	20000212 	.word	0x20000212
 8003088:	20000594 	.word	0x20000594

0800308c <write_periodic_LCD>:
void write_periodic_LCD()
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
	txUART4[0] = DISPLAY_START_PERIODIC;
 8003092:	4b37      	ldr	r3, [pc, #220]	; (8003170 <write_periodic_LCD+0xe4>)
 8003094:	225a      	movs	r2, #90	; 0x5a
 8003096:	701a      	strb	r2, [r3, #0]
	uint8_t angle_plus_90=roundf(f_trig_angle_deg.value+90);
 8003098:	4b36      	ldr	r3, [pc, #216]	; (8003174 <write_periodic_LCD+0xe8>)
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003178 <write_periodic_LCD+0xec>
 80030a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030a6:	eeb0 0a67 	vmov.f32	s0, s15
 80030aa:	f007 fd0d 	bl	800aac8 <roundf>
 80030ae:	eef0 7a40 	vmov.f32	s15, s0
 80030b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80030ba:	793b      	ldrb	r3, [r7, #4]
 80030bc:	75fb      	strb	r3, [r7, #23]
//	uint8_t angle_plus_90=roundf(trig_theta_est_deg+90);
	txUART4[1] = (uint8_t)angle_plus_90;
 80030be:	4a2c      	ldr	r2, [pc, #176]	; (8003170 <write_periodic_LCD+0xe4>)
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	7053      	strb	r3, [r2, #1]
	uint16_t distance = f_trig_distance_cm.value;//conversion from float
 80030c4:	4b2d      	ldr	r3, [pc, #180]	; (800317c <write_periodic_LCD+0xf0>)
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030ce:	ee17 3a90 	vmov	r3, s15
 80030d2:	82bb      	strh	r3, [r7, #20]
	txUART4[2] = distance >> 8;
 80030d4:	8abb      	ldrh	r3, [r7, #20]
 80030d6:	0a1b      	lsrs	r3, r3, #8
 80030d8:	b29b      	uxth	r3, r3
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	4b24      	ldr	r3, [pc, #144]	; (8003170 <write_periodic_LCD+0xe4>)
 80030de:	709a      	strb	r2, [r3, #2]
	txUART4[3] = distance & 0x00FF;
 80030e0:	8abb      	ldrh	r3, [r7, #20]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <write_periodic_LCD+0xe4>)
 80030e6:	70da      	strb	r2, [r3, #3]
	uint16_t altitude = f_usonic_cm.value;//conversion from float
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <write_periodic_LCD+0xf4>)
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030f2:	ee17 3a90 	vmov	r3, s15
 80030f6:	827b      	strh	r3, [r7, #18]
	txUART4[4] = altitude >> 8;
 80030f8:	8a7b      	ldrh	r3, [r7, #18]
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	4b1b      	ldr	r3, [pc, #108]	; (8003170 <write_periodic_LCD+0xe4>)
 8003102:	711a      	strb	r2, [r3, #4]
	txUART4[5] = altitude & 0x00FF;
 8003104:	8a7b      	ldrh	r3, [r7, #18]
 8003106:	b2da      	uxtb	r2, r3
 8003108:	4b19      	ldr	r3, [pc, #100]	; (8003170 <write_periodic_LCD+0xe4>)
 800310a:	715a      	strb	r2, [r3, #5]
	uint16_t uwb1 = f_uwb1_cm.value;//conversion from float
 800310c:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <write_periodic_LCD+0xf8>)
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003116:	ee17 3a90 	vmov	r3, s15
 800311a:	823b      	strh	r3, [r7, #16]
	uint16_t uwb2 = f_uwb2_cm.value;//conversion from float
 800311c:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <write_periodic_LCD+0xfc>)
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003126:	ee17 3a90 	vmov	r3, s15
 800312a:	81fb      	strh	r3, [r7, #14]
	txUART4[6] = uwb1 >> 8;
 800312c:	8a3b      	ldrh	r3, [r7, #16]
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	b29b      	uxth	r3, r3
 8003132:	b2da      	uxtb	r2, r3
 8003134:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <write_periodic_LCD+0xe4>)
 8003136:	719a      	strb	r2, [r3, #6]
	txUART4[7] = uwb1 & 0x00FF;
 8003138:	8a3b      	ldrh	r3, [r7, #16]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <write_periodic_LCD+0xe4>)
 800313e:	71da      	strb	r2, [r3, #7]
	txUART4[8] = uwb2 >> 8;
 8003140:	89fb      	ldrh	r3, [r7, #14]
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	b29b      	uxth	r3, r3
 8003146:	b2da      	uxtb	r2, r3
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <write_periodic_LCD+0xe4>)
 800314a:	721a      	strb	r2, [r3, #8]
	txUART4[9] = uwb2 & 0x00FF;
 800314c:	89fb      	ldrh	r3, [r7, #14]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <write_periodic_LCD+0xe4>)
 8003152:	725a      	strb	r2, [r3, #9]
	txUART4[10] = 0xFF;//termination byte1
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <write_periodic_LCD+0xe4>)
 8003156:	22ff      	movs	r2, #255	; 0xff
 8003158:	729a      	strb	r2, [r3, #10]
	txUART4[11] = 0xFF;//termination byte2
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <write_periodic_LCD+0xe4>)
 800315c:	22ff      	movs	r2, #255	; 0xff
 800315e:	72da      	strb	r2, [r3, #11]
	txUART4[12] = 0xFF;//termination byte3
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <write_periodic_LCD+0xe4>)
 8003162:	22ff      	movs	r2, #255	; 0xff
 8003164:	731a      	strb	r2, [r3, #12]
}
 8003166:	bf00      	nop
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	2000028c 	.word	0x2000028c
 8003174:	20000440 	.word	0x20000440
 8003178:	42b40000 	.word	0x42b40000
 800317c:	20000d28 	.word	0x20000d28
 8003180:	20000a38 	.word	0x20000a38
 8003184:	20000a70 	.word	0x20000a70
 8003188:	20000a00 	.word	0x20000a00

0800318c <init_PID>:
		output = min;
	}
	return output;
}
void init_PID(struct pid *s)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	s->isum = 0.0f;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c
	s->last_error  = 0.0f;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
	s->dsum  = 0.0f;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
	s->last_meas = 0.0f;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	63da      	str	r2, [r3, #60]	; 0x3c
	s->pidsum = 0.0f;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <calculate_PID>:
void calculate_PID(float measurement, float setpoint, struct pid *s)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80031d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80031d6:	6078      	str	r0, [r7, #4]
    //float error = setpoint - measurement;
	s->error = setpoint - measurement;
 80031d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80031dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80031e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    s->psum = s->Kp * s->error;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80031f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    s->isum = s->isum + 0.5f * s->Ki * s->T * (s->error + s->last_error);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	edd3 7a02 	vldr	s15, [r3, #8]
 800320c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003210:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800321a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800322a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800322e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    if (s->isum > s->lim_max_int)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	edd3 7a08 	vldr	s15, [r3, #32]
 8003248:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003250:	dd04      	ble.n	800325c <calculate_PID+0x94>
    {
        s->isum = s->lim_max_int;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1a      	ldr	r2, [r3, #32]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c
 800325a:	e00e      	b.n	800327a <calculate_PID+0xb2>
    }
    else if (s->isum < s->lim_min_int)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	edd3 7a07 	vldr	s15, [r3, #28]
 8003268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	d503      	bpl.n	800327a <calculate_PID+0xb2>
    {
        s->isum = s->lim_min_int;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69da      	ldr	r2, [r3, #28]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    s->dsum = -(2.0f*s->Kd*(measurement-s->last_meas)+(2.0f*s->tau-s->T)*s->dsum)/(2.0f*s->tau+s->T);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003280:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800328a:	edd7 6a03 	vldr	s13, [r7, #12]
 800328e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	edd3 7a04 	vldr	s15, [r3, #16]
 800329c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80032a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80032b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b8:	eef1 6a67 	vneg.f32	s13, s15
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	edd3 7a04 	vldr	s15, [r3, #16]
 80032c2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80032cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    s->pidsum = s->psum + s->isum + s->dsum;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80032e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80032f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    if (s->pidsum > s->lim_max)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	edd3 7a06 	vldr	s15, [r3, #24]
 8003306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330e:	dd04      	ble.n	800331a <calculate_PID+0x152>
    {
        s->pidsum = s->lim_max;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	641a      	str	r2, [r3, #64]	; 0x40
 8003318:	e00e      	b.n	8003338 <calculate_PID+0x170>
    }
    else if (s->pidsum < s->lim_min)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	edd3 7a05 	vldr	s15, [r3, #20]
 8003326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332e:	d503      	bpl.n	8003338 <calculate_PID+0x170>
    {
        s->pidsum = s->lim_min;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40
    }
    s->last_error = s->error;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
    s->last_meas = measurement;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <parse_uwb_uart>:
void parse_uwb_uart(struct loc *loc, uint8_t bfr[])
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
	if (bfr[0]==0x44 && bfr[10]==0x0D && bfr[11]==0x0A && bfr[9]==0x41)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b44      	cmp	r3, #68	; 0x44
 8003364:	d15e      	bne.n	8003424 <parse_uwb_uart+0xd0>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	330a      	adds	r3, #10
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b0d      	cmp	r3, #13
 800336e:	d159      	bne.n	8003424 <parse_uwb_uart+0xd0>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	330b      	adds	r3, #11
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b0a      	cmp	r3, #10
 8003378:	d154      	bne.n	8003424 <parse_uwb_uart+0xd0>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	3309      	adds	r3, #9
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b41      	cmp	r3, #65	; 0x41
 8003382:	d14f      	bne.n	8003424 <parse_uwb_uart+0xd0>
	{
		uint8_t tmp[8];
		for(uint8_t i=0;i<=7;i++)
 8003384:	2300      	movs	r3, #0
 8003386:	75fb      	strb	r3, [r7, #23]
 8003388:	e00d      	b.n	80033a6 <parse_uwb_uart+0x52>
		{
		  tmp[i]=bfr[i+1];
 800338a:	7dfb      	ldrb	r3, [r7, #23]
 800338c:	3301      	adds	r3, #1
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	441a      	add	r2, r3
 8003392:	7dfb      	ldrb	r3, [r7, #23]
 8003394:	7812      	ldrb	r2, [r2, #0]
 8003396:	f107 0118 	add.w	r1, r7, #24
 800339a:	440b      	add	r3, r1
 800339c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i=0;i<=7;i++)
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	3301      	adds	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
 80033a8:	2b07      	cmp	r3, #7
 80033aa:	d9ee      	bls.n	800338a <parse_uwb_uart+0x36>
		}
		sscanf(tmp,"%08lx",&loc->distance_to_anchor[0]);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f103 021c 	add.w	r2, r3, #28
 80033b2:	f107 030c 	add.w	r3, r7, #12
 80033b6:	4926      	ldr	r1, [pc, #152]	; (8003450 <parse_uwb_uart+0xfc>)
 80033b8:	4618      	mov	r0, r3
 80033ba:	f005 fab7 	bl	800892c <siscanf>
			loc->distance_to_anchor_cm[0] = (float)loc->distance_to_anchor[0]/10;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033ca:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80033ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			loc->uwb_ok[0] = 1;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			if(loc->packet_sum[0] < UWB_PACKET_BUFFER_SIZE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80033e6:	2b13      	cmp	r3, #19
 80033e8:	d807      	bhi.n	80033fa <parse_uwb_uart+0xa6>
				loc->packet_sum[0]++;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80033f0:	3301      	adds	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

		loc->packet_loss[0] = 100-loc->packet_sum[0]*100/UWB_PACKET_BUFFER_SIZE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8003400:	461a      	mov	r2, r3
 8003402:	2364      	movs	r3, #100	; 0x64
 8003404:	fb03 f302 	mul.w	r3, r3, r2
 8003408:	4a12      	ldr	r2, [pc, #72]	; (8003454 <parse_uwb_uart+0x100>)
 800340a:	fb82 1203 	smull	r1, r2, r2, r3
 800340e:	10d2      	asrs	r2, r2, #3
 8003410:	17db      	asrs	r3, r3, #31
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	b29b      	uxth	r3, r3
 8003416:	3364      	adds	r3, #100	; 0x64
 8003418:	b29a      	uxth	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	{
 8003420:	bf00      	nop
		loc->uwb_ok[0] = 0;
		if(loc->packet_sum[0] > 0)
			loc->packet_sum[0]--;

	}
}
 8003422:	e010      	b.n	8003446 <parse_uwb_uart+0xf2>
		loc->uwb_ok[0] = 0;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		if(loc->packet_sum[0] > 0)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8003432:	2b00      	cmp	r3, #0
 8003434:	d007      	beq.n	8003446 <parse_uwb_uart+0xf2>
			loc->packet_sum[0]--;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
}
 8003446:	bf00      	nop
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	0800d218 	.word	0x0800d218
 8003454:	66666667 	.word	0x66666667

08003458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800345c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800345e:	e7fe      	b.n	800345e <Error_Handler+0x6>

08003460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <HAL_MspInit+0x44>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	4a0e      	ldr	r2, [pc, #56]	; (80034a4 <HAL_MspInit+0x44>)
 800346c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003470:	6413      	str	r3, [r2, #64]	; 0x40
 8003472:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <HAL_MspInit+0x44>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_MspInit+0x44>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <HAL_MspInit+0x44>)
 8003484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003488:	6453      	str	r3, [r2, #68]	; 0x44
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_MspInit+0x44>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800

080034a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a30      	ldr	r2, [pc, #192]	; (8003578 <HAL_TIM_Base_MspInit+0xd0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d114      	bne.n	80034e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034ba:	4b30      	ldr	r3, [pc, #192]	; (800357c <HAL_TIM_Base_MspInit+0xd4>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	4a2f      	ldr	r2, [pc, #188]	; (800357c <HAL_TIM_Base_MspInit+0xd4>)
 80034c0:	f043 0302 	orr.w	r3, r3, #2
 80034c4:	6413      	str	r3, [r2, #64]	; 0x40
 80034c6:	4b2d      	ldr	r3, [pc, #180]	; (800357c <HAL_TIM_Base_MspInit+0xd4>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	201d      	movs	r0, #29
 80034d8:	f000 fd1f 	bl	8003f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034dc:	201d      	movs	r0, #29
 80034de:	f000 fd38 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80034e2:	e044      	b.n	800356e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a25      	ldr	r2, [pc, #148]	; (8003580 <HAL_TIM_Base_MspInit+0xd8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d114      	bne.n	8003518 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034ee:	4b23      	ldr	r3, [pc, #140]	; (800357c <HAL_TIM_Base_MspInit+0xd4>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	4a22      	ldr	r2, [pc, #136]	; (800357c <HAL_TIM_Base_MspInit+0xd4>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6413      	str	r3, [r2, #64]	; 0x40
 80034fa:	4b20      	ldr	r3, [pc, #128]	; (800357c <HAL_TIM_Base_MspInit+0xd4>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003506:	2200      	movs	r2, #0
 8003508:	2100      	movs	r1, #0
 800350a:	201e      	movs	r0, #30
 800350c:	f000 fd05 	bl	8003f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003510:	201e      	movs	r0, #30
 8003512:	f000 fd1e 	bl	8003f52 <HAL_NVIC_EnableIRQ>
}
 8003516:	e02a      	b.n	800356e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a19      	ldr	r2, [pc, #100]	; (8003584 <HAL_TIM_Base_MspInit+0xdc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d114      	bne.n	800354c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003522:	4b16      	ldr	r3, [pc, #88]	; (800357c <HAL_TIM_Base_MspInit+0xd4>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	4a15      	ldr	r2, [pc, #84]	; (800357c <HAL_TIM_Base_MspInit+0xd4>)
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	6413      	str	r3, [r2, #64]	; 0x40
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_TIM_Base_MspInit+0xd4>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800353a:	2200      	movs	r2, #0
 800353c:	2100      	movs	r1, #0
 800353e:	2032      	movs	r0, #50	; 0x32
 8003540:	f000 fceb 	bl	8003f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003544:	2032      	movs	r0, #50	; 0x32
 8003546:	f000 fd04 	bl	8003f52 <HAL_NVIC_EnableIRQ>
}
 800354a:	e010      	b.n	800356e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0d      	ldr	r2, [pc, #52]	; (8003588 <HAL_TIM_Base_MspInit+0xe0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10b      	bne.n	800356e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_TIM_Base_MspInit+0xd4>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	4a08      	ldr	r2, [pc, #32]	; (800357c <HAL_TIM_Base_MspInit+0xd4>)
 800355c:	f043 0302 	orr.w	r3, r3, #2
 8003560:	6453      	str	r3, [r2, #68]	; 0x44
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_TIM_Base_MspInit+0xd4>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]
}
 800356e:	bf00      	nop
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40000400 	.word	0x40000400
 800357c:	40023800 	.word	0x40023800
 8003580:	40000800 	.word	0x40000800
 8003584:	40000c00 	.word	0x40000c00
 8003588:	40010400 	.word	0x40010400

0800358c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM9)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1b      	ldr	r2, [pc, #108]	; (8003618 <HAL_TIM_IC_MspInit+0x8c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d12f      	bne.n	800360e <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80035ae:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_TIM_IC_MspInit+0x90>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	4a1a      	ldr	r2, [pc, #104]	; (800361c <HAL_TIM_IC_MspInit+0x90>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ba:	4b18      	ldr	r3, [pc, #96]	; (800361c <HAL_TIM_IC_MspInit+0x90>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <HAL_TIM_IC_MspInit+0x90>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4a14      	ldr	r2, [pc, #80]	; (800361c <HAL_TIM_IC_MspInit+0x90>)
 80035cc:	f043 0310 	orr.w	r3, r3, #16
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <HAL_TIM_IC_MspInit+0x90>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80035de:	2320      	movs	r3, #32
 80035e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ea:	2300      	movs	r3, #0
 80035ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80035ee:	2303      	movs	r3, #3
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	4619      	mov	r1, r3
 80035f8:	4809      	ldr	r0, [pc, #36]	; (8003620 <HAL_TIM_IC_MspInit+0x94>)
 80035fa:	f001 f8d9 	bl	80047b0 <HAL_GPIO_Init>

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80035fe:	2200      	movs	r2, #0
 8003600:	2100      	movs	r1, #0
 8003602:	2018      	movs	r0, #24
 8003604:	f000 fc89 	bl	8003f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003608:	2018      	movs	r0, #24
 800360a:	f000 fca2 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800360e:	bf00      	nop
 8003610:	3728      	adds	r7, #40	; 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40014000 	.word	0x40014000
 800361c:	40023800 	.word	0x40023800
 8003620:	40021000 	.word	0x40021000

08003624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b094      	sub	sp, #80	; 0x50
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4aa4      	ldr	r2, [pc, #656]	; (80038d4 <HAL_UART_MspInit+0x2b0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d128      	bne.n	8003698 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003646:	4ba4      	ldr	r3, [pc, #656]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	4aa3      	ldr	r2, [pc, #652]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 800364c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003650:	6413      	str	r3, [r2, #64]	; 0x40
 8003652:	4ba1      	ldr	r3, [pc, #644]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800365a:	63bb      	str	r3, [r7, #56]	; 0x38
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800365e:	4b9e      	ldr	r3, [pc, #632]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4a9d      	ldr	r2, [pc, #628]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	6313      	str	r3, [r2, #48]	; 0x30
 800366a:	4b9b      	ldr	r3, [pc, #620]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	637b      	str	r3, [r7, #52]	; 0x34
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003676:	2303      	movs	r3, #3
 8003678:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003682:	2303      	movs	r3, #3
 8003684:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003686:	2308      	movs	r3, #8
 8003688:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800368e:	4619      	mov	r1, r3
 8003690:	4892      	ldr	r0, [pc, #584]	; (80038dc <HAL_UART_MspInit+0x2b8>)
 8003692:	f001 f88d 	bl	80047b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003696:	e1ca      	b.n	8003a2e <HAL_UART_MspInit+0x40a>
  else if(huart->Instance==UART5)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a90      	ldr	r2, [pc, #576]	; (80038e0 <HAL_UART_MspInit+0x2bc>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d14d      	bne.n	800373e <HAL_UART_MspInit+0x11a>
    __HAL_RCC_UART5_CLK_ENABLE();
 80036a2:	4b8d      	ldr	r3, [pc, #564]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a8c      	ldr	r2, [pc, #560]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 80036a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	4b8a      	ldr	r3, [pc, #552]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036b6:	633b      	str	r3, [r7, #48]	; 0x30
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ba:	4b87      	ldr	r3, [pc, #540]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	4a86      	ldr	r2, [pc, #536]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 80036c0:	f043 0304 	orr.w	r3, r3, #4
 80036c4:	6313      	str	r3, [r2, #48]	; 0x30
 80036c6:	4b84      	ldr	r3, [pc, #528]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036d2:	4b81      	ldr	r3, [pc, #516]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	4a80      	ldr	r2, [pc, #512]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 80036d8:	f043 0308 	orr.w	r3, r3, #8
 80036dc:	6313      	str	r3, [r2, #48]	; 0x30
 80036de:	4b7e      	ldr	r3, [pc, #504]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80036ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	2302      	movs	r3, #2
 80036f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f8:	2303      	movs	r3, #3
 80036fa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80036fc:	2308      	movs	r3, #8
 80036fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003700:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003704:	4619      	mov	r1, r3
 8003706:	4877      	ldr	r0, [pc, #476]	; (80038e4 <HAL_UART_MspInit+0x2c0>)
 8003708:	f001 f852 	bl	80047b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800370c:	2304      	movs	r3, #4
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003710:	2302      	movs	r3, #2
 8003712:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003718:	2303      	movs	r3, #3
 800371a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800371c:	2308      	movs	r3, #8
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003720:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003724:	4619      	mov	r1, r3
 8003726:	4870      	ldr	r0, [pc, #448]	; (80038e8 <HAL_UART_MspInit+0x2c4>)
 8003728:	f001 f842 	bl	80047b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800372c:	2200      	movs	r2, #0
 800372e:	2100      	movs	r1, #0
 8003730:	2035      	movs	r0, #53	; 0x35
 8003732:	f000 fbf2 	bl	8003f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003736:	2035      	movs	r0, #53	; 0x35
 8003738:	f000 fc0b 	bl	8003f52 <HAL_NVIC_EnableIRQ>
}
 800373c:	e177      	b.n	8003a2e <HAL_UART_MspInit+0x40a>
  else if(huart->Instance==UART7)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a6a      	ldr	r2, [pc, #424]	; (80038ec <HAL_UART_MspInit+0x2c8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d160      	bne.n	800380a <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003748:	4b63      	ldr	r3, [pc, #396]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	4a62      	ldr	r2, [pc, #392]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 800374e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003752:	6413      	str	r3, [r2, #64]	; 0x40
 8003754:	4b60      	ldr	r3, [pc, #384]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003760:	4b5d      	ldr	r3, [pc, #372]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	4a5c      	ldr	r2, [pc, #368]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 8003766:	f043 0310 	orr.w	r3, r3, #16
 800376a:	6313      	str	r3, [r2, #48]	; 0x30
 800376c:	4b5a      	ldr	r3, [pc, #360]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	623b      	str	r3, [r7, #32]
 8003776:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003778:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800377c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	2302      	movs	r3, #2
 8003780:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003786:	2303      	movs	r3, #3
 8003788:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800378a:	2308      	movs	r3, #8
 800378c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800378e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003792:	4619      	mov	r1, r3
 8003794:	4856      	ldr	r0, [pc, #344]	; (80038f0 <HAL_UART_MspInit+0x2cc>)
 8003796:	f001 f80b 	bl	80047b0 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 800379a:	4b56      	ldr	r3, [pc, #344]	; (80038f4 <HAL_UART_MspInit+0x2d0>)
 800379c:	4a56      	ldr	r2, [pc, #344]	; (80038f8 <HAL_UART_MspInit+0x2d4>)
 800379e:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80037a0:	4b54      	ldr	r3, [pc, #336]	; (80038f4 <HAL_UART_MspInit+0x2d0>)
 80037a2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80037a6:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037a8:	4b52      	ldr	r3, [pc, #328]	; (80038f4 <HAL_UART_MspInit+0x2d0>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037ae:	4b51      	ldr	r3, [pc, #324]	; (80038f4 <HAL_UART_MspInit+0x2d0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037b4:	4b4f      	ldr	r3, [pc, #316]	; (80038f4 <HAL_UART_MspInit+0x2d0>)
 80037b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ba:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037bc:	4b4d      	ldr	r3, [pc, #308]	; (80038f4 <HAL_UART_MspInit+0x2d0>)
 80037be:	2200      	movs	r2, #0
 80037c0:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037c2:	4b4c      	ldr	r3, [pc, #304]	; (80038f4 <HAL_UART_MspInit+0x2d0>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 80037c8:	4b4a      	ldr	r3, [pc, #296]	; (80038f4 <HAL_UART_MspInit+0x2d0>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80037ce:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <HAL_UART_MspInit+0x2d0>)
 80037d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80037d4:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037d6:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <HAL_UART_MspInit+0x2d0>)
 80037d8:	2200      	movs	r2, #0
 80037da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80037dc:	4845      	ldr	r0, [pc, #276]	; (80038f4 <HAL_UART_MspInit+0x2d0>)
 80037de:	f000 fbd3 	bl	8003f88 <HAL_DMA_Init>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 80037e8:	f7ff fe36 	bl	8003458 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a41      	ldr	r2, [pc, #260]	; (80038f4 <HAL_UART_MspInit+0x2d0>)
 80037f0:	671a      	str	r2, [r3, #112]	; 0x70
 80037f2:	4a40      	ldr	r2, [pc, #256]	; (80038f4 <HAL_UART_MspInit+0x2d0>)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80037f8:	2200      	movs	r2, #0
 80037fa:	2100      	movs	r1, #0
 80037fc:	2052      	movs	r0, #82	; 0x52
 80037fe:	f000 fb8c 	bl	8003f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003802:	2052      	movs	r0, #82	; 0x52
 8003804:	f000 fba5 	bl	8003f52 <HAL_NVIC_EnableIRQ>
}
 8003808:	e111      	b.n	8003a2e <HAL_UART_MspInit+0x40a>
  else if(huart->Instance==UART8)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a3b      	ldr	r2, [pc, #236]	; (80038fc <HAL_UART_MspInit+0x2d8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d179      	bne.n	8003908 <HAL_UART_MspInit+0x2e4>
    __HAL_RCC_UART8_CLK_ENABLE();
 8003814:	4b30      	ldr	r3, [pc, #192]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	4a2f      	ldr	r2, [pc, #188]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 800381a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800381e:	6413      	str	r3, [r2, #64]	; 0x40
 8003820:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800382c:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	4a29      	ldr	r2, [pc, #164]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 8003832:	f043 0310 	orr.w	r3, r3, #16
 8003836:	6313      	str	r3, [r2, #48]	; 0x30
 8003838:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <HAL_UART_MspInit+0x2b4>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003844:	2303      	movs	r3, #3
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003848:	2302      	movs	r3, #2
 800384a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003850:	2303      	movs	r3, #3
 8003852:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003854:	2308      	movs	r3, #8
 8003856:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003858:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800385c:	4619      	mov	r1, r3
 800385e:	4824      	ldr	r0, [pc, #144]	; (80038f0 <HAL_UART_MspInit+0x2cc>)
 8003860:	f000 ffa6 	bl	80047b0 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8003864:	4b26      	ldr	r3, [pc, #152]	; (8003900 <HAL_UART_MspInit+0x2dc>)
 8003866:	4a27      	ldr	r2, [pc, #156]	; (8003904 <HAL_UART_MspInit+0x2e0>)
 8003868:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 800386a:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_UART_MspInit+0x2dc>)
 800386c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003870:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003872:	4b23      	ldr	r3, [pc, #140]	; (8003900 <HAL_UART_MspInit+0x2dc>)
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003878:	4b21      	ldr	r3, [pc, #132]	; (8003900 <HAL_UART_MspInit+0x2dc>)
 800387a:	2200      	movs	r2, #0
 800387c:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800387e:	4b20      	ldr	r3, [pc, #128]	; (8003900 <HAL_UART_MspInit+0x2dc>)
 8003880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003884:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003886:	4b1e      	ldr	r3, [pc, #120]	; (8003900 <HAL_UART_MspInit+0x2dc>)
 8003888:	2200      	movs	r2, #0
 800388a:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800388c:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <HAL_UART_MspInit+0x2dc>)
 800388e:	2200      	movs	r2, #0
 8003890:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8003892:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_UART_MspInit+0x2dc>)
 8003894:	2200      	movs	r2, #0
 8003896:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003898:	4b19      	ldr	r3, [pc, #100]	; (8003900 <HAL_UART_MspInit+0x2dc>)
 800389a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800389e:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038a0:	4b17      	ldr	r3, [pc, #92]	; (8003900 <HAL_UART_MspInit+0x2dc>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80038a6:	4816      	ldr	r0, [pc, #88]	; (8003900 <HAL_UART_MspInit+0x2dc>)
 80038a8:	f000 fb6e 	bl	8003f88 <HAL_DMA_Init>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_UART_MspInit+0x292>
      Error_Handler();
 80038b2:	f7ff fdd1 	bl	8003458 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a11      	ldr	r2, [pc, #68]	; (8003900 <HAL_UART_MspInit+0x2dc>)
 80038ba:	671a      	str	r2, [r3, #112]	; 0x70
 80038bc:	4a10      	ldr	r2, [pc, #64]	; (8003900 <HAL_UART_MspInit+0x2dc>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80038c2:	2200      	movs	r2, #0
 80038c4:	2100      	movs	r1, #0
 80038c6:	2053      	movs	r0, #83	; 0x53
 80038c8:	f000 fb27 	bl	8003f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80038cc:	2053      	movs	r0, #83	; 0x53
 80038ce:	f000 fb40 	bl	8003f52 <HAL_NVIC_EnableIRQ>
}
 80038d2:	e0ac      	b.n	8003a2e <HAL_UART_MspInit+0x40a>
 80038d4:	40004c00 	.word	0x40004c00
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020000 	.word	0x40020000
 80038e0:	40005000 	.word	0x40005000
 80038e4:	40020800 	.word	0x40020800
 80038e8:	40020c00 	.word	0x40020c00
 80038ec:	40007800 	.word	0x40007800
 80038f0:	40021000 	.word	0x40021000
 80038f4:	20000bc4 	.word	0x20000bc4
 80038f8:	40026058 	.word	0x40026058
 80038fc:	40007c00 	.word	0x40007c00
 8003900:	20000cc8 	.word	0x20000cc8
 8003904:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a4a      	ldr	r2, [pc, #296]	; (8003a38 <HAL_UART_MspInit+0x414>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d129      	bne.n	8003966 <HAL_UART_MspInit+0x342>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003912:	4b4a      	ldr	r3, [pc, #296]	; (8003a3c <HAL_UART_MspInit+0x418>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	4a49      	ldr	r2, [pc, #292]	; (8003a3c <HAL_UART_MspInit+0x418>)
 8003918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800391c:	6413      	str	r3, [r2, #64]	; 0x40
 800391e:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_UART_MspInit+0x418>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800392a:	4b44      	ldr	r3, [pc, #272]	; (8003a3c <HAL_UART_MspInit+0x418>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4a43      	ldr	r2, [pc, #268]	; (8003a3c <HAL_UART_MspInit+0x418>)
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <HAL_UART_MspInit+0x418>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003942:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003946:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003948:	2302      	movs	r3, #2
 800394a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	2300      	movs	r3, #0
 800394e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003950:	2303      	movs	r3, #3
 8003952:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003954:	2307      	movs	r3, #7
 8003956:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003958:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800395c:	4619      	mov	r1, r3
 800395e:	4838      	ldr	r0, [pc, #224]	; (8003a40 <HAL_UART_MspInit+0x41c>)
 8003960:	f000 ff26 	bl	80047b0 <HAL_GPIO_Init>
}
 8003964:	e063      	b.n	8003a2e <HAL_UART_MspInit+0x40a>
  else if(huart->Instance==USART6)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a36      	ldr	r2, [pc, #216]	; (8003a44 <HAL_UART_MspInit+0x420>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d15e      	bne.n	8003a2e <HAL_UART_MspInit+0x40a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003970:	4b32      	ldr	r3, [pc, #200]	; (8003a3c <HAL_UART_MspInit+0x418>)
 8003972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003974:	4a31      	ldr	r2, [pc, #196]	; (8003a3c <HAL_UART_MspInit+0x418>)
 8003976:	f043 0320 	orr.w	r3, r3, #32
 800397a:	6453      	str	r3, [r2, #68]	; 0x44
 800397c:	4b2f      	ldr	r3, [pc, #188]	; (8003a3c <HAL_UART_MspInit+0x418>)
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003988:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <HAL_UART_MspInit+0x418>)
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	4a2b      	ldr	r2, [pc, #172]	; (8003a3c <HAL_UART_MspInit+0x418>)
 800398e:	f043 0304 	orr.w	r3, r3, #4
 8003992:	6313      	str	r3, [r2, #48]	; 0x30
 8003994:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <HAL_UART_MspInit+0x418>)
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039a0:	23c0      	movs	r3, #192	; 0xc0
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a4:	2302      	movs	r3, #2
 80039a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ac:	2303      	movs	r3, #3
 80039ae:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80039b0:	2308      	movs	r3, #8
 80039b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039b8:	4619      	mov	r1, r3
 80039ba:	4823      	ldr	r0, [pc, #140]	; (8003a48 <HAL_UART_MspInit+0x424>)
 80039bc:	f000 fef8 	bl	80047b0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80039c0:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <HAL_UART_MspInit+0x428>)
 80039c2:	4a23      	ldr	r2, [pc, #140]	; (8003a50 <HAL_UART_MspInit+0x42c>)
 80039c4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80039c6:	4b21      	ldr	r3, [pc, #132]	; (8003a4c <HAL_UART_MspInit+0x428>)
 80039c8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80039cc:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039ce:	4b1f      	ldr	r3, [pc, #124]	; (8003a4c <HAL_UART_MspInit+0x428>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039d4:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_UART_MspInit+0x428>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039da:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <HAL_UART_MspInit+0x428>)
 80039dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039e0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039e2:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <HAL_UART_MspInit+0x428>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039e8:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <HAL_UART_MspInit+0x428>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80039ee:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <HAL_UART_MspInit+0x428>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80039f4:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <HAL_UART_MspInit+0x428>)
 80039f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039fa:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039fc:	4b13      	ldr	r3, [pc, #76]	; (8003a4c <HAL_UART_MspInit+0x428>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003a02:	4812      	ldr	r0, [pc, #72]	; (8003a4c <HAL_UART_MspInit+0x428>)
 8003a04:	f000 fac0 	bl	8003f88 <HAL_DMA_Init>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_UART_MspInit+0x3ee>
      Error_Handler();
 8003a0e:	f7ff fd23 	bl	8003458 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a0d      	ldr	r2, [pc, #52]	; (8003a4c <HAL_UART_MspInit+0x428>)
 8003a16:	671a      	str	r2, [r3, #112]	; 0x70
 8003a18:	4a0c      	ldr	r2, [pc, #48]	; (8003a4c <HAL_UART_MspInit+0x428>)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2100      	movs	r1, #0
 8003a22:	2047      	movs	r0, #71	; 0x47
 8003a24:	f000 fa79 	bl	8003f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003a28:	2047      	movs	r0, #71	; 0x47
 8003a2a:	f000 fa92 	bl	8003f52 <HAL_NVIC_EnableIRQ>
}
 8003a2e:	bf00      	nop
 8003a30:	3750      	adds	r7, #80	; 0x50
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40004800 	.word	0x40004800
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40020400 	.word	0x40020400
 8003a44:	40011400 	.word	0x40011400
 8003a48:	40020800 	.word	0x40020800
 8003a4c:	200003e0 	.word	0x200003e0
 8003a50:	40026428 	.word	0x40026428

08003a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a58:	e7fe      	b.n	8003a58 <NMI_Handler+0x4>

08003a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a5e:	e7fe      	b.n	8003a5e <HardFault_Handler+0x4>

08003a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a64:	e7fe      	b.n	8003a64 <MemManage_Handler+0x4>

08003a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a66:	b480      	push	{r7}
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a6a:	e7fe      	b.n	8003a6a <BusFault_Handler+0x4>

08003a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <UsageFault_Handler+0x4>

08003a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aa0:	f000 f91e 	bl	8003ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aa4:	bf00      	nop
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <DMA1_Stream3_IRQHandler+0x10>)
 8003aae:	f000 fc0b 	bl	80042c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000bc4 	.word	0x20000bc4

08003abc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <DMA1_Stream6_IRQHandler+0x10>)
 8003ac2:	f000 fc01 	bl	80042c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000cc8 	.word	0x20000cc8

08003ad0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8003ad4:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003ad6:	f002 fb97 	bl	8006208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000da4 	.word	0x20000da4

08003ae4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <TIM3_IRQHandler+0x10>)
 8003aea:	f002 fb8d 	bl	8006208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000af4 	.word	0x20000af4

08003af8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003afc:	4802      	ldr	r0, [pc, #8]	; (8003b08 <TIM4_IRQHandler+0x10>)
 8003afe:	f002 fb83 	bl	8006208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000548 	.word	0x20000548

08003b0c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <TIM5_IRQHandler+0x10>)
 8003b12:	f002 fb79 	bl	8006208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000aa8 	.word	0x20000aa8

08003b20 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <UART5_IRQHandler+0x10>)
 8003b26:	f003 fafb 	bl	8007120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000b40 	.word	0x20000b40

08003b34 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003b38:	4802      	ldr	r0, [pc, #8]	; (8003b44 <DMA2_Stream1_IRQHandler+0x10>)
 8003b3a:	f000 fbc5 	bl	80042c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	200003e0 	.word	0x200003e0

08003b48 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003b4c:	4802      	ldr	r0, [pc, #8]	; (8003b58 <USART6_IRQHandler+0x10>)
 8003b4e:	f003 fae7 	bl	8007120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000e74 	.word	0x20000e74

08003b5c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003b60:	4802      	ldr	r0, [pc, #8]	; (8003b6c <UART7_IRQHandler+0x10>)
 8003b62:	f003 fadd 	bl	8007120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000478 	.word	0x20000478

08003b70 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003b74:	4802      	ldr	r0, [pc, #8]	; (8003b80 <UART8_IRQHandler+0x10>)
 8003b76:	f003 fad3 	bl	8007120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000df0 	.word	0x20000df0

08003b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <_sbrk+0x5c>)
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <_sbrk+0x60>)
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b98:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <_sbrk+0x64>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <_sbrk+0x64>)
 8003ba2:	4a12      	ldr	r2, [pc, #72]	; (8003bec <_sbrk+0x68>)
 8003ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <_sbrk+0x64>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d207      	bcs.n	8003bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bb4:	f004 f9f8 	bl	8007fa8 <__errno>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	230c      	movs	r3, #12
 8003bbc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc2:	e009      	b.n	8003bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bc4:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <_sbrk+0x64>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bca:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <_sbrk+0x64>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <_sbrk+0x64>)
 8003bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20040000 	.word	0x20040000
 8003be4:	00000400 	.word	0x00000400
 8003be8:	20000390 	.word	0x20000390
 8003bec:	20001070 	.word	0x20001070

08003bf0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <SystemInit+0x20>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <SystemInit+0x20>)
 8003bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c18:	480d      	ldr	r0, [pc, #52]	; (8003c50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c1a:	490e      	ldr	r1, [pc, #56]	; (8003c54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c1c:	4a0e      	ldr	r2, [pc, #56]	; (8003c58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c20:	e002      	b.n	8003c28 <LoopCopyDataInit>

08003c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c26:	3304      	adds	r3, #4

08003c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c2c:	d3f9      	bcc.n	8003c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c2e:	4a0b      	ldr	r2, [pc, #44]	; (8003c5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c30:	4c0b      	ldr	r4, [pc, #44]	; (8003c60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c34:	e001      	b.n	8003c3a <LoopFillZerobss>

08003c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c38:	3204      	adds	r2, #4

08003c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c3c:	d3fb      	bcc.n	8003c36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c3e:	f7ff ffd7 	bl	8003bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c42:	f004 f9b7 	bl	8007fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c46:	f7fd f9a7 	bl	8000f98 <main>
  bx  lr    
 8003c4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c4c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c54:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003c58:	0800d760 	.word	0x0800d760
  ldr r2, =_sbss
 8003c5c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003c60:	2000106c 	.word	0x2000106c

08003c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c64:	e7fe      	b.n	8003c64 <ADC_IRQHandler>

08003c66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c6a:	2003      	movs	r0, #3
 8003c6c:	f000 f94a 	bl	8003f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c70:	2000      	movs	r0, #0
 8003c72:	f000 f805 	bl	8003c80 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003c76:	f7ff fbf3 	bl	8003460 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_InitTick+0x54>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_InitTick+0x58>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	4619      	mov	r1, r3
 8003c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f965 	bl	8003f6e <HAL_SYSTICK_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e00e      	b.n	8003ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b0f      	cmp	r3, #15
 8003cb2:	d80a      	bhi.n	8003cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbc:	f000 f92d 	bl	8003f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc0:	4a06      	ldr	r2, [pc, #24]	; (8003cdc <HAL_InitTick+0x5c>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000014 	.word	0x20000014
 8003cd8:	2000001c 	.word	0x2000001c
 8003cdc:	20000018 	.word	0x20000018

08003ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ce4:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_IncTick+0x20>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_IncTick+0x24>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4413      	add	r3, r2
 8003cf0:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <HAL_IncTick+0x24>)
 8003cf2:	6013      	str	r3, [r2, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	2000001c 	.word	0x2000001c
 8003d04:	20001064 	.word	0x20001064

08003d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <HAL_GetTick+0x14>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20001064 	.word	0x20001064

08003d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d28:	f7ff ffee 	bl	8003d08 <HAL_GetTick>
 8003d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d005      	beq.n	8003d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <HAL_Delay+0x40>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d46:	bf00      	nop
 8003d48:	f7ff ffde 	bl	8003d08 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d8f7      	bhi.n	8003d48 <HAL_Delay+0x28>
  {
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	2000001c 	.word	0x2000001c

08003d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <__NVIC_SetPriorityGrouping+0x40>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d80:	4013      	ands	r3, r2
 8003d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <__NVIC_SetPriorityGrouping+0x44>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d92:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <__NVIC_SetPriorityGrouping+0x40>)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	60d3      	str	r3, [r2, #12]
}
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	e000ed00 	.word	0xe000ed00
 8003da8:	05fa0000 	.word	0x05fa0000

08003dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	0a1b      	lsrs	r3, r3, #8
 8003db6:	f003 0307 	and.w	r3, r3, #7
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	db0b      	blt.n	8003df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	f003 021f 	and.w	r2, r3, #31
 8003de0:	4907      	ldr	r1, [pc, #28]	; (8003e00 <__NVIC_EnableIRQ+0x38>)
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2001      	movs	r0, #1
 8003dea:	fa00 f202 	lsl.w	r2, r0, r2
 8003dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	e000e100 	.word	0xe000e100

08003e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	6039      	str	r1, [r7, #0]
 8003e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	db0a      	blt.n	8003e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	490c      	ldr	r1, [pc, #48]	; (8003e50 <__NVIC_SetPriority+0x4c>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	0112      	lsls	r2, r2, #4
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	440b      	add	r3, r1
 8003e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e2c:	e00a      	b.n	8003e44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	4908      	ldr	r1, [pc, #32]	; (8003e54 <__NVIC_SetPriority+0x50>)
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	3b04      	subs	r3, #4
 8003e3c:	0112      	lsls	r2, r2, #4
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	440b      	add	r3, r1
 8003e42:	761a      	strb	r2, [r3, #24]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	e000e100 	.word	0xe000e100
 8003e54:	e000ed00 	.word	0xe000ed00

08003e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f1c3 0307 	rsb	r3, r3, #7
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	bf28      	it	cs
 8003e76:	2304      	movcs	r3, #4
 8003e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	2b06      	cmp	r3, #6
 8003e80:	d902      	bls.n	8003e88 <NVIC_EncodePriority+0x30>
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3b03      	subs	r3, #3
 8003e86:	e000      	b.n	8003e8a <NVIC_EncodePriority+0x32>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43da      	mvns	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eaa:	43d9      	mvns	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb0:	4313      	orrs	r3, r2
         );
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3724      	adds	r7, #36	; 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ed0:	d301      	bcc.n	8003ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e00f      	b.n	8003ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <SysTick_Config+0x40>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ede:	210f      	movs	r1, #15
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	f7ff ff8e 	bl	8003e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <SysTick_Config+0x40>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eee:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <SysTick_Config+0x40>)
 8003ef0:	2207      	movs	r2, #7
 8003ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	e000e010 	.word	0xe000e010

08003f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ff29 	bl	8003d64 <__NVIC_SetPriorityGrouping>
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b086      	sub	sp, #24
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	4603      	mov	r3, r0
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f2c:	f7ff ff3e 	bl	8003dac <__NVIC_GetPriorityGrouping>
 8003f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f7ff ff8e 	bl	8003e58 <NVIC_EncodePriority>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ff5d 	bl	8003e04 <__NVIC_SetPriority>
}
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	4603      	mov	r3, r0
 8003f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff31 	bl	8003dc8 <__NVIC_EnableIRQ>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff ffa2 	bl	8003ec0 <SysTick_Config>
 8003f7c:	4603      	mov	r3, r0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f94:	f7ff feb8 	bl	8003d08 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e099      	b.n	80040d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fc4:	e00f      	b.n	8003fe6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fc6:	f7ff fe9f 	bl	8003d08 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b05      	cmp	r3, #5
 8003fd2:	d908      	bls.n	8003fe6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2203      	movs	r2, #3
 8003fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e078      	b.n	80040d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e8      	bne.n	8003fc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4b38      	ldr	r3, [pc, #224]	; (80040e0 <HAL_DMA_Init+0x158>)
 8004000:	4013      	ands	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004012:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	2b04      	cmp	r3, #4
 800403e:	d107      	bne.n	8004050 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	4313      	orrs	r3, r2
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0307 	bic.w	r3, r3, #7
 8004066:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	2b04      	cmp	r3, #4
 8004078:	d117      	bne.n	80040aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00e      	beq.n	80040aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fb15 	bl	80046bc <DMA_CheckFifoParam>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2240      	movs	r2, #64	; 0x40
 800409c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040a6:	2301      	movs	r3, #1
 80040a8:	e016      	b.n	80040d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 facc 	bl	8004650 <DMA_CalcBaseAndBitshift>
 80040b8:	4603      	mov	r3, r0
 80040ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c0:	223f      	movs	r2, #63	; 0x3f
 80040c2:	409a      	lsls	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	e010803f 	.word	0xe010803f

080040e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_DMA_Start_IT+0x26>
 8004106:	2302      	movs	r3, #2
 8004108:	e048      	b.n	800419c <HAL_DMA_Start_IT+0xb8>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d137      	bne.n	800418e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2202      	movs	r2, #2
 8004122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fa5e 	bl	80045f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	223f      	movs	r2, #63	; 0x3f
 800413e:	409a      	lsls	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0216 	orr.w	r2, r2, #22
 8004152:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004162:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0208 	orr.w	r2, r2, #8
 800417a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	e005      	b.n	800419a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004196:	2302      	movs	r3, #2
 8004198:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800419a:	7dfb      	ldrb	r3, [r7, #23]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041b2:	f7ff fda9 	bl	8003d08 <HAL_GetTick>
 80041b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d008      	beq.n	80041d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2280      	movs	r2, #128	; 0x80
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e052      	b.n	800427c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0216 	bic.w	r2, r2, #22
 80041e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <HAL_DMA_Abort+0x62>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0208 	bic.w	r2, r2, #8
 8004214:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004226:	e013      	b.n	8004250 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004228:	f7ff fd6e 	bl	8003d08 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b05      	cmp	r3, #5
 8004234:	d90c      	bls.n	8004250 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2203      	movs	r2, #3
 8004248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e015      	b.n	800427c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e4      	bne.n	8004228 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	223f      	movs	r2, #63	; 0x3f
 8004264:	409a      	lsls	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d004      	beq.n	80042a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e00c      	b.n	80042bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2205      	movs	r2, #5
 80042a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80042d4:	4b92      	ldr	r3, [pc, #584]	; (8004520 <HAL_DMA_IRQHandler+0x258>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a92      	ldr	r2, [pc, #584]	; (8004524 <HAL_DMA_IRQHandler+0x25c>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	0a9b      	lsrs	r3, r3, #10
 80042e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f2:	2208      	movs	r2, #8
 80042f4:	409a      	lsls	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01a      	beq.n	8004334 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d013      	beq.n	8004334 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0204 	bic.w	r2, r2, #4
 800431a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004320:	2208      	movs	r2, #8
 8004322:	409a      	lsls	r2, r3
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432c:	f043 0201 	orr.w	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004338:	2201      	movs	r2, #1
 800433a:	409a      	lsls	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4013      	ands	r3, r2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d012      	beq.n	800436a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004356:	2201      	movs	r2, #1
 8004358:	409a      	lsls	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	f043 0202 	orr.w	r2, r3, #2
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436e:	2204      	movs	r2, #4
 8004370:	409a      	lsls	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4013      	ands	r3, r2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d012      	beq.n	80043a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00b      	beq.n	80043a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438c:	2204      	movs	r2, #4
 800438e:	409a      	lsls	r2, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	f043 0204 	orr.w	r2, r3, #4
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a4:	2210      	movs	r2, #16
 80043a6:	409a      	lsls	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d043      	beq.n	8004438 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d03c      	beq.n	8004438 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	2210      	movs	r2, #16
 80043c4:	409a      	lsls	r2, r3
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d018      	beq.n	800440a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d108      	bne.n	80043f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d024      	beq.n	8004438 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	4798      	blx	r3
 80043f6:	e01f      	b.n	8004438 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01b      	beq.n	8004438 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
 8004408:	e016      	b.n	8004438 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d107      	bne.n	8004428 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0208 	bic.w	r2, r2, #8
 8004426:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443c:	2220      	movs	r2, #32
 800443e:	409a      	lsls	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 808e 	beq.w	8004566 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 8086 	beq.w	8004566 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445e:	2220      	movs	r2, #32
 8004460:	409a      	lsls	r2, r3
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b05      	cmp	r3, #5
 8004470:	d136      	bne.n	80044e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0216 	bic.w	r2, r2, #22
 8004480:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004490:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d103      	bne.n	80044a2 <HAL_DMA_IRQHandler+0x1da>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0208 	bic.w	r2, r2, #8
 80044b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b6:	223f      	movs	r2, #63	; 0x3f
 80044b8:	409a      	lsls	r2, r3
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d07d      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	4798      	blx	r3
        }
        return;
 80044de:	e078      	b.n	80045d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d01c      	beq.n	8004528 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d108      	bne.n	800450e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004500:	2b00      	cmp	r3, #0
 8004502:	d030      	beq.n	8004566 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4798      	blx	r3
 800450c:	e02b      	b.n	8004566 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d027      	beq.n	8004566 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
 800451e:	e022      	b.n	8004566 <HAL_DMA_IRQHandler+0x29e>
 8004520:	20000014 	.word	0x20000014
 8004524:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0210 	bic.w	r2, r2, #16
 8004544:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456a:	2b00      	cmp	r3, #0
 800456c:	d032      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d022      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2205      	movs	r2, #5
 800457e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	3301      	adds	r3, #1
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	429a      	cmp	r2, r3
 800459c:	d307      	bcc.n	80045ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f2      	bne.n	8004592 <HAL_DMA_IRQHandler+0x2ca>
 80045ac:	e000      	b.n	80045b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80045ae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	4798      	blx	r3
 80045d0:	e000      	b.n	80045d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80045d2:	bf00      	nop
    }
  }
}
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop

080045dc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004610:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2b40      	cmp	r3, #64	; 0x40
 8004620:	d108      	bne.n	8004634 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004632:	e007      	b.n	8004644 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	60da      	str	r2, [r3, #12]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	3b10      	subs	r3, #16
 8004660:	4a13      	ldr	r2, [pc, #76]	; (80046b0 <DMA_CalcBaseAndBitshift+0x60>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800466a:	4a12      	ldr	r2, [pc, #72]	; (80046b4 <DMA_CalcBaseAndBitshift+0x64>)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d908      	bls.n	8004690 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <DMA_CalcBaseAndBitshift+0x68>)
 8004686:	4013      	ands	r3, r2
 8004688:	1d1a      	adds	r2, r3, #4
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	659a      	str	r2, [r3, #88]	; 0x58
 800468e:	e006      	b.n	800469e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <DMA_CalcBaseAndBitshift+0x68>)
 8004698:	4013      	ands	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	aaaaaaab 	.word	0xaaaaaaab
 80046b4:	0800d244 	.word	0x0800d244
 80046b8:	fffffc00 	.word	0xfffffc00

080046bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d11f      	bne.n	8004716 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d855      	bhi.n	8004788 <DMA_CheckFifoParam+0xcc>
 80046dc:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <DMA_CheckFifoParam+0x28>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	08004707 	.word	0x08004707
 80046ec:	080046f5 	.word	0x080046f5
 80046f0:	08004789 	.word	0x08004789
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d045      	beq.n	800478c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004704:	e042      	b.n	800478c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800470e:	d13f      	bne.n	8004790 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004714:	e03c      	b.n	8004790 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471e:	d121      	bne.n	8004764 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b03      	cmp	r3, #3
 8004724:	d836      	bhi.n	8004794 <DMA_CheckFifoParam+0xd8>
 8004726:	a201      	add	r2, pc, #4	; (adr r2, 800472c <DMA_CheckFifoParam+0x70>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	0800473d 	.word	0x0800473d
 8004730:	08004743 	.word	0x08004743
 8004734:	0800473d 	.word	0x0800473d
 8004738:	08004755 	.word	0x08004755
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	73fb      	strb	r3, [r7, #15]
      break;
 8004740:	e02f      	b.n	80047a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d024      	beq.n	8004798 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004752:	e021      	b.n	8004798 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800475c:	d11e      	bne.n	800479c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004762:	e01b      	b.n	800479c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d902      	bls.n	8004770 <DMA_CheckFifoParam+0xb4>
 800476a:	2b03      	cmp	r3, #3
 800476c:	d003      	beq.n	8004776 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800476e:	e018      	b.n	80047a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
      break;
 8004774:	e015      	b.n	80047a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00e      	beq.n	80047a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	73fb      	strb	r3, [r7, #15]
      break;
 8004786:	e00b      	b.n	80047a0 <DMA_CheckFifoParam+0xe4>
      break;
 8004788:	bf00      	nop
 800478a:	e00a      	b.n	80047a2 <DMA_CheckFifoParam+0xe6>
      break;
 800478c:	bf00      	nop
 800478e:	e008      	b.n	80047a2 <DMA_CheckFifoParam+0xe6>
      break;
 8004790:	bf00      	nop
 8004792:	e006      	b.n	80047a2 <DMA_CheckFifoParam+0xe6>
      break;
 8004794:	bf00      	nop
 8004796:	e004      	b.n	80047a2 <DMA_CheckFifoParam+0xe6>
      break;
 8004798:	bf00      	nop
 800479a:	e002      	b.n	80047a2 <DMA_CheckFifoParam+0xe6>
      break;   
 800479c:	bf00      	nop
 800479e:	e000      	b.n	80047a2 <DMA_CheckFifoParam+0xe6>
      break;
 80047a0:	bf00      	nop
    }
  } 
  
  return status; 
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b089      	sub	sp, #36	; 0x24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e169      	b.n	8004aa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80047d0:	2201      	movs	r2, #1
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4013      	ands	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	f040 8158 	bne.w	8004a9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d00b      	beq.n	800480e <HAL_GPIO_Init+0x5e>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d007      	beq.n	800480e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004802:	2b11      	cmp	r3, #17
 8004804:	d003      	beq.n	800480e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b12      	cmp	r3, #18
 800480c:	d130      	bne.n	8004870 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	2203      	movs	r2, #3
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	4013      	ands	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4313      	orrs	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004844:	2201      	movs	r2, #1
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 0201 	and.w	r2, r3, #1
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	2203      	movs	r2, #3
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d003      	beq.n	80048b0 <HAL_GPIO_Init+0x100>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b12      	cmp	r3, #18
 80048ae:	d123      	bne.n	80048f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	08da      	lsrs	r2, r3, #3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3208      	adds	r2, #8
 80048b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	220f      	movs	r2, #15
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	08da      	lsrs	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3208      	adds	r2, #8
 80048f2:	69b9      	ldr	r1, [r7, #24]
 80048f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2203      	movs	r2, #3
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 0203 	and.w	r2, r3, #3
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80b2 	beq.w	8004a9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800493a:	4b5f      	ldr	r3, [pc, #380]	; (8004ab8 <HAL_GPIO_Init+0x308>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	4a5e      	ldr	r2, [pc, #376]	; (8004ab8 <HAL_GPIO_Init+0x308>)
 8004940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004944:	6453      	str	r3, [r2, #68]	; 0x44
 8004946:	4b5c      	ldr	r3, [pc, #368]	; (8004ab8 <HAL_GPIO_Init+0x308>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004952:	4a5a      	ldr	r2, [pc, #360]	; (8004abc <HAL_GPIO_Init+0x30c>)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	089b      	lsrs	r3, r3, #2
 8004958:	3302      	adds	r3, #2
 800495a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	220f      	movs	r2, #15
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a51      	ldr	r2, [pc, #324]	; (8004ac0 <HAL_GPIO_Init+0x310>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d02b      	beq.n	80049d6 <HAL_GPIO_Init+0x226>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a50      	ldr	r2, [pc, #320]	; (8004ac4 <HAL_GPIO_Init+0x314>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d025      	beq.n	80049d2 <HAL_GPIO_Init+0x222>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a4f      	ldr	r2, [pc, #316]	; (8004ac8 <HAL_GPIO_Init+0x318>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d01f      	beq.n	80049ce <HAL_GPIO_Init+0x21e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a4e      	ldr	r2, [pc, #312]	; (8004acc <HAL_GPIO_Init+0x31c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d019      	beq.n	80049ca <HAL_GPIO_Init+0x21a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a4d      	ldr	r2, [pc, #308]	; (8004ad0 <HAL_GPIO_Init+0x320>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <HAL_GPIO_Init+0x216>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a4c      	ldr	r2, [pc, #304]	; (8004ad4 <HAL_GPIO_Init+0x324>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00d      	beq.n	80049c2 <HAL_GPIO_Init+0x212>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a4b      	ldr	r2, [pc, #300]	; (8004ad8 <HAL_GPIO_Init+0x328>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <HAL_GPIO_Init+0x20e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a4a      	ldr	r2, [pc, #296]	; (8004adc <HAL_GPIO_Init+0x32c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d101      	bne.n	80049ba <HAL_GPIO_Init+0x20a>
 80049b6:	2307      	movs	r3, #7
 80049b8:	e00e      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049ba:	2308      	movs	r3, #8
 80049bc:	e00c      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049be:	2306      	movs	r3, #6
 80049c0:	e00a      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049c2:	2305      	movs	r3, #5
 80049c4:	e008      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049c6:	2304      	movs	r3, #4
 80049c8:	e006      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049ca:	2303      	movs	r3, #3
 80049cc:	e004      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e002      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049d6:	2300      	movs	r3, #0
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	f002 0203 	and.w	r2, r2, #3
 80049de:	0092      	lsls	r2, r2, #2
 80049e0:	4093      	lsls	r3, r2
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80049e8:	4934      	ldr	r1, [pc, #208]	; (8004abc <HAL_GPIO_Init+0x30c>)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	089b      	lsrs	r3, r3, #2
 80049ee:	3302      	adds	r3, #2
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049f6:	4b3a      	ldr	r3, [pc, #232]	; (8004ae0 <HAL_GPIO_Init+0x330>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a1a:	4a31      	ldr	r2, [pc, #196]	; (8004ae0 <HAL_GPIO_Init+0x330>)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a20:	4b2f      	ldr	r3, [pc, #188]	; (8004ae0 <HAL_GPIO_Init+0x330>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a44:	4a26      	ldr	r2, [pc, #152]	; (8004ae0 <HAL_GPIO_Init+0x330>)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a4a:	4b25      	ldr	r3, [pc, #148]	; (8004ae0 <HAL_GPIO_Init+0x330>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a6e:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <HAL_GPIO_Init+0x330>)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a74:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <HAL_GPIO_Init+0x330>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4013      	ands	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a98:	4a11      	ldr	r2, [pc, #68]	; (8004ae0 <HAL_GPIO_Init+0x330>)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	61fb      	str	r3, [r7, #28]
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b0f      	cmp	r3, #15
 8004aa8:	f67f ae92 	bls.w	80047d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004aac:	bf00      	nop
 8004aae:	3724      	adds	r7, #36	; 0x24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	40013800 	.word	0x40013800
 8004ac0:	40020000 	.word	0x40020000
 8004ac4:	40020400 	.word	0x40020400
 8004ac8:	40020800 	.word	0x40020800
 8004acc:	40020c00 	.word	0x40020c00
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40021400 	.word	0x40021400
 8004ad8:	40021800 	.word	0x40021800
 8004adc:	40021c00 	.word	0x40021c00
 8004ae0:	40013c00 	.word	0x40013c00

08004ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	807b      	strh	r3, [r7, #2]
 8004af0:	4613      	mov	r3, r2
 8004af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004af4:	787b      	ldrb	r3, [r7, #1]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004afa:	887a      	ldrh	r2, [r7, #2]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004b00:	e003      	b.n	8004b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004b02:	887b      	ldrh	r3, [r7, #2]
 8004b04:	041a      	lsls	r2, r3, #16
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	619a      	str	r2, [r3, #24]
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b28:	887a      	ldrh	r2, [r7, #2]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	041a      	lsls	r2, r3, #16
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	43d9      	mvns	r1, r3
 8004b34:	887b      	ldrh	r3, [r7, #2]
 8004b36:	400b      	ands	r3, r1
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	619a      	str	r2, [r3, #24]
}
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b56:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	4a22      	ldr	r2, [pc, #136]	; (8004be4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b60:	6413      	str	r3, [r2, #64]	; 0x40
 8004b62:	4b20      	ldr	r3, [pc, #128]	; (8004be4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b6e:	4b1e      	ldr	r3, [pc, #120]	; (8004be8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1d      	ldr	r2, [pc, #116]	; (8004be8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b7a:	f7ff f8c5 	bl	8003d08 <HAL_GetTick>
 8004b7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b80:	e009      	b.n	8004b96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b82:	f7ff f8c1 	bl	8003d08 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b90:	d901      	bls.n	8004b96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e022      	b.n	8004bdc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba2:	d1ee      	bne.n	8004b82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ba4:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a0f      	ldr	r2, [pc, #60]	; (8004be8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bb0:	f7ff f8aa 	bl	8003d08 <HAL_GetTick>
 8004bb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bb6:	e009      	b.n	8004bcc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bb8:	f7ff f8a6 	bl	8003d08 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bc6:	d901      	bls.n	8004bcc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e007      	b.n	8004bdc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bd8:	d1ee      	bne.n	8004bb8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40023800 	.word	0x40023800
 8004be8:	40007000 	.word	0x40007000

08004bec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e291      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 8087 	beq.w	8004d1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c10:	4b96      	ldr	r3, [pc, #600]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 030c 	and.w	r3, r3, #12
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d00c      	beq.n	8004c36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c1c:	4b93      	ldr	r3, [pc, #588]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d112      	bne.n	8004c4e <HAL_RCC_OscConfig+0x62>
 8004c28:	4b90      	ldr	r3, [pc, #576]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c34:	d10b      	bne.n	8004c4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c36:	4b8d      	ldr	r3, [pc, #564]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d06c      	beq.n	8004d1c <HAL_RCC_OscConfig+0x130>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d168      	bne.n	8004d1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e26b      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c56:	d106      	bne.n	8004c66 <HAL_RCC_OscConfig+0x7a>
 8004c58:	4b84      	ldr	r3, [pc, #528]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a83      	ldr	r2, [pc, #524]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	e02e      	b.n	8004cc4 <HAL_RCC_OscConfig+0xd8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10c      	bne.n	8004c88 <HAL_RCC_OscConfig+0x9c>
 8004c6e:	4b7f      	ldr	r3, [pc, #508]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a7e      	ldr	r2, [pc, #504]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	4b7c      	ldr	r3, [pc, #496]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a7b      	ldr	r2, [pc, #492]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e01d      	b.n	8004cc4 <HAL_RCC_OscConfig+0xd8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c90:	d10c      	bne.n	8004cac <HAL_RCC_OscConfig+0xc0>
 8004c92:	4b76      	ldr	r3, [pc, #472]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a75      	ldr	r2, [pc, #468]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	4b73      	ldr	r3, [pc, #460]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a72      	ldr	r2, [pc, #456]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e00b      	b.n	8004cc4 <HAL_RCC_OscConfig+0xd8>
 8004cac:	4b6f      	ldr	r3, [pc, #444]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a6e      	ldr	r2, [pc, #440]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	4b6c      	ldr	r3, [pc, #432]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a6b      	ldr	r2, [pc, #428]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d013      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7ff f81c 	bl	8003d08 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd4:	f7ff f818 	bl	8003d08 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b64      	cmp	r3, #100	; 0x64
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e21f      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce6:	4b61      	ldr	r3, [pc, #388]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0xe8>
 8004cf2:	e014      	b.n	8004d1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7ff f808 	bl	8003d08 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7ff f804 	bl	8003d08 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	; 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e20b      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d0e:	4b57      	ldr	r3, [pc, #348]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1f0      	bne.n	8004cfc <HAL_RCC_OscConfig+0x110>
 8004d1a:	e000      	b.n	8004d1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d069      	beq.n	8004dfe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d2a:	4b50      	ldr	r3, [pc, #320]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00b      	beq.n	8004d4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d36:	4b4d      	ldr	r3, [pc, #308]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d11c      	bne.n	8004d7c <HAL_RCC_OscConfig+0x190>
 8004d42:	4b4a      	ldr	r3, [pc, #296]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d116      	bne.n	8004d7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4e:	4b47      	ldr	r3, [pc, #284]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <HAL_RCC_OscConfig+0x17a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d001      	beq.n	8004d66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e1df      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d66:	4b41      	ldr	r3, [pc, #260]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	493d      	ldr	r1, [pc, #244]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7a:	e040      	b.n	8004dfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d023      	beq.n	8004dcc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d84:	4b39      	ldr	r3, [pc, #228]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a38      	ldr	r2, [pc, #224]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004d8a:	f043 0301 	orr.w	r3, r3, #1
 8004d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d90:	f7fe ffba 	bl	8003d08 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d98:	f7fe ffb6 	bl	8003d08 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e1bd      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004daa:	4b30      	ldr	r3, [pc, #192]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f0      	beq.n	8004d98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db6:	4b2d      	ldr	r3, [pc, #180]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4929      	ldr	r1, [pc, #164]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	600b      	str	r3, [r1, #0]
 8004dca:	e018      	b.n	8004dfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dcc:	4b27      	ldr	r3, [pc, #156]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fe ff96 	bl	8003d08 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de0:	f7fe ff92 	bl	8003d08 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e199      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004df2:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d038      	beq.n	8004e7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d019      	beq.n	8004e46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e12:	4b16      	ldr	r3, [pc, #88]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e16:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1e:	f7fe ff73 	bl	8003d08 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e26:	f7fe ff6f 	bl	8003d08 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e176      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e38:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x23a>
 8004e44:	e01a      	b.n	8004e7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e46:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4a:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004e4c:	f023 0301 	bic.w	r3, r3, #1
 8004e50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e52:	f7fe ff59 	bl	8003d08 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e58:	e00a      	b.n	8004e70 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e5a:	f7fe ff55 	bl	8003d08 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d903      	bls.n	8004e70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e15c      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
 8004e6c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e70:	4b91      	ldr	r3, [pc, #580]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1ee      	bne.n	8004e5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80a4 	beq.w	8004fd2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e8a:	4b8b      	ldr	r3, [pc, #556]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10d      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e96:	4b88      	ldr	r3, [pc, #544]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	4a87      	ldr	r2, [pc, #540]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea2:	4b85      	ldr	r3, [pc, #532]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eb2:	4b82      	ldr	r3, [pc, #520]	; (80050bc <HAL_RCC_OscConfig+0x4d0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d118      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ebe:	4b7f      	ldr	r3, [pc, #508]	; (80050bc <HAL_RCC_OscConfig+0x4d0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a7e      	ldr	r2, [pc, #504]	; (80050bc <HAL_RCC_OscConfig+0x4d0>)
 8004ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eca:	f7fe ff1d 	bl	8003d08 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed2:	f7fe ff19 	bl	8003d08 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b64      	cmp	r3, #100	; 0x64
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e120      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ee4:	4b75      	ldr	r3, [pc, #468]	; (80050bc <HAL_RCC_OscConfig+0x4d0>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0f0      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCC_OscConfig+0x31a>
 8004ef8:	4b6f      	ldr	r3, [pc, #444]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	4a6e      	ldr	r2, [pc, #440]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	6713      	str	r3, [r2, #112]	; 0x70
 8004f04:	e02d      	b.n	8004f62 <HAL_RCC_OscConfig+0x376>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x33c>
 8004f0e:	4b6a      	ldr	r3, [pc, #424]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	4a69      	ldr	r2, [pc, #420]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f14:	f023 0301 	bic.w	r3, r3, #1
 8004f18:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1a:	4b67      	ldr	r3, [pc, #412]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1e:	4a66      	ldr	r2, [pc, #408]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f20:	f023 0304 	bic.w	r3, r3, #4
 8004f24:	6713      	str	r3, [r2, #112]	; 0x70
 8004f26:	e01c      	b.n	8004f62 <HAL_RCC_OscConfig+0x376>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b05      	cmp	r3, #5
 8004f2e:	d10c      	bne.n	8004f4a <HAL_RCC_OscConfig+0x35e>
 8004f30:	4b61      	ldr	r3, [pc, #388]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	4a60      	ldr	r2, [pc, #384]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f36:	f043 0304 	orr.w	r3, r3, #4
 8004f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f3c:	4b5e      	ldr	r3, [pc, #376]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	4a5d      	ldr	r2, [pc, #372]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	6713      	str	r3, [r2, #112]	; 0x70
 8004f48:	e00b      	b.n	8004f62 <HAL_RCC_OscConfig+0x376>
 8004f4a:	4b5b      	ldr	r3, [pc, #364]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	4a5a      	ldr	r2, [pc, #360]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	6713      	str	r3, [r2, #112]	; 0x70
 8004f56:	4b58      	ldr	r3, [pc, #352]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4a57      	ldr	r2, [pc, #348]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f5c:	f023 0304 	bic.w	r3, r3, #4
 8004f60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d015      	beq.n	8004f96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6a:	f7fe fecd 	bl	8003d08 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f70:	e00a      	b.n	8004f88 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f72:	f7fe fec9 	bl	8003d08 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e0ce      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f88:	4b4b      	ldr	r3, [pc, #300]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ee      	beq.n	8004f72 <HAL_RCC_OscConfig+0x386>
 8004f94:	e014      	b.n	8004fc0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f96:	f7fe feb7 	bl	8003d08 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f9c:	e00a      	b.n	8004fb4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9e:	f7fe feb3 	bl	8003d08 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e0b8      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb4:	4b40      	ldr	r3, [pc, #256]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ee      	bne.n	8004f9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d105      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fc6:	4b3c      	ldr	r3, [pc, #240]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	4a3b      	ldr	r2, [pc, #236]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80a4 	beq.w	8005124 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fdc:	4b36      	ldr	r3, [pc, #216]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 030c 	and.w	r3, r3, #12
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d06b      	beq.n	80050c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d149      	bne.n	8005084 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff0:	4b31      	ldr	r3, [pc, #196]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a30      	ldr	r2, [pc, #192]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8004ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7fe fe84 	bl	8003d08 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005004:	f7fe fe80 	bl	8003d08 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e087      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005016:	4b28      	ldr	r3, [pc, #160]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69da      	ldr	r2, [r3, #28]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	019b      	lsls	r3, r3, #6
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	085b      	lsrs	r3, r3, #1
 800503a:	3b01      	subs	r3, #1
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	061b      	lsls	r3, r3, #24
 8005046:	4313      	orrs	r3, r2
 8005048:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 800504a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800504e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005050:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a18      	ldr	r2, [pc, #96]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8005056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800505a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fe fe54 	bl	8003d08 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005064:	f7fe fe50 	bl	8003d08 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e057      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005076:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0x478>
 8005082:	e04f      	b.n	8005124 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a0b      	ldr	r2, [pc, #44]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 800508a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800508e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fe fe3a 	bl	8003d08 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005098:	f7fe fe36 	bl	8003d08 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e03d      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050aa:	4b03      	ldr	r3, [pc, #12]	; (80050b8 <HAL_RCC_OscConfig+0x4cc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x4ac>
 80050b6:	e035      	b.n	8005124 <HAL_RCC_OscConfig+0x538>
 80050b8:	40023800 	.word	0x40023800
 80050bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80050c0:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <HAL_RCC_OscConfig+0x544>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d028      	beq.n	8005120 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d8:	429a      	cmp	r2, r3
 80050da:	d121      	bne.n	8005120 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d11a      	bne.n	8005120 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050f0:	4013      	ands	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d111      	bne.n	8005120 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	085b      	lsrs	r3, r3, #1
 8005108:	3b01      	subs	r3, #1
 800510a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800510c:	429a      	cmp	r2, r3
 800510e:	d107      	bne.n	8005120 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800511c:	429a      	cmp	r2, r3
 800511e:	d001      	beq.n	8005124 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40023800 	.word	0x40023800

08005134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e0d0      	b.n	80052ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800514c:	4b6a      	ldr	r3, [pc, #424]	; (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d910      	bls.n	800517c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800515a:	4b67      	ldr	r3, [pc, #412]	; (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f023 020f 	bic.w	r2, r3, #15
 8005162:	4965      	ldr	r1, [pc, #404]	; (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	4313      	orrs	r3, r2
 8005168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800516a:	4b63      	ldr	r3, [pc, #396]	; (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d001      	beq.n	800517c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0b8      	b.n	80052ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d020      	beq.n	80051ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005194:	4b59      	ldr	r3, [pc, #356]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	4a58      	ldr	r2, [pc, #352]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 800519a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800519e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051ac:	4b53      	ldr	r3, [pc, #332]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	4a52      	ldr	r2, [pc, #328]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 80051b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b8:	4b50      	ldr	r3, [pc, #320]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	494d      	ldr	r1, [pc, #308]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d040      	beq.n	8005258 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d107      	bne.n	80051ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051de:	4b47      	ldr	r3, [pc, #284]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d115      	bne.n	8005216 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e07f      	b.n	80052ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d107      	bne.n	8005206 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f6:	4b41      	ldr	r3, [pc, #260]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d109      	bne.n	8005216 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e073      	b.n	80052ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005206:	4b3d      	ldr	r3, [pc, #244]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e06b      	b.n	80052ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005216:	4b39      	ldr	r3, [pc, #228]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f023 0203 	bic.w	r2, r3, #3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	4936      	ldr	r1, [pc, #216]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 8005224:	4313      	orrs	r3, r2
 8005226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005228:	f7fe fd6e 	bl	8003d08 <HAL_GetTick>
 800522c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522e:	e00a      	b.n	8005246 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005230:	f7fe fd6a 	bl	8003d08 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	f241 3288 	movw	r2, #5000	; 0x1388
 800523e:	4293      	cmp	r3, r2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e053      	b.n	80052ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005246:	4b2d      	ldr	r3, [pc, #180]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 020c 	and.w	r2, r3, #12
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	429a      	cmp	r2, r3
 8005256:	d1eb      	bne.n	8005230 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005258:	4b27      	ldr	r3, [pc, #156]	; (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 030f 	and.w	r3, r3, #15
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	429a      	cmp	r2, r3
 8005264:	d210      	bcs.n	8005288 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005266:	4b24      	ldr	r3, [pc, #144]	; (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f023 020f 	bic.w	r2, r3, #15
 800526e:	4922      	ldr	r1, [pc, #136]	; (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	4313      	orrs	r3, r2
 8005274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005276:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e032      	b.n	80052ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005294:	4b19      	ldr	r3, [pc, #100]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	4916      	ldr	r1, [pc, #88]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d009      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052b2:	4b12      	ldr	r3, [pc, #72]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	490e      	ldr	r1, [pc, #56]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052c6:	f000 f821 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80052ca:	4601      	mov	r1, r0
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	091b      	lsrs	r3, r3, #4
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <HAL_RCC_ClockConfig+0x1cc>)
 80052d8:	5cd3      	ldrb	r3, [r2, r3]
 80052da:	fa21 f303 	lsr.w	r3, r1, r3
 80052de:	4a09      	ldr	r2, [pc, #36]	; (8005304 <HAL_RCC_ClockConfig+0x1d0>)
 80052e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <HAL_RCC_ClockConfig+0x1d4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe fcca 	bl	8003c80 <HAL_InitTick>

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40023c00 	.word	0x40023c00
 80052fc:	40023800 	.word	0x40023800
 8005300:	0800d22c 	.word	0x0800d22c
 8005304:	20000014 	.word	0x20000014
 8005308:	20000018 	.word	0x20000018

0800530c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800530c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	607b      	str	r3, [r7, #4]
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	2300      	movs	r3, #0
 800531c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800531e:	2300      	movs	r3, #0
 8005320:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005322:	4b63      	ldr	r3, [pc, #396]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	2b04      	cmp	r3, #4
 800532c:	d007      	beq.n	800533e <HAL_RCC_GetSysClockFreq+0x32>
 800532e:	2b08      	cmp	r3, #8
 8005330:	d008      	beq.n	8005344 <HAL_RCC_GetSysClockFreq+0x38>
 8005332:	2b00      	cmp	r3, #0
 8005334:	f040 80b4 	bne.w	80054a0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005338:	4b5e      	ldr	r3, [pc, #376]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800533a:	60bb      	str	r3, [r7, #8]
      break;
 800533c:	e0b3      	b.n	80054a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800533e:	4b5d      	ldr	r3, [pc, #372]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005340:	60bb      	str	r3, [r7, #8]
      break;
 8005342:	e0b0      	b.n	80054a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005344:	4b5a      	ldr	r3, [pc, #360]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800534c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800534e:	4b58      	ldr	r3, [pc, #352]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d04a      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535a:	4b55      	ldr	r3, [pc, #340]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	099b      	lsrs	r3, r3, #6
 8005360:	f04f 0400 	mov.w	r4, #0
 8005364:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	ea03 0501 	and.w	r5, r3, r1
 8005370:	ea04 0602 	and.w	r6, r4, r2
 8005374:	4629      	mov	r1, r5
 8005376:	4632      	mov	r2, r6
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	f04f 0400 	mov.w	r4, #0
 8005380:	0154      	lsls	r4, r2, #5
 8005382:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005386:	014b      	lsls	r3, r1, #5
 8005388:	4619      	mov	r1, r3
 800538a:	4622      	mov	r2, r4
 800538c:	1b49      	subs	r1, r1, r5
 800538e:	eb62 0206 	sbc.w	r2, r2, r6
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	f04f 0400 	mov.w	r4, #0
 800539a:	0194      	lsls	r4, r2, #6
 800539c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053a0:	018b      	lsls	r3, r1, #6
 80053a2:	1a5b      	subs	r3, r3, r1
 80053a4:	eb64 0402 	sbc.w	r4, r4, r2
 80053a8:	f04f 0100 	mov.w	r1, #0
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	00e2      	lsls	r2, r4, #3
 80053b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053b6:	00d9      	lsls	r1, r3, #3
 80053b8:	460b      	mov	r3, r1
 80053ba:	4614      	mov	r4, r2
 80053bc:	195b      	adds	r3, r3, r5
 80053be:	eb44 0406 	adc.w	r4, r4, r6
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	02a2      	lsls	r2, r4, #10
 80053cc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80053d0:	0299      	lsls	r1, r3, #10
 80053d2:	460b      	mov	r3, r1
 80053d4:	4614      	mov	r4, r2
 80053d6:	4618      	mov	r0, r3
 80053d8:	4621      	mov	r1, r4
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f04f 0400 	mov.w	r4, #0
 80053e0:	461a      	mov	r2, r3
 80053e2:	4623      	mov	r3, r4
 80053e4:	f7fb fc58 	bl	8000c98 <__aeabi_uldivmod>
 80053e8:	4603      	mov	r3, r0
 80053ea:	460c      	mov	r4, r1
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e049      	b.n	8005484 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f0:	4b2f      	ldr	r3, [pc, #188]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	099b      	lsrs	r3, r3, #6
 80053f6:	f04f 0400 	mov.w	r4, #0
 80053fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	ea03 0501 	and.w	r5, r3, r1
 8005406:	ea04 0602 	and.w	r6, r4, r2
 800540a:	4629      	mov	r1, r5
 800540c:	4632      	mov	r2, r6
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	f04f 0400 	mov.w	r4, #0
 8005416:	0154      	lsls	r4, r2, #5
 8005418:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800541c:	014b      	lsls	r3, r1, #5
 800541e:	4619      	mov	r1, r3
 8005420:	4622      	mov	r2, r4
 8005422:	1b49      	subs	r1, r1, r5
 8005424:	eb62 0206 	sbc.w	r2, r2, r6
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	f04f 0400 	mov.w	r4, #0
 8005430:	0194      	lsls	r4, r2, #6
 8005432:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005436:	018b      	lsls	r3, r1, #6
 8005438:	1a5b      	subs	r3, r3, r1
 800543a:	eb64 0402 	sbc.w	r4, r4, r2
 800543e:	f04f 0100 	mov.w	r1, #0
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	00e2      	lsls	r2, r4, #3
 8005448:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800544c:	00d9      	lsls	r1, r3, #3
 800544e:	460b      	mov	r3, r1
 8005450:	4614      	mov	r4, r2
 8005452:	195b      	adds	r3, r3, r5
 8005454:	eb44 0406 	adc.w	r4, r4, r6
 8005458:	f04f 0100 	mov.w	r1, #0
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	02a2      	lsls	r2, r4, #10
 8005462:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005466:	0299      	lsls	r1, r3, #10
 8005468:	460b      	mov	r3, r1
 800546a:	4614      	mov	r4, r2
 800546c:	4618      	mov	r0, r3
 800546e:	4621      	mov	r1, r4
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f04f 0400 	mov.w	r4, #0
 8005476:	461a      	mov	r2, r3
 8005478:	4623      	mov	r3, r4
 800547a:	f7fb fc0d 	bl	8000c98 <__aeabi_uldivmod>
 800547e:	4603      	mov	r3, r0
 8005480:	460c      	mov	r4, r1
 8005482:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005484:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	0c1b      	lsrs	r3, r3, #16
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	3301      	adds	r3, #1
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	fbb2 f3f3 	udiv	r3, r2, r3
 800549c:	60bb      	str	r3, [r7, #8]
      break;
 800549e:	e002      	b.n	80054a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054a0:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80054a2:	60bb      	str	r3, [r7, #8]
      break;
 80054a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054a6:	68bb      	ldr	r3, [r7, #8]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b0:	40023800 	.word	0x40023800
 80054b4:	00f42400 	.word	0x00f42400

080054b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054bc:	4b03      	ldr	r3, [pc, #12]	; (80054cc <HAL_RCC_GetHCLKFreq+0x14>)
 80054be:	681b      	ldr	r3, [r3, #0]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	20000014 	.word	0x20000014

080054d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054d4:	f7ff fff0 	bl	80054b8 <HAL_RCC_GetHCLKFreq>
 80054d8:	4601      	mov	r1, r0
 80054da:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	0a9b      	lsrs	r3, r3, #10
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	4a03      	ldr	r2, [pc, #12]	; (80054f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054e6:	5cd3      	ldrb	r3, [r2, r3]
 80054e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40023800 	.word	0x40023800
 80054f4:	0800d23c 	.word	0x0800d23c

080054f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054fc:	f7ff ffdc 	bl	80054b8 <HAL_RCC_GetHCLKFreq>
 8005500:	4601      	mov	r1, r0
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	0b5b      	lsrs	r3, r3, #13
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4a03      	ldr	r2, [pc, #12]	; (800551c <HAL_RCC_GetPCLK2Freq+0x24>)
 800550e:	5cd3      	ldrb	r3, [r2, r3]
 8005510:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40023800 	.word	0x40023800
 800551c:	0800d23c 	.word	0x0800d23c

08005520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800552c:	2300      	movs	r3, #0
 800552e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d012      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005544:	4b65      	ldr	r3, [pc, #404]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	4a64      	ldr	r2, [pc, #400]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800554a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800554e:	6093      	str	r3, [r2, #8]
 8005550:	4b62      	ldr	r3, [pc, #392]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	4960      	ldr	r1, [pc, #384]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800555a:	4313      	orrs	r3, r2
 800555c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005566:	2301      	movs	r3, #1
 8005568:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d017      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005576:	4b59      	ldr	r3, [pc, #356]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800557c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005584:	4955      	ldr	r1, [pc, #340]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005594:	d101      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8005596:	2301      	movs	r3, #1
 8005598:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80055a2:	2301      	movs	r3, #1
 80055a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d017      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055b2:	4b4a      	ldr	r3, [pc, #296]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	4946      	ldr	r1, [pc, #280]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055d0:	d101      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80055d2:	2301      	movs	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80055de:	2301      	movs	r3, #1
 80055e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 808b 	beq.w	8005706 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055f0:	4b3a      	ldr	r3, [pc, #232]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	4a39      	ldr	r2, [pc, #228]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055fa:	6413      	str	r3, [r2, #64]	; 0x40
 80055fc:	4b37      	ldr	r3, [pc, #220]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005608:	4b35      	ldr	r3, [pc, #212]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a34      	ldr	r2, [pc, #208]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800560e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005614:	f7fe fb78 	bl	8003d08 <HAL_GetTick>
 8005618:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800561a:	e008      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561c:	f7fe fb74 	bl	8003d08 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b64      	cmp	r3, #100	; 0x64
 8005628:	d901      	bls.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e2bc      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800562e:	4b2c      	ldr	r3, [pc, #176]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800563a:	4b28      	ldr	r3, [pc, #160]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005642:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d035      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	429a      	cmp	r2, r3
 8005656:	d02e      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005658:	4b20      	ldr	r3, [pc, #128]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005660:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005662:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005666:	4a1d      	ldr	r2, [pc, #116]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800566e:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005672:	4a1a      	ldr	r2, [pc, #104]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005678:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800567a:	4a18      	ldr	r2, [pc, #96]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005680:	4b16      	ldr	r3, [pc, #88]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	d114      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fe fb3c 	bl	8003d08 <HAL_GetTick>
 8005690:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005692:	e00a      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005694:	f7fe fb38 	bl	8003d08 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d901      	bls.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e27e      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056aa:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0ee      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056c2:	d111      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056d2:	400b      	ands	r3, r1
 80056d4:	4901      	ldr	r1, [pc, #4]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]
 80056da:	e00b      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80056dc:	40023800 	.word	0x40023800
 80056e0:	40007000 	.word	0x40007000
 80056e4:	0ffffcff 	.word	0x0ffffcff
 80056e8:	4ba4      	ldr	r3, [pc, #656]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	4aa3      	ldr	r2, [pc, #652]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80056f2:	6093      	str	r3, [r2, #8]
 80056f4:	4ba1      	ldr	r3, [pc, #644]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005700:	499e      	ldr	r1, [pc, #632]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005702:	4313      	orrs	r3, r2
 8005704:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b00      	cmp	r3, #0
 8005710:	d010      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005712:	4b9a      	ldr	r3, [pc, #616]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005718:	4a98      	ldr	r2, [pc, #608]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800571a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800571e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005722:	4b96      	ldr	r3, [pc, #600]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005724:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	4993      	ldr	r1, [pc, #588]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005740:	4b8e      	ldr	r3, [pc, #568]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005746:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800574e:	498b      	ldr	r1, [pc, #556]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005762:	4b86      	ldr	r3, [pc, #536]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005768:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005770:	4982      	ldr	r1, [pc, #520]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005784:	4b7d      	ldr	r3, [pc, #500]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005792:	497a      	ldr	r1, [pc, #488]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057a6:	4b75      	ldr	r3, [pc, #468]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ac:	f023 0203 	bic.w	r2, r3, #3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	4971      	ldr	r1, [pc, #452]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057c8:	4b6c      	ldr	r3, [pc, #432]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ce:	f023 020c 	bic.w	r2, r3, #12
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	4969      	ldr	r1, [pc, #420]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057ea:	4b64      	ldr	r3, [pc, #400]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f8:	4960      	ldr	r1, [pc, #384]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800580c:	4b5b      	ldr	r3, [pc, #364]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005812:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581a:	4958      	ldr	r1, [pc, #352]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800582e:	4b53      	ldr	r3, [pc, #332]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005834:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583c:	494f      	ldr	r1, [pc, #316]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005850:	4b4a      	ldr	r3, [pc, #296]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005856:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800585e:	4947      	ldr	r1, [pc, #284]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005872:	4b42      	ldr	r3, [pc, #264]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005878:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005880:	493e      	ldr	r1, [pc, #248]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005894:	4b39      	ldr	r3, [pc, #228]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a2:	4936      	ldr	r1, [pc, #216]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d011      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80058b6:	4b31      	ldr	r3, [pc, #196]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c4:	492d      	ldr	r1, [pc, #180]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058d4:	d101      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80058d6:	2301      	movs	r3, #1
 80058d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058e6:	4b25      	ldr	r3, [pc, #148]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058f4:	4921      	ldr	r1, [pc, #132]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005908:	4b1c      	ldr	r3, [pc, #112]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800590a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005916:	4919      	ldr	r1, [pc, #100]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005918:	4313      	orrs	r3, r2
 800591a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800592a:	4b14      	ldr	r3, [pc, #80]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800592c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005930:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005938:	4910      	ldr	r1, [pc, #64]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d006      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 809d 	beq.w	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005954:	4b09      	ldr	r3, [pc, #36]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a08      	ldr	r2, [pc, #32]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800595a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800595e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005960:	f7fe f9d2 	bl	8003d08 <HAL_GetTick>
 8005964:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005966:	e00b      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005968:	f7fe f9ce 	bl	8003d08 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b64      	cmp	r3, #100	; 0x64
 8005974:	d904      	bls.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e116      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800597a:	bf00      	nop
 800597c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005980:	4b8b      	ldr	r3, [pc, #556]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1ed      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d017      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	2b00      	cmp	r3, #0
 800599e:	d113      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059a0:	4b83      	ldr	r3, [pc, #524]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80059a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059a6:	0e1b      	lsrs	r3, r3, #24
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	019a      	lsls	r2, r3, #6
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	061b      	lsls	r3, r3, #24
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	071b      	lsls	r3, r3, #28
 80059c0:	497b      	ldr	r1, [pc, #492]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d004      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059dc:	d00a      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d024      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059f2:	d11f      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059f4:	4b6e      	ldr	r3, [pc, #440]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80059f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059fa:	0f1b      	lsrs	r3, r3, #28
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	019a      	lsls	r2, r3, #6
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	061b      	lsls	r3, r3, #24
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	071b      	lsls	r3, r3, #28
 8005a14:	4966      	ldr	r1, [pc, #408]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a1c:	4b64      	ldr	r3, [pc, #400]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a22:	f023 021f 	bic.w	r2, r3, #31
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	4960      	ldr	r1, [pc, #384]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00d      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	019a      	lsls	r2, r3, #6
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	061b      	lsls	r3, r3, #24
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	071b      	lsls	r3, r3, #28
 8005a54:	4956      	ldr	r1, [pc, #344]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a5c:	4b54      	ldr	r3, [pc, #336]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a53      	ldr	r2, [pc, #332]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a68:	f7fe f94e 	bl	8003d08 <HAL_GetTick>
 8005a6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a70:	f7fe f94a 	bl	8003d08 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b64      	cmp	r3, #100	; 0x64
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e092      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a82:	4b4b      	ldr	r3, [pc, #300]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0f0      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	f040 8088 	bne.w	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a96:	4b46      	ldr	r3, [pc, #280]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a45      	ldr	r2, [pc, #276]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa2:	f7fe f931 	bl	8003d08 <HAL_GetTick>
 8005aa6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005aa8:	e008      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005aaa:	f7fe f92d 	bl	8003d08 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b64      	cmp	r3, #100	; 0x64
 8005ab6:	d901      	bls.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e075      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005abc:	4b3c      	ldr	r3, [pc, #240]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ac8:	d0ef      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d024      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d120      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005af2:	4b2f      	ldr	r3, [pc, #188]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af8:	0c1b      	lsrs	r3, r3, #16
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	019a      	lsls	r2, r3, #6
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	041b      	lsls	r3, r3, #16
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	061b      	lsls	r3, r3, #24
 8005b12:	4927      	ldr	r1, [pc, #156]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b1a:	4b25      	ldr	r3, [pc, #148]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	021b      	lsls	r3, r3, #8
 8005b2c:	4920      	ldr	r1, [pc, #128]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d018      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b48:	d113      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b4a:	4b19      	ldr	r3, [pc, #100]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b50:	0e1b      	lsrs	r3, r3, #24
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	019a      	lsls	r2, r3, #6
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	041b      	lsls	r3, r3, #16
 8005b64:	431a      	orrs	r2, r3
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	061b      	lsls	r3, r3, #24
 8005b6a:	4911      	ldr	r1, [pc, #68]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b72:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a0e      	ldr	r2, [pc, #56]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b7e:	f7fe f8c3 	bl	8003d08 <HAL_GetTick>
 8005b82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b84:	e008      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b86:	f7fe f8bf 	bl	8003d08 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b64      	cmp	r3, #100	; 0x64
 8005b92:	d901      	bls.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e007      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b98:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ba4:	d1ef      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3720      	adds	r7, #32
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40023800 	.word	0x40023800

08005bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e049      	b.n	8005c5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fd fc64 	bl	80034a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	f000 fdd8 	bl	80067a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d001      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e054      	b.n	8005d26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a26      	ldr	r2, [pc, #152]	; (8005d34 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d022      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x80>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca6:	d01d      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x80>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a22      	ldr	r2, [pc, #136]	; (8005d38 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d018      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x80>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a21      	ldr	r2, [pc, #132]	; (8005d3c <HAL_TIM_Base_Start_IT+0xd8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d013      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x80>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <HAL_TIM_Base_Start_IT+0xdc>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00e      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x80>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1e      	ldr	r2, [pc, #120]	; (8005d44 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d009      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x80>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1c      	ldr	r2, [pc, #112]	; (8005d48 <HAL_TIM_Base_Start_IT+0xe4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d004      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x80>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1b      	ldr	r2, [pc, #108]	; (8005d4c <HAL_TIM_Base_Start_IT+0xe8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d115      	bne.n	8005d10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	4b19      	ldr	r3, [pc, #100]	; (8005d50 <HAL_TIM_Base_Start_IT+0xec>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b06      	cmp	r3, #6
 8005cf4:	d015      	beq.n	8005d22 <HAL_TIM_Base_Start_IT+0xbe>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfc:	d011      	beq.n	8005d22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0201 	orr.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0e:	e008      	b.n	8005d22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	e000      	b.n	8005d24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40010000 	.word	0x40010000
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40000c00 	.word	0x40000c00
 8005d44:	40010400 	.word	0x40010400
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40001800 	.word	0x40001800
 8005d50:	00010007 	.word	0x00010007

08005d54 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e049      	b.n	8005dfa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fd fc06 	bl	800358c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f000 fd08 	bl	80067a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_IC_Start_IT+0x1a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	e023      	b.n	8005e66 <HAL_TIM_IC_Start_IT+0x62>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_IC_Start_IT+0x2a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	e01b      	b.n	8005e66 <HAL_TIM_IC_Start_IT+0x62>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d104      	bne.n	8005e3e <HAL_TIM_IC_Start_IT+0x3a>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	e013      	b.n	8005e66 <HAL_TIM_IC_Start_IT+0x62>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b0c      	cmp	r3, #12
 8005e42:	d104      	bne.n	8005e4e <HAL_TIM_IC_Start_IT+0x4a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	e00b      	b.n	8005e66 <HAL_TIM_IC_Start_IT+0x62>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d104      	bne.n	8005e5e <HAL_TIM_IC_Start_IT+0x5a>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	e003      	b.n	8005e66 <HAL_TIM_IC_Start_IT+0x62>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d104      	bne.n	8005e78 <HAL_TIM_IC_Start_IT+0x74>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	e013      	b.n	8005ea0 <HAL_TIM_IC_Start_IT+0x9c>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d104      	bne.n	8005e88 <HAL_TIM_IC_Start_IT+0x84>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	e00b      	b.n	8005ea0 <HAL_TIM_IC_Start_IT+0x9c>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d104      	bne.n	8005e98 <HAL_TIM_IC_Start_IT+0x94>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	e003      	b.n	8005ea0 <HAL_TIM_IC_Start_IT+0x9c>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d102      	bne.n	8005eae <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ea8:	7bbb      	ldrb	r3, [r7, #14]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d001      	beq.n	8005eb2 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e0dd      	b.n	800606e <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIM_IC_Start_IT+0xbe>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec0:	e023      	b.n	8005f0a <HAL_TIM_IC_Start_IT+0x106>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d104      	bne.n	8005ed2 <HAL_TIM_IC_Start_IT+0xce>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed0:	e01b      	b.n	8005f0a <HAL_TIM_IC_Start_IT+0x106>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d104      	bne.n	8005ee2 <HAL_TIM_IC_Start_IT+0xde>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee0:	e013      	b.n	8005f0a <HAL_TIM_IC_Start_IT+0x106>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b0c      	cmp	r3, #12
 8005ee6:	d104      	bne.n	8005ef2 <HAL_TIM_IC_Start_IT+0xee>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef0:	e00b      	b.n	8005f0a <HAL_TIM_IC_Start_IT+0x106>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b10      	cmp	r3, #16
 8005ef6:	d104      	bne.n	8005f02 <HAL_TIM_IC_Start_IT+0xfe>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f00:	e003      	b.n	8005f0a <HAL_TIM_IC_Start_IT+0x106>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d104      	bne.n	8005f1a <HAL_TIM_IC_Start_IT+0x116>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f18:	e013      	b.n	8005f42 <HAL_TIM_IC_Start_IT+0x13e>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d104      	bne.n	8005f2a <HAL_TIM_IC_Start_IT+0x126>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f28:	e00b      	b.n	8005f42 <HAL_TIM_IC_Start_IT+0x13e>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d104      	bne.n	8005f3a <HAL_TIM_IC_Start_IT+0x136>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f38:	e003      	b.n	8005f42 <HAL_TIM_IC_Start_IT+0x13e>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b0c      	cmp	r3, #12
 8005f46:	d841      	bhi.n	8005fcc <HAL_TIM_IC_Start_IT+0x1c8>
 8005f48:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <HAL_TIM_IC_Start_IT+0x14c>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f85 	.word	0x08005f85
 8005f54:	08005fcd 	.word	0x08005fcd
 8005f58:	08005fcd 	.word	0x08005fcd
 8005f5c:	08005fcd 	.word	0x08005fcd
 8005f60:	08005f97 	.word	0x08005f97
 8005f64:	08005fcd 	.word	0x08005fcd
 8005f68:	08005fcd 	.word	0x08005fcd
 8005f6c:	08005fcd 	.word	0x08005fcd
 8005f70:	08005fa9 	.word	0x08005fa9
 8005f74:	08005fcd 	.word	0x08005fcd
 8005f78:	08005fcd 	.word	0x08005fcd
 8005f7c:	08005fcd 	.word	0x08005fcd
 8005f80:	08005fbb 	.word	0x08005fbb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0202 	orr.w	r2, r2, #2
 8005f92:	60da      	str	r2, [r3, #12]
      break;
 8005f94:	e01b      	b.n	8005fce <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0204 	orr.w	r2, r2, #4
 8005fa4:	60da      	str	r2, [r3, #12]
      break;
 8005fa6:	e012      	b.n	8005fce <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0208 	orr.w	r2, r2, #8
 8005fb6:	60da      	str	r2, [r3, #12]
      break;
 8005fb8:	e009      	b.n	8005fce <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f042 0210 	orr.w	r2, r2, #16
 8005fc8:	60da      	str	r2, [r3, #12]
      break;
 8005fca:	e000      	b.n	8005fce <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8005fcc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fe4a 	bl	8006c70 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a25      	ldr	r2, [pc, #148]	; (8006078 <HAL_TIM_IC_Start_IT+0x274>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d022      	beq.n	800602c <HAL_TIM_IC_Start_IT+0x228>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fee:	d01d      	beq.n	800602c <HAL_TIM_IC_Start_IT+0x228>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a21      	ldr	r2, [pc, #132]	; (800607c <HAL_TIM_IC_Start_IT+0x278>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d018      	beq.n	800602c <HAL_TIM_IC_Start_IT+0x228>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a20      	ldr	r2, [pc, #128]	; (8006080 <HAL_TIM_IC_Start_IT+0x27c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <HAL_TIM_IC_Start_IT+0x228>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a1e      	ldr	r2, [pc, #120]	; (8006084 <HAL_TIM_IC_Start_IT+0x280>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00e      	beq.n	800602c <HAL_TIM_IC_Start_IT+0x228>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a1d      	ldr	r2, [pc, #116]	; (8006088 <HAL_TIM_IC_Start_IT+0x284>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d009      	beq.n	800602c <HAL_TIM_IC_Start_IT+0x228>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a1b      	ldr	r2, [pc, #108]	; (800608c <HAL_TIM_IC_Start_IT+0x288>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d004      	beq.n	800602c <HAL_TIM_IC_Start_IT+0x228>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a1a      	ldr	r2, [pc, #104]	; (8006090 <HAL_TIM_IC_Start_IT+0x28c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d115      	bne.n	8006058 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	4b18      	ldr	r3, [pc, #96]	; (8006094 <HAL_TIM_IC_Start_IT+0x290>)
 8006034:	4013      	ands	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b06      	cmp	r3, #6
 800603c:	d015      	beq.n	800606a <HAL_TIM_IC_Start_IT+0x266>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006044:	d011      	beq.n	800606a <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0201 	orr.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006056:	e008      	b.n	800606a <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0201 	orr.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	e000      	b.n	800606c <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40010000 	.word	0x40010000
 800607c:	40000400 	.word	0x40000400
 8006080:	40000800 	.word	0x40000800
 8006084:	40000c00 	.word	0x40000c00
 8006088:	40010400 	.word	0x40010400
 800608c:	40014000 	.word	0x40014000
 8006090:	40001800 	.word	0x40001800
 8006094:	00010007 	.word	0x00010007

08006098 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b0c      	cmp	r3, #12
 80060a6:	d841      	bhi.n	800612c <HAL_TIM_IC_Stop_IT+0x94>
 80060a8:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <HAL_TIM_IC_Stop_IT+0x18>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060e5 	.word	0x080060e5
 80060b4:	0800612d 	.word	0x0800612d
 80060b8:	0800612d 	.word	0x0800612d
 80060bc:	0800612d 	.word	0x0800612d
 80060c0:	080060f7 	.word	0x080060f7
 80060c4:	0800612d 	.word	0x0800612d
 80060c8:	0800612d 	.word	0x0800612d
 80060cc:	0800612d 	.word	0x0800612d
 80060d0:	08006109 	.word	0x08006109
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	0800612d 	.word	0x0800612d
 80060dc:	0800612d 	.word	0x0800612d
 80060e0:	0800611b 	.word	0x0800611b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0202 	bic.w	r2, r2, #2
 80060f2:	60da      	str	r2, [r3, #12]
      break;
 80060f4:	e01b      	b.n	800612e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0204 	bic.w	r2, r2, #4
 8006104:	60da      	str	r2, [r3, #12]
      break;
 8006106:	e012      	b.n	800612e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0208 	bic.w	r2, r2, #8
 8006116:	60da      	str	r2, [r3, #12]
      break;
 8006118:	e009      	b.n	800612e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0210 	bic.w	r2, r2, #16
 8006128:	60da      	str	r2, [r3, #12]
      break;
 800612a:	e000      	b.n	800612e <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 800612c:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2200      	movs	r2, #0
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fd9a 	bl	8006c70 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6a1a      	ldr	r2, [r3, #32]
 8006142:	f241 1311 	movw	r3, #4369	; 0x1111
 8006146:	4013      	ands	r3, r2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10f      	bne.n	800616c <HAL_TIM_IC_Stop_IT+0xd4>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a1a      	ldr	r2, [r3, #32]
 8006152:	f240 4344 	movw	r3, #1092	; 0x444
 8006156:	4013      	ands	r3, r2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d107      	bne.n	800616c <HAL_TIM_IC_Stop_IT+0xd4>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0201 	bic.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <HAL_TIM_IC_Stop_IT+0xe4>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800617a:	e023      	b.n	80061c4 <HAL_TIM_IC_Stop_IT+0x12c>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b04      	cmp	r3, #4
 8006180:	d104      	bne.n	800618c <HAL_TIM_IC_Stop_IT+0xf4>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800618a:	e01b      	b.n	80061c4 <HAL_TIM_IC_Stop_IT+0x12c>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b08      	cmp	r3, #8
 8006190:	d104      	bne.n	800619c <HAL_TIM_IC_Stop_IT+0x104>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800619a:	e013      	b.n	80061c4 <HAL_TIM_IC_Stop_IT+0x12c>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b0c      	cmp	r3, #12
 80061a0:	d104      	bne.n	80061ac <HAL_TIM_IC_Stop_IT+0x114>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061aa:	e00b      	b.n	80061c4 <HAL_TIM_IC_Stop_IT+0x12c>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b10      	cmp	r3, #16
 80061b0:	d104      	bne.n	80061bc <HAL_TIM_IC_Stop_IT+0x124>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061ba:	e003      	b.n	80061c4 <HAL_TIM_IC_Stop_IT+0x12c>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <HAL_TIM_IC_Stop_IT+0x13c>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061d2:	e013      	b.n	80061fc <HAL_TIM_IC_Stop_IT+0x164>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d104      	bne.n	80061e4 <HAL_TIM_IC_Stop_IT+0x14c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061e2:	e00b      	b.n	80061fc <HAL_TIM_IC_Stop_IT+0x164>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d104      	bne.n	80061f4 <HAL_TIM_IC_Stop_IT+0x15c>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061f2:	e003      	b.n	80061fc <HAL_TIM_IC_Stop_IT+0x164>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop

08006208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b02      	cmp	r3, #2
 800621c:	d122      	bne.n	8006264 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b02      	cmp	r3, #2
 800622a:	d11b      	bne.n	8006264 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f06f 0202 	mvn.w	r2, #2
 8006234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fb fcfa 	bl	8001c44 <HAL_TIM_IC_CaptureCallback>
 8006250:	e005      	b.n	800625e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fa8a 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fa91 	bl	8006780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b04      	cmp	r3, #4
 8006270:	d122      	bne.n	80062b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b04      	cmp	r3, #4
 800627e:	d11b      	bne.n	80062b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0204 	mvn.w	r2, #4
 8006288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2202      	movs	r2, #2
 800628e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fb fcd0 	bl	8001c44 <HAL_TIM_IC_CaptureCallback>
 80062a4:	e005      	b.n	80062b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa60 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fa67 	bl	8006780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b08      	cmp	r3, #8
 80062c4:	d122      	bne.n	800630c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0308 	and.w	r3, r3, #8
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d11b      	bne.n	800630c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0208 	mvn.w	r2, #8
 80062dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2204      	movs	r2, #4
 80062e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fb fca6 	bl	8001c44 <HAL_TIM_IC_CaptureCallback>
 80062f8:	e005      	b.n	8006306 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fa36 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fa3d 	bl	8006780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0310 	and.w	r3, r3, #16
 8006316:	2b10      	cmp	r3, #16
 8006318:	d122      	bne.n	8006360 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b10      	cmp	r3, #16
 8006326:	d11b      	bne.n	8006360 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0210 	mvn.w	r2, #16
 8006330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2208      	movs	r2, #8
 8006336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fb fc7c 	bl	8001c44 <HAL_TIM_IC_CaptureCallback>
 800634c:	e005      	b.n	800635a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fa0c 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fa13 	bl	8006780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b01      	cmp	r3, #1
 800636c:	d10e      	bne.n	800638c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b01      	cmp	r3, #1
 800637a:	d107      	bne.n	800638c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0201 	mvn.w	r2, #1
 8006384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7fb fbf4 	bl	8001b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006396:	2b80      	cmp	r3, #128	; 0x80
 8006398:	d10e      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a4:	2b80      	cmp	r3, #128	; 0x80
 80063a6:	d107      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fd1a 	bl	8006dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c6:	d10e      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d2:	2b80      	cmp	r3, #128	; 0x80
 80063d4:	d107      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fd0d 	bl	8006e00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	d10e      	bne.n	8006412 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b40      	cmp	r3, #64	; 0x40
 8006400:	d107      	bne.n	8006412 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800640a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f9c1 	bl	8006794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b20      	cmp	r3, #32
 800641e:	d10e      	bne.n	800643e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b20      	cmp	r3, #32
 800642c:	d107      	bne.n	800643e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f06f 0220 	mvn.w	r2, #32
 8006436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fccd 	bl	8006dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800643e:	bf00      	nop
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_TIM_IC_ConfigChannel+0x1a>
 800645c:	2302      	movs	r3, #2
 800645e:	e082      	b.n	8006566 <HAL_TIM_IC_ConfigChannel+0x120>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d11b      	bne.n	80064a6 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6819      	ldr	r1, [r3, #0]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f000 fa33 	bl	80068e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	699a      	ldr	r2, [r3, #24]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 020c 	bic.w	r2, r2, #12
 8006490:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6999      	ldr	r1, [r3, #24]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	619a      	str	r2, [r3, #24]
 80064a4:	e05a      	b.n	800655c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d11c      	bne.n	80064e6 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6818      	ldr	r0, [r3, #0]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	6819      	ldr	r1, [r3, #0]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f000 fab7 	bl	8006a2e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80064ce:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6999      	ldr	r1, [r3, #24]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	021a      	lsls	r2, r3, #8
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	619a      	str	r2, [r3, #24]
 80064e4:	e03a      	b.n	800655c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d11b      	bne.n	8006524 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6818      	ldr	r0, [r3, #0]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	6819      	ldr	r1, [r3, #0]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f000 fb04 	bl	8006b08 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69da      	ldr	r2, [r3, #28]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 020c 	bic.w	r2, r2, #12
 800650e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	69d9      	ldr	r1, [r3, #28]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	61da      	str	r2, [r3, #28]
 8006522:	e01b      	b.n	800655c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	6819      	ldr	r1, [r3, #0]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f000 fb24 	bl	8006b80 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69da      	ldr	r2, [r3, #28]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006546:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69d9      	ldr	r1, [r3, #28]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	021a      	lsls	r2, r3, #8
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_TIM_ConfigClockSource+0x18>
 8006584:	2302      	movs	r3, #2
 8006586:	e0a6      	b.n	80066d6 <HAL_TIM_ConfigClockSource+0x166>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4b4f      	ldr	r3, [pc, #316]	; (80066e0 <HAL_TIM_ConfigClockSource+0x170>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	d067      	beq.n	8006690 <HAL_TIM_ConfigClockSource+0x120>
 80065c0:	2b40      	cmp	r3, #64	; 0x40
 80065c2:	d80b      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x6c>
 80065c4:	2b10      	cmp	r3, #16
 80065c6:	d073      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0x140>
 80065c8:	2b10      	cmp	r3, #16
 80065ca:	d802      	bhi.n	80065d2 <HAL_TIM_ConfigClockSource+0x62>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d06f      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80065d0:	e078      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d06c      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0x140>
 80065d6:	2b30      	cmp	r3, #48	; 0x30
 80065d8:	d06a      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80065da:	e073      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80065dc:	2b70      	cmp	r3, #112	; 0x70
 80065de:	d00d      	beq.n	80065fc <HAL_TIM_ConfigClockSource+0x8c>
 80065e0:	2b70      	cmp	r3, #112	; 0x70
 80065e2:	d804      	bhi.n	80065ee <HAL_TIM_ConfigClockSource+0x7e>
 80065e4:	2b50      	cmp	r3, #80	; 0x50
 80065e6:	d033      	beq.n	8006650 <HAL_TIM_ConfigClockSource+0xe0>
 80065e8:	2b60      	cmp	r3, #96	; 0x60
 80065ea:	d041      	beq.n	8006670 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80065ec:	e06a      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80065ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f2:	d066      	beq.n	80066c2 <HAL_TIM_ConfigClockSource+0x152>
 80065f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f8:	d017      	beq.n	800662a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80065fa:	e063      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	6899      	ldr	r1, [r3, #8]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f000 fb10 	bl	8006c30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800661e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	609a      	str	r2, [r3, #8]
      break;
 8006628:	e04c      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6899      	ldr	r1, [r3, #8]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f000 faf9 	bl	8006c30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800664c:	609a      	str	r2, [r3, #8]
      break;
 800664e:	e039      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	6859      	ldr	r1, [r3, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	461a      	mov	r2, r3
 800665e:	f000 f9b7 	bl	80069d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2150      	movs	r1, #80	; 0x50
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fac6 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 800666e:	e029      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	6859      	ldr	r1, [r3, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	461a      	mov	r2, r3
 800667e:	f000 fa13 	bl	8006aa8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2160      	movs	r1, #96	; 0x60
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fab6 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 800668e:	e019      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	6859      	ldr	r1, [r3, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	461a      	mov	r2, r3
 800669e:	f000 f997 	bl	80069d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2140      	movs	r1, #64	; 0x40
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 faa6 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 80066ae:	e009      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4619      	mov	r1, r3
 80066ba:	4610      	mov	r0, r2
 80066bc:	f000 fa9d 	bl	8006bfa <TIM_ITRx_SetConfig>
        break;
 80066c0:	e000      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80066c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	fffeff88 	.word	0xfffeff88

080066e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b0c      	cmp	r3, #12
 80066f6:	d831      	bhi.n	800675c <HAL_TIM_ReadCapturedValue+0x78>
 80066f8:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <HAL_TIM_ReadCapturedValue+0x1c>)
 80066fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fe:	bf00      	nop
 8006700:	08006735 	.word	0x08006735
 8006704:	0800675d 	.word	0x0800675d
 8006708:	0800675d 	.word	0x0800675d
 800670c:	0800675d 	.word	0x0800675d
 8006710:	0800673f 	.word	0x0800673f
 8006714:	0800675d 	.word	0x0800675d
 8006718:	0800675d 	.word	0x0800675d
 800671c:	0800675d 	.word	0x0800675d
 8006720:	08006749 	.word	0x08006749
 8006724:	0800675d 	.word	0x0800675d
 8006728:	0800675d 	.word	0x0800675d
 800672c:	0800675d 	.word	0x0800675d
 8006730:	08006753 	.word	0x08006753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673a:	60fb      	str	r3, [r7, #12]

      break;
 800673c:	e00f      	b.n	800675e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	60fb      	str	r3, [r7, #12]

      break;
 8006746:	e00a      	b.n	800675e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674e:	60fb      	str	r3, [r7, #12]

      break;
 8006750:	e005      	b.n	800675e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	60fb      	str	r3, [r7, #12]

      break;
 800675a:	e000      	b.n	800675e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800675c:	bf00      	nop
  }

  return tmpreg;
 800675e:	68fb      	ldr	r3, [r7, #12]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a40      	ldr	r2, [pc, #256]	; (80068bc <TIM_Base_SetConfig+0x114>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d013      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c6:	d00f      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a3d      	ldr	r2, [pc, #244]	; (80068c0 <TIM_Base_SetConfig+0x118>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00b      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a3c      	ldr	r2, [pc, #240]	; (80068c4 <TIM_Base_SetConfig+0x11c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d007      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a3b      	ldr	r2, [pc, #236]	; (80068c8 <TIM_Base_SetConfig+0x120>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d003      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a3a      	ldr	r2, [pc, #232]	; (80068cc <TIM_Base_SetConfig+0x124>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d108      	bne.n	80067fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a2f      	ldr	r2, [pc, #188]	; (80068bc <TIM_Base_SetConfig+0x114>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d02b      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006808:	d027      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2c      	ldr	r2, [pc, #176]	; (80068c0 <TIM_Base_SetConfig+0x118>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d023      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a2b      	ldr	r2, [pc, #172]	; (80068c4 <TIM_Base_SetConfig+0x11c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01f      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2a      	ldr	r2, [pc, #168]	; (80068c8 <TIM_Base_SetConfig+0x120>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d01b      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a29      	ldr	r2, [pc, #164]	; (80068cc <TIM_Base_SetConfig+0x124>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d017      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a28      	ldr	r2, [pc, #160]	; (80068d0 <TIM_Base_SetConfig+0x128>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d013      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a27      	ldr	r2, [pc, #156]	; (80068d4 <TIM_Base_SetConfig+0x12c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00f      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a26      	ldr	r2, [pc, #152]	; (80068d8 <TIM_Base_SetConfig+0x130>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00b      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a25      	ldr	r2, [pc, #148]	; (80068dc <TIM_Base_SetConfig+0x134>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d007      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a24      	ldr	r2, [pc, #144]	; (80068e0 <TIM_Base_SetConfig+0x138>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d003      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a23      	ldr	r2, [pc, #140]	; (80068e4 <TIM_Base_SetConfig+0x13c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d108      	bne.n	800686c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a0a      	ldr	r2, [pc, #40]	; (80068bc <TIM_Base_SetConfig+0x114>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d003      	beq.n	80068a0 <TIM_Base_SetConfig+0xf8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a0c      	ldr	r2, [pc, #48]	; (80068cc <TIM_Base_SetConfig+0x124>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d103      	bne.n	80068a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	615a      	str	r2, [r3, #20]
}
 80068ae:	bf00      	nop
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40000400 	.word	0x40000400
 80068c4:	40000800 	.word	0x40000800
 80068c8:	40000c00 	.word	0x40000c00
 80068cc:	40010400 	.word	0x40010400
 80068d0:	40014000 	.word	0x40014000
 80068d4:	40014400 	.word	0x40014400
 80068d8:	40014800 	.word	0x40014800
 80068dc:	40001800 	.word	0x40001800
 80068e0:	40001c00 	.word	0x40001c00
 80068e4:	40002000 	.word	0x40002000

080068e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f023 0201 	bic.w	r2, r3, #1
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4a28      	ldr	r2, [pc, #160]	; (80069b4 <TIM_TI1_SetConfig+0xcc>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d01b      	beq.n	800694e <TIM_TI1_SetConfig+0x66>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691c:	d017      	beq.n	800694e <TIM_TI1_SetConfig+0x66>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4a25      	ldr	r2, [pc, #148]	; (80069b8 <TIM_TI1_SetConfig+0xd0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d013      	beq.n	800694e <TIM_TI1_SetConfig+0x66>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4a24      	ldr	r2, [pc, #144]	; (80069bc <TIM_TI1_SetConfig+0xd4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00f      	beq.n	800694e <TIM_TI1_SetConfig+0x66>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4a23      	ldr	r2, [pc, #140]	; (80069c0 <TIM_TI1_SetConfig+0xd8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00b      	beq.n	800694e <TIM_TI1_SetConfig+0x66>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4a22      	ldr	r2, [pc, #136]	; (80069c4 <TIM_TI1_SetConfig+0xdc>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <TIM_TI1_SetConfig+0x66>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4a21      	ldr	r2, [pc, #132]	; (80069c8 <TIM_TI1_SetConfig+0xe0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_TI1_SetConfig+0x66>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4a20      	ldr	r2, [pc, #128]	; (80069cc <TIM_TI1_SetConfig+0xe4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d101      	bne.n	8006952 <TIM_TI1_SetConfig+0x6a>
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <TIM_TI1_SetConfig+0x6c>
 8006952:	2300      	movs	r3, #0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d008      	beq.n	800696a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f023 0303 	bic.w	r3, r3, #3
 800695e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	e003      	b.n	8006972 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	b2db      	uxtb	r3, r3
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f023 030a 	bic.w	r3, r3, #10
 800698c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f003 030a 	and.w	r3, r3, #10
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	621a      	str	r2, [r3, #32]
}
 80069a6:	bf00      	nop
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40000400 	.word	0x40000400
 80069bc:	40000800 	.word	0x40000800
 80069c0:	40000c00 	.word	0x40000c00
 80069c4:	40010400 	.word	0x40010400
 80069c8:	40014000 	.word	0x40014000
 80069cc:	40001800 	.word	0x40001800

080069d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	f023 0201 	bic.w	r2, r3, #1
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f023 030a 	bic.w	r3, r3, #10
 8006a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b087      	sub	sp, #28
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
 8006a3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	f023 0210 	bic.w	r2, r3, #16
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	031b      	lsls	r3, r3, #12
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	621a      	str	r2, [r3, #32]
}
 8006a9c:	bf00      	nop
 8006a9e:	371c      	adds	r7, #28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	f023 0210 	bic.w	r2, r3, #16
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ad2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	031b      	lsls	r3, r3, #12
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ae4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	621a      	str	r2, [r3, #32]
}
 8006afc:	bf00      	nop
 8006afe:	371c      	adds	r7, #28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f023 0303 	bic.w	r3, r3, #3
 8006b34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006b58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	621a      	str	r2, [r3, #32]
}
 8006b74:	bf00      	nop
 8006b76:	371c      	adds	r7, #28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	021b      	lsls	r3, r3, #8
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	031b      	lsls	r3, r3, #12
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006bd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	031b      	lsls	r3, r3, #12
 8006bd8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	621a      	str	r2, [r3, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f043 0307 	orr.w	r3, r3, #7
 8006c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	609a      	str	r2, [r3, #8]
}
 8006c24:	bf00      	nop
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	021a      	lsls	r2, r3, #8
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	431a      	orrs	r2, r3
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	609a      	str	r2, [r3, #8]
}
 8006c64:	bf00      	nop
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f003 031f 	and.w	r3, r3, #31
 8006c82:	2201      	movs	r2, #1
 8006c84:	fa02 f303 	lsl.w	r3, r2, r3
 8006c88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a1a      	ldr	r2, [r3, #32]
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	43db      	mvns	r3, r3
 8006c92:	401a      	ands	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a1a      	ldr	r2, [r3, #32]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	621a      	str	r2, [r3, #32]
}
 8006cae:	bf00      	nop
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
	...

08006cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d101      	bne.n	8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e06d      	b.n	8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a30      	ldr	r2, [pc, #192]	; (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d004      	beq.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a2f      	ldr	r2, [pc, #188]	; (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d108      	bne.n	8006d1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a20      	ldr	r2, [pc, #128]	; (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d022      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d46:	d01d      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1d      	ldr	r2, [pc, #116]	; (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d018      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a1c      	ldr	r2, [pc, #112]	; (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d013      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1a      	ldr	r2, [pc, #104]	; (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00e      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a15      	ldr	r2, [pc, #84]	; (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d009      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a16      	ldr	r2, [pc, #88]	; (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d004      	beq.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a15      	ldr	r2, [pc, #84]	; (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d10c      	bne.n	8006d9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	40010000 	.word	0x40010000
 8006dc0:	40010400 	.word	0x40010400
 8006dc4:	40000400 	.word	0x40000400
 8006dc8:	40000800 	.word	0x40000800
 8006dcc:	40000c00 	.word	0x40000c00
 8006dd0:	40014000 	.word	0x40014000
 8006dd4:	40001800 	.word	0x40001800

08006dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e040      	b.n	8006ea8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fc fbf4 	bl	8003624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2224      	movs	r2, #36	; 0x24
 8006e40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0201 	bic.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fb72 	bl	800753c <UART_SetConfig>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e022      	b.n	8006ea8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fdc6 	bl	80079fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fe4d 	bl	8007b40 <UART_CheckIdleState>
 8006ea6:	4603      	mov	r3, r0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	; 0x28
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	f040 8081 	bne.w	8006fcc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <HAL_UART_Transmit+0x26>
 8006ed0:	88fb      	ldrh	r3, [r7, #6]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e079      	b.n	8006fce <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_UART_Transmit+0x38>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e072      	b.n	8006fce <HAL_UART_Transmit+0x11e>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2221      	movs	r2, #33	; 0x21
 8006efc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006efe:	f7fc ff03 	bl	8003d08 <HAL_GetTick>
 8006f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	88fa      	ldrh	r2, [r7, #6]
 8006f08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	88fa      	ldrh	r2, [r7, #6]
 8006f10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1c:	d108      	bne.n	8006f30 <HAL_UART_Transmit+0x80>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d104      	bne.n	8006f30 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	61bb      	str	r3, [r7, #24]
 8006f2e:	e003      	b.n	8006f38 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006f40:	e02c      	b.n	8006f9c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2180      	movs	r1, #128	; 0x80
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 fe2a 	bl	8007ba6 <UART_WaitOnFlagUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e038      	b.n	8006fce <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10b      	bne.n	8006f7a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	3302      	adds	r3, #2
 8006f76:	61bb      	str	r3, [r7, #24]
 8006f78:	e007      	b.n	8006f8a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	781a      	ldrb	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	3301      	adds	r3, #1
 8006f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1cc      	bne.n	8006f42 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2140      	movs	r1, #64	; 0x40
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 fdf7 	bl	8007ba6 <UART_WaitOnFlagUntilTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e005      	b.n	8006fce <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e000      	b.n	8006fce <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006fcc:	2302      	movs	r3, #2
  }
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3720      	adds	r7, #32
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fe8:	2b20      	cmp	r3, #32
 8006fea:	d12c      	bne.n	8007046 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <HAL_UART_Receive_DMA+0x22>
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e025      	b.n	8007048 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_UART_Receive_DMA+0x34>
 8007006:	2302      	movs	r3, #2
 8007008:	e01e      	b.n	8007048 <HAL_UART_Receive_DMA+0x72>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d007      	beq.n	8007036 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007034:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007036:	88fb      	ldrh	r3, [r7, #6]
 8007038:	461a      	mov	r2, r3
 800703a:	68b9      	ldr	r1, [r7, #8]
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 fe2f 	bl	8007ca0 <UART_Start_Receive_DMA>
 8007042:	4603      	mov	r3, r0
 8007044:	e000      	b.n	8007048 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007046:	2302      	movs	r3, #2
  }
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007066:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f022 0201 	bic.w	r2, r2, #1
 8007076:	609a      	str	r2, [r3, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707c:	2b01      	cmp	r3, #1
 800707e:	d107      	bne.n	8007090 <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0210 	bic.w	r2, r2, #16
 800708e:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709a:	2b40      	cmp	r3, #64	; 0x40
 800709c:	d125      	bne.n	80070ea <HAL_UART_AbortReceive+0x9a>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ac:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d019      	beq.n	80070ea <HAL_UART_AbortReceive+0x9a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ba:	2200      	movs	r2, #0
 80070bc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fd f86e 	bl	80041a4 <HAL_DMA_Abort>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00d      	beq.n	80070ea <HAL_UART_AbortReceive+0x9a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fd fa82 	bl	80045dc <HAL_DMA_GetError>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d105      	bne.n	80070ea <HAL_UART_AbortReceive+0x9a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2210      	movs	r2, #16
 80070e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e016      	b.n	8007118 <HAL_UART_AbortReceive+0xc8>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	220f      	movs	r2, #15
 80070f8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	699a      	ldr	r2, [r3, #24]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f042 0208 	orr.w	r2, r2, #8
 8007108:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2220      	movs	r2, #32
 800710e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b088      	sub	sp, #32
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007140:	69fa      	ldr	r2, [r7, #28]
 8007142:	f640 030f 	movw	r3, #2063	; 0x80f
 8007146:	4013      	ands	r3, r2
 8007148:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d113      	bne.n	8007178 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00e      	beq.n	8007178 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	f003 0320 	and.w	r3, r3, #32
 8007160:	2b00      	cmp	r3, #0
 8007162:	d009      	beq.n	8007178 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 81ba 	beq.w	80074e2 <HAL_UART_IRQHandler+0x3c2>
      {
        huart->RxISR(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
      }
      return;
 8007176:	e1b4      	b.n	80074e2 <HAL_UART_IRQHandler+0x3c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 80e3 	beq.w	8007346 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d105      	bne.n	8007196 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	4ba5      	ldr	r3, [pc, #660]	; (8007424 <HAL_UART_IRQHandler+0x304>)
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80d8 	beq.w	8007346 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d010      	beq.n	80071c2 <HAL_UART_IRQHandler+0xa2>
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2201      	movs	r2, #1
 80071b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071b8:	f043 0201 	orr.w	r2, r3, #1
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d010      	beq.n	80071ee <HAL_UART_IRQHandler+0xce>
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00b      	beq.n	80071ee <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2202      	movs	r2, #2
 80071dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e4:	f043 0204 	orr.w	r2, r3, #4
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d010      	beq.n	800721a <HAL_UART_IRQHandler+0xfa>
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00b      	beq.n	800721a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2204      	movs	r2, #4
 8007208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007210:	f043 0202 	orr.w	r2, r3, #2
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	f003 0308 	and.w	r3, r3, #8
 8007220:	2b00      	cmp	r3, #0
 8007222:	d015      	beq.n	8007250 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b00      	cmp	r3, #0
 800722c:	d104      	bne.n	8007238 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00b      	beq.n	8007250 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2208      	movs	r2, #8
 800723e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007246:	f043 0208 	orr.w	r2, r3, #8
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007256:	2b00      	cmp	r3, #0
 8007258:	d011      	beq.n	800727e <HAL_UART_IRQHandler+0x15e>
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00c      	beq.n	800727e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800726c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007274:	f043 0220 	orr.w	r2, r3, #32
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 812e 	beq.w	80074e6 <HAL_UART_IRQHandler+0x3c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00c      	beq.n	80072ae <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b00      	cmp	r3, #0
 800729c:	d007      	beq.n	80072ae <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072b4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c0:	2b40      	cmp	r3, #64	; 0x40
 80072c2:	d004      	beq.n	80072ce <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d031      	beq.n	8007332 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fd67 	bl	8007da2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	d123      	bne.n	800732a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072f0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d013      	beq.n	8007322 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fe:	4a4a      	ldr	r2, [pc, #296]	; (8007428 <HAL_UART_IRQHandler+0x308>)
 8007300:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007306:	4618      	mov	r0, r3
 8007308:	f7fc ffbc 	bl	8004284 <HAL_DMA_Abort_IT>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d017      	beq.n	8007342 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007320:	e00f      	b.n	8007342 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7fa fd12 	bl	8001d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007328:	e00b      	b.n	8007342 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7fa fd0e 	bl	8001d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007330:	e007      	b.n	8007342 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7fa fd0a 	bl	8001d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007340:	e0d1      	b.n	80074e6 <HAL_UART_IRQHandler+0x3c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007342:	bf00      	nop
    return;
 8007344:	e0cf      	b.n	80074e6 <HAL_UART_IRQHandler+0x3c6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800734a:	2b01      	cmp	r3, #1
 800734c:	f040 80a7 	bne.w	800749e <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 80a1 	beq.w	800749e <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	f003 0310 	and.w	r3, r3, #16
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 809b 	beq.w	800749e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2210      	movs	r2, #16
 800736e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737a:	2b40      	cmp	r3, #64	; 0x40
 800737c:	d156      	bne.n	800742c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8007388:	893b      	ldrh	r3, [r7, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 80ad 	beq.w	80074ea <HAL_UART_IRQHandler+0x3ca>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007396:	893a      	ldrh	r2, [r7, #8]
 8007398:	429a      	cmp	r2, r3
 800739a:	f080 80a6 	bcs.w	80074ea <HAL_UART_IRQHandler+0x3ca>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	893a      	ldrh	r2, [r7, #8]
 80073a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b0:	d02a      	beq.n	8007408 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0201 	bic.w	r2, r2, #1
 80073d0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073e0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0210 	bic.w	r2, r2, #16
 80073fc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007402:	4618      	mov	r0, r3
 8007404:	f7fc fece 	bl	80041a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007414:	b29b      	uxth	r3, r3
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	b29b      	uxth	r3, r3
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f881 	bl	8007524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007422:	e062      	b.n	80074ea <HAL_UART_IRQHandler+0x3ca>
 8007424:	04000120 	.word	0x04000120
 8007428:	08007f49 	.word	0x08007f49
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007438:	b29b      	uxth	r3, r3
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d051      	beq.n	80074ee <HAL_UART_IRQHandler+0x3ce>
          && (nb_rx_data > 0U))
 800744a:	897b      	ldrh	r3, [r7, #10]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d04e      	beq.n	80074ee <HAL_UART_IRQHandler+0x3ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800745e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0201 	bic.w	r2, r2, #1
 800746e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2220      	movs	r2, #32
 8007474:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0210 	bic.w	r2, r2, #16
 8007490:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007492:	897b      	ldrh	r3, [r7, #10]
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f844 	bl	8007524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800749c:	e027      	b.n	80074ee <HAL_UART_IRQHandler+0x3ce>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00d      	beq.n	80074c4 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d008      	beq.n	80074c4 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d01b      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3d2>
    {
      huart->TxISR(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	4798      	blx	r3
    }
    return;
 80074c2:	e016      	b.n	80074f2 <HAL_UART_IRQHandler+0x3d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d012      	beq.n	80074f4 <HAL_UART_IRQHandler+0x3d4>
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00d      	beq.n	80074f4 <HAL_UART_IRQHandler+0x3d4>
  {
    UART_EndTransmit_IT(huart);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fd4b 	bl	8007f74 <UART_EndTransmit_IT>
    return;
 80074de:	bf00      	nop
 80074e0:	e008      	b.n	80074f4 <HAL_UART_IRQHandler+0x3d4>
      return;
 80074e2:	bf00      	nop
 80074e4:	e006      	b.n	80074f4 <HAL_UART_IRQHandler+0x3d4>
    return;
 80074e6:	bf00      	nop
 80074e8:	e004      	b.n	80074f4 <HAL_UART_IRQHandler+0x3d4>
      return;
 80074ea:	bf00      	nop
 80074ec:	e002      	b.n	80074f4 <HAL_UART_IRQHandler+0x3d4>
      return;
 80074ee:	bf00      	nop
 80074f0:	e000      	b.n	80074f4 <HAL_UART_IRQHandler+0x3d4>
    return;
 80074f2:	bf00      	nop
  }

}
 80074f4:	3720      	adds	r7, #32
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop

080074fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	431a      	orrs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	431a      	orrs	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	4bb1      	ldr	r3, [pc, #708]	; (800782c <UART_SetConfig+0x2f0>)
 8007568:	4013      	ands	r3, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	6812      	ldr	r2, [r2, #0]
 800756e:	6979      	ldr	r1, [r7, #20]
 8007570:	430b      	orrs	r3, r1
 8007572:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68da      	ldr	r2, [r3, #12]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	4313      	orrs	r3, r2
 8007598:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a9f      	ldr	r2, [pc, #636]	; (8007830 <UART_SetConfig+0x2f4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d121      	bne.n	80075fc <UART_SetConfig+0xc0>
 80075b8:	4b9e      	ldr	r3, [pc, #632]	; (8007834 <UART_SetConfig+0x2f8>)
 80075ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075be:	f003 0303 	and.w	r3, r3, #3
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d816      	bhi.n	80075f4 <UART_SetConfig+0xb8>
 80075c6:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <UART_SetConfig+0x90>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080075dd 	.word	0x080075dd
 80075d0:	080075e9 	.word	0x080075e9
 80075d4:	080075e3 	.word	0x080075e3
 80075d8:	080075ef 	.word	0x080075ef
 80075dc:	2301      	movs	r3, #1
 80075de:	77fb      	strb	r3, [r7, #31]
 80075e0:	e151      	b.n	8007886 <UART_SetConfig+0x34a>
 80075e2:	2302      	movs	r3, #2
 80075e4:	77fb      	strb	r3, [r7, #31]
 80075e6:	e14e      	b.n	8007886 <UART_SetConfig+0x34a>
 80075e8:	2304      	movs	r3, #4
 80075ea:	77fb      	strb	r3, [r7, #31]
 80075ec:	e14b      	b.n	8007886 <UART_SetConfig+0x34a>
 80075ee:	2308      	movs	r3, #8
 80075f0:	77fb      	strb	r3, [r7, #31]
 80075f2:	e148      	b.n	8007886 <UART_SetConfig+0x34a>
 80075f4:	2310      	movs	r3, #16
 80075f6:	77fb      	strb	r3, [r7, #31]
 80075f8:	bf00      	nop
 80075fa:	e144      	b.n	8007886 <UART_SetConfig+0x34a>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a8d      	ldr	r2, [pc, #564]	; (8007838 <UART_SetConfig+0x2fc>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d134      	bne.n	8007670 <UART_SetConfig+0x134>
 8007606:	4b8b      	ldr	r3, [pc, #556]	; (8007834 <UART_SetConfig+0x2f8>)
 8007608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760c:	f003 030c 	and.w	r3, r3, #12
 8007610:	2b0c      	cmp	r3, #12
 8007612:	d829      	bhi.n	8007668 <UART_SetConfig+0x12c>
 8007614:	a201      	add	r2, pc, #4	; (adr r2, 800761c <UART_SetConfig+0xe0>)
 8007616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761a:	bf00      	nop
 800761c:	08007651 	.word	0x08007651
 8007620:	08007669 	.word	0x08007669
 8007624:	08007669 	.word	0x08007669
 8007628:	08007669 	.word	0x08007669
 800762c:	0800765d 	.word	0x0800765d
 8007630:	08007669 	.word	0x08007669
 8007634:	08007669 	.word	0x08007669
 8007638:	08007669 	.word	0x08007669
 800763c:	08007657 	.word	0x08007657
 8007640:	08007669 	.word	0x08007669
 8007644:	08007669 	.word	0x08007669
 8007648:	08007669 	.word	0x08007669
 800764c:	08007663 	.word	0x08007663
 8007650:	2300      	movs	r3, #0
 8007652:	77fb      	strb	r3, [r7, #31]
 8007654:	e117      	b.n	8007886 <UART_SetConfig+0x34a>
 8007656:	2302      	movs	r3, #2
 8007658:	77fb      	strb	r3, [r7, #31]
 800765a:	e114      	b.n	8007886 <UART_SetConfig+0x34a>
 800765c:	2304      	movs	r3, #4
 800765e:	77fb      	strb	r3, [r7, #31]
 8007660:	e111      	b.n	8007886 <UART_SetConfig+0x34a>
 8007662:	2308      	movs	r3, #8
 8007664:	77fb      	strb	r3, [r7, #31]
 8007666:	e10e      	b.n	8007886 <UART_SetConfig+0x34a>
 8007668:	2310      	movs	r3, #16
 800766a:	77fb      	strb	r3, [r7, #31]
 800766c:	bf00      	nop
 800766e:	e10a      	b.n	8007886 <UART_SetConfig+0x34a>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a71      	ldr	r2, [pc, #452]	; (800783c <UART_SetConfig+0x300>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d120      	bne.n	80076bc <UART_SetConfig+0x180>
 800767a:	4b6e      	ldr	r3, [pc, #440]	; (8007834 <UART_SetConfig+0x2f8>)
 800767c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007680:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007684:	2b10      	cmp	r3, #16
 8007686:	d00f      	beq.n	80076a8 <UART_SetConfig+0x16c>
 8007688:	2b10      	cmp	r3, #16
 800768a:	d802      	bhi.n	8007692 <UART_SetConfig+0x156>
 800768c:	2b00      	cmp	r3, #0
 800768e:	d005      	beq.n	800769c <UART_SetConfig+0x160>
 8007690:	e010      	b.n	80076b4 <UART_SetConfig+0x178>
 8007692:	2b20      	cmp	r3, #32
 8007694:	d005      	beq.n	80076a2 <UART_SetConfig+0x166>
 8007696:	2b30      	cmp	r3, #48	; 0x30
 8007698:	d009      	beq.n	80076ae <UART_SetConfig+0x172>
 800769a:	e00b      	b.n	80076b4 <UART_SetConfig+0x178>
 800769c:	2300      	movs	r3, #0
 800769e:	77fb      	strb	r3, [r7, #31]
 80076a0:	e0f1      	b.n	8007886 <UART_SetConfig+0x34a>
 80076a2:	2302      	movs	r3, #2
 80076a4:	77fb      	strb	r3, [r7, #31]
 80076a6:	e0ee      	b.n	8007886 <UART_SetConfig+0x34a>
 80076a8:	2304      	movs	r3, #4
 80076aa:	77fb      	strb	r3, [r7, #31]
 80076ac:	e0eb      	b.n	8007886 <UART_SetConfig+0x34a>
 80076ae:	2308      	movs	r3, #8
 80076b0:	77fb      	strb	r3, [r7, #31]
 80076b2:	e0e8      	b.n	8007886 <UART_SetConfig+0x34a>
 80076b4:	2310      	movs	r3, #16
 80076b6:	77fb      	strb	r3, [r7, #31]
 80076b8:	bf00      	nop
 80076ba:	e0e4      	b.n	8007886 <UART_SetConfig+0x34a>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a5f      	ldr	r2, [pc, #380]	; (8007840 <UART_SetConfig+0x304>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d120      	bne.n	8007708 <UART_SetConfig+0x1cc>
 80076c6:	4b5b      	ldr	r3, [pc, #364]	; (8007834 <UART_SetConfig+0x2f8>)
 80076c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076d0:	2b40      	cmp	r3, #64	; 0x40
 80076d2:	d00f      	beq.n	80076f4 <UART_SetConfig+0x1b8>
 80076d4:	2b40      	cmp	r3, #64	; 0x40
 80076d6:	d802      	bhi.n	80076de <UART_SetConfig+0x1a2>
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d005      	beq.n	80076e8 <UART_SetConfig+0x1ac>
 80076dc:	e010      	b.n	8007700 <UART_SetConfig+0x1c4>
 80076de:	2b80      	cmp	r3, #128	; 0x80
 80076e0:	d005      	beq.n	80076ee <UART_SetConfig+0x1b2>
 80076e2:	2bc0      	cmp	r3, #192	; 0xc0
 80076e4:	d009      	beq.n	80076fa <UART_SetConfig+0x1be>
 80076e6:	e00b      	b.n	8007700 <UART_SetConfig+0x1c4>
 80076e8:	2300      	movs	r3, #0
 80076ea:	77fb      	strb	r3, [r7, #31]
 80076ec:	e0cb      	b.n	8007886 <UART_SetConfig+0x34a>
 80076ee:	2302      	movs	r3, #2
 80076f0:	77fb      	strb	r3, [r7, #31]
 80076f2:	e0c8      	b.n	8007886 <UART_SetConfig+0x34a>
 80076f4:	2304      	movs	r3, #4
 80076f6:	77fb      	strb	r3, [r7, #31]
 80076f8:	e0c5      	b.n	8007886 <UART_SetConfig+0x34a>
 80076fa:	2308      	movs	r3, #8
 80076fc:	77fb      	strb	r3, [r7, #31]
 80076fe:	e0c2      	b.n	8007886 <UART_SetConfig+0x34a>
 8007700:	2310      	movs	r3, #16
 8007702:	77fb      	strb	r3, [r7, #31]
 8007704:	bf00      	nop
 8007706:	e0be      	b.n	8007886 <UART_SetConfig+0x34a>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a4d      	ldr	r2, [pc, #308]	; (8007844 <UART_SetConfig+0x308>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d124      	bne.n	800775c <UART_SetConfig+0x220>
 8007712:	4b48      	ldr	r3, [pc, #288]	; (8007834 <UART_SetConfig+0x2f8>)
 8007714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800771c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007720:	d012      	beq.n	8007748 <UART_SetConfig+0x20c>
 8007722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007726:	d802      	bhi.n	800772e <UART_SetConfig+0x1f2>
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <UART_SetConfig+0x200>
 800772c:	e012      	b.n	8007754 <UART_SetConfig+0x218>
 800772e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007732:	d006      	beq.n	8007742 <UART_SetConfig+0x206>
 8007734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007738:	d009      	beq.n	800774e <UART_SetConfig+0x212>
 800773a:	e00b      	b.n	8007754 <UART_SetConfig+0x218>
 800773c:	2300      	movs	r3, #0
 800773e:	77fb      	strb	r3, [r7, #31]
 8007740:	e0a1      	b.n	8007886 <UART_SetConfig+0x34a>
 8007742:	2302      	movs	r3, #2
 8007744:	77fb      	strb	r3, [r7, #31]
 8007746:	e09e      	b.n	8007886 <UART_SetConfig+0x34a>
 8007748:	2304      	movs	r3, #4
 800774a:	77fb      	strb	r3, [r7, #31]
 800774c:	e09b      	b.n	8007886 <UART_SetConfig+0x34a>
 800774e:	2308      	movs	r3, #8
 8007750:	77fb      	strb	r3, [r7, #31]
 8007752:	e098      	b.n	8007886 <UART_SetConfig+0x34a>
 8007754:	2310      	movs	r3, #16
 8007756:	77fb      	strb	r3, [r7, #31]
 8007758:	bf00      	nop
 800775a:	e094      	b.n	8007886 <UART_SetConfig+0x34a>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a39      	ldr	r2, [pc, #228]	; (8007848 <UART_SetConfig+0x30c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d124      	bne.n	80077b0 <UART_SetConfig+0x274>
 8007766:	4b33      	ldr	r3, [pc, #204]	; (8007834 <UART_SetConfig+0x2f8>)
 8007768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800776c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007774:	d012      	beq.n	800779c <UART_SetConfig+0x260>
 8007776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800777a:	d802      	bhi.n	8007782 <UART_SetConfig+0x246>
 800777c:	2b00      	cmp	r3, #0
 800777e:	d007      	beq.n	8007790 <UART_SetConfig+0x254>
 8007780:	e012      	b.n	80077a8 <UART_SetConfig+0x26c>
 8007782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007786:	d006      	beq.n	8007796 <UART_SetConfig+0x25a>
 8007788:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800778c:	d009      	beq.n	80077a2 <UART_SetConfig+0x266>
 800778e:	e00b      	b.n	80077a8 <UART_SetConfig+0x26c>
 8007790:	2301      	movs	r3, #1
 8007792:	77fb      	strb	r3, [r7, #31]
 8007794:	e077      	b.n	8007886 <UART_SetConfig+0x34a>
 8007796:	2302      	movs	r3, #2
 8007798:	77fb      	strb	r3, [r7, #31]
 800779a:	e074      	b.n	8007886 <UART_SetConfig+0x34a>
 800779c:	2304      	movs	r3, #4
 800779e:	77fb      	strb	r3, [r7, #31]
 80077a0:	e071      	b.n	8007886 <UART_SetConfig+0x34a>
 80077a2:	2308      	movs	r3, #8
 80077a4:	77fb      	strb	r3, [r7, #31]
 80077a6:	e06e      	b.n	8007886 <UART_SetConfig+0x34a>
 80077a8:	2310      	movs	r3, #16
 80077aa:	77fb      	strb	r3, [r7, #31]
 80077ac:	bf00      	nop
 80077ae:	e06a      	b.n	8007886 <UART_SetConfig+0x34a>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a25      	ldr	r2, [pc, #148]	; (800784c <UART_SetConfig+0x310>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d124      	bne.n	8007804 <UART_SetConfig+0x2c8>
 80077ba:	4b1e      	ldr	r3, [pc, #120]	; (8007834 <UART_SetConfig+0x2f8>)
 80077bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80077c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c8:	d012      	beq.n	80077f0 <UART_SetConfig+0x2b4>
 80077ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ce:	d802      	bhi.n	80077d6 <UART_SetConfig+0x29a>
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d007      	beq.n	80077e4 <UART_SetConfig+0x2a8>
 80077d4:	e012      	b.n	80077fc <UART_SetConfig+0x2c0>
 80077d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077da:	d006      	beq.n	80077ea <UART_SetConfig+0x2ae>
 80077dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077e0:	d009      	beq.n	80077f6 <UART_SetConfig+0x2ba>
 80077e2:	e00b      	b.n	80077fc <UART_SetConfig+0x2c0>
 80077e4:	2300      	movs	r3, #0
 80077e6:	77fb      	strb	r3, [r7, #31]
 80077e8:	e04d      	b.n	8007886 <UART_SetConfig+0x34a>
 80077ea:	2302      	movs	r3, #2
 80077ec:	77fb      	strb	r3, [r7, #31]
 80077ee:	e04a      	b.n	8007886 <UART_SetConfig+0x34a>
 80077f0:	2304      	movs	r3, #4
 80077f2:	77fb      	strb	r3, [r7, #31]
 80077f4:	e047      	b.n	8007886 <UART_SetConfig+0x34a>
 80077f6:	2308      	movs	r3, #8
 80077f8:	77fb      	strb	r3, [r7, #31]
 80077fa:	e044      	b.n	8007886 <UART_SetConfig+0x34a>
 80077fc:	2310      	movs	r3, #16
 80077fe:	77fb      	strb	r3, [r7, #31]
 8007800:	bf00      	nop
 8007802:	e040      	b.n	8007886 <UART_SetConfig+0x34a>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a11      	ldr	r2, [pc, #68]	; (8007850 <UART_SetConfig+0x314>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d139      	bne.n	8007882 <UART_SetConfig+0x346>
 800780e:	4b09      	ldr	r3, [pc, #36]	; (8007834 <UART_SetConfig+0x2f8>)
 8007810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007814:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800781c:	d027      	beq.n	800786e <UART_SetConfig+0x332>
 800781e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007822:	d817      	bhi.n	8007854 <UART_SetConfig+0x318>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01c      	beq.n	8007862 <UART_SetConfig+0x326>
 8007828:	e027      	b.n	800787a <UART_SetConfig+0x33e>
 800782a:	bf00      	nop
 800782c:	efff69f3 	.word	0xefff69f3
 8007830:	40011000 	.word	0x40011000
 8007834:	40023800 	.word	0x40023800
 8007838:	40004400 	.word	0x40004400
 800783c:	40004800 	.word	0x40004800
 8007840:	40004c00 	.word	0x40004c00
 8007844:	40005000 	.word	0x40005000
 8007848:	40011400 	.word	0x40011400
 800784c:	40007800 	.word	0x40007800
 8007850:	40007c00 	.word	0x40007c00
 8007854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007858:	d006      	beq.n	8007868 <UART_SetConfig+0x32c>
 800785a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800785e:	d009      	beq.n	8007874 <UART_SetConfig+0x338>
 8007860:	e00b      	b.n	800787a <UART_SetConfig+0x33e>
 8007862:	2300      	movs	r3, #0
 8007864:	77fb      	strb	r3, [r7, #31]
 8007866:	e00e      	b.n	8007886 <UART_SetConfig+0x34a>
 8007868:	2302      	movs	r3, #2
 800786a:	77fb      	strb	r3, [r7, #31]
 800786c:	e00b      	b.n	8007886 <UART_SetConfig+0x34a>
 800786e:	2304      	movs	r3, #4
 8007870:	77fb      	strb	r3, [r7, #31]
 8007872:	e008      	b.n	8007886 <UART_SetConfig+0x34a>
 8007874:	2308      	movs	r3, #8
 8007876:	77fb      	strb	r3, [r7, #31]
 8007878:	e005      	b.n	8007886 <UART_SetConfig+0x34a>
 800787a:	2310      	movs	r3, #16
 800787c:	77fb      	strb	r3, [r7, #31]
 800787e:	bf00      	nop
 8007880:	e001      	b.n	8007886 <UART_SetConfig+0x34a>
 8007882:	2310      	movs	r3, #16
 8007884:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800788e:	d15b      	bne.n	8007948 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8007890:	7ffb      	ldrb	r3, [r7, #31]
 8007892:	2b08      	cmp	r3, #8
 8007894:	d827      	bhi.n	80078e6 <UART_SetConfig+0x3aa>
 8007896:	a201      	add	r2, pc, #4	; (adr r2, 800789c <UART_SetConfig+0x360>)
 8007898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789c:	080078c1 	.word	0x080078c1
 80078a0:	080078c9 	.word	0x080078c9
 80078a4:	080078d1 	.word	0x080078d1
 80078a8:	080078e7 	.word	0x080078e7
 80078ac:	080078d7 	.word	0x080078d7
 80078b0:	080078e7 	.word	0x080078e7
 80078b4:	080078e7 	.word	0x080078e7
 80078b8:	080078e7 	.word	0x080078e7
 80078bc:	080078df 	.word	0x080078df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078c0:	f7fd fe06 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
 80078c4:	61b8      	str	r0, [r7, #24]
        break;
 80078c6:	e013      	b.n	80078f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078c8:	f7fd fe16 	bl	80054f8 <HAL_RCC_GetPCLK2Freq>
 80078cc:	61b8      	str	r0, [r7, #24]
        break;
 80078ce:	e00f      	b.n	80078f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078d0:	4b49      	ldr	r3, [pc, #292]	; (80079f8 <UART_SetConfig+0x4bc>)
 80078d2:	61bb      	str	r3, [r7, #24]
        break;
 80078d4:	e00c      	b.n	80078f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078d6:	f7fd fd19 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80078da:	61b8      	str	r0, [r7, #24]
        break;
 80078dc:	e008      	b.n	80078f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078e2:	61bb      	str	r3, [r7, #24]
        break;
 80078e4:	e004      	b.n	80078f0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	77bb      	strb	r3, [r7, #30]
        break;
 80078ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d074      	beq.n	80079e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	005a      	lsls	r2, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	085b      	lsrs	r3, r3, #1
 8007900:	441a      	add	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	fbb2 f3f3 	udiv	r3, r2, r3
 800790a:	b29b      	uxth	r3, r3
 800790c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	2b0f      	cmp	r3, #15
 8007912:	d916      	bls.n	8007942 <UART_SetConfig+0x406>
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800791a:	d212      	bcs.n	8007942 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	b29b      	uxth	r3, r3
 8007920:	f023 030f 	bic.w	r3, r3, #15
 8007924:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	085b      	lsrs	r3, r3, #1
 800792a:	b29b      	uxth	r3, r3
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	b29a      	uxth	r2, r3
 8007932:	89fb      	ldrh	r3, [r7, #14]
 8007934:	4313      	orrs	r3, r2
 8007936:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	89fa      	ldrh	r2, [r7, #14]
 800793e:	60da      	str	r2, [r3, #12]
 8007940:	e04e      	b.n	80079e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	77bb      	strb	r3, [r7, #30]
 8007946:	e04b      	b.n	80079e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007948:	7ffb      	ldrb	r3, [r7, #31]
 800794a:	2b08      	cmp	r3, #8
 800794c:	d827      	bhi.n	800799e <UART_SetConfig+0x462>
 800794e:	a201      	add	r2, pc, #4	; (adr r2, 8007954 <UART_SetConfig+0x418>)
 8007950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007954:	08007979 	.word	0x08007979
 8007958:	08007981 	.word	0x08007981
 800795c:	08007989 	.word	0x08007989
 8007960:	0800799f 	.word	0x0800799f
 8007964:	0800798f 	.word	0x0800798f
 8007968:	0800799f 	.word	0x0800799f
 800796c:	0800799f 	.word	0x0800799f
 8007970:	0800799f 	.word	0x0800799f
 8007974:	08007997 	.word	0x08007997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007978:	f7fd fdaa 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
 800797c:	61b8      	str	r0, [r7, #24]
        break;
 800797e:	e013      	b.n	80079a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007980:	f7fd fdba 	bl	80054f8 <HAL_RCC_GetPCLK2Freq>
 8007984:	61b8      	str	r0, [r7, #24]
        break;
 8007986:	e00f      	b.n	80079a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007988:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <UART_SetConfig+0x4bc>)
 800798a:	61bb      	str	r3, [r7, #24]
        break;
 800798c:	e00c      	b.n	80079a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800798e:	f7fd fcbd 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8007992:	61b8      	str	r0, [r7, #24]
        break;
 8007994:	e008      	b.n	80079a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800799a:	61bb      	str	r3, [r7, #24]
        break;
 800799c:	e004      	b.n	80079a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	77bb      	strb	r3, [r7, #30]
        break;
 80079a6:	bf00      	nop
    }

    if (pclk != 0U)
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d018      	beq.n	80079e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	085a      	lsrs	r2, r3, #1
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	441a      	add	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	2b0f      	cmp	r3, #15
 80079c8:	d908      	bls.n	80079dc <UART_SetConfig+0x4a0>
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d0:	d204      	bcs.n	80079dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	60da      	str	r2, [r3, #12]
 80079da:	e001      	b.n	80079e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80079ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3720      	adds	r7, #32
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	00f42400 	.word	0x00f42400

080079fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	f003 0304 	and.w	r3, r3, #4
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6e:	f003 0308 	and.w	r3, r3, #8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01a      	beq.n	8007b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007afa:	d10a      	bne.n	8007b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00a      	beq.n	8007b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	605a      	str	r2, [r3, #4]
  }
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af02      	add	r7, sp, #8
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b50:	f7fc f8da 	bl	8003d08 <HAL_GetTick>
 8007b54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0308 	and.w	r3, r3, #8
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d10e      	bne.n	8007b82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f817 	bl	8007ba6 <UART_WaitOnFlagUntilTimeout>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e00d      	b.n	8007b9e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2220      	movs	r2, #32
 8007b86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	60f8      	str	r0, [r7, #12]
 8007bae:	60b9      	str	r1, [r7, #8]
 8007bb0:	603b      	str	r3, [r7, #0]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bb6:	e05e      	b.n	8007c76 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbe:	d05a      	beq.n	8007c76 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bc0:	f7fc f8a2 	bl	8003d08 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d302      	bcc.n	8007bd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d11b      	bne.n	8007c0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007be4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0201 	bic.w	r2, r2, #1
 8007bf4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e043      	b.n	8007c96 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d02c      	beq.n	8007c76 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c2a:	d124      	bne.n	8007c76 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	689a      	ldr	r2, [r3, #8]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0201 	bic.w	r2, r2, #1
 8007c54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e00f      	b.n	8007c96 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69da      	ldr	r2, [r3, #28]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4013      	ands	r3, r2
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	bf0c      	ite	eq
 8007c86:	2301      	moveq	r3, #1
 8007c88:	2300      	movne	r3, #0
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	79fb      	ldrb	r3, [r7, #7]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d091      	beq.n	8007bb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
	...

08007ca0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	4613      	mov	r3, r2
 8007cac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	88fa      	ldrh	r2, [r7, #6]
 8007cb8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2222      	movs	r2, #34	; 0x22
 8007cc8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d02b      	beq.n	8007d2a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd6:	4a25      	ldr	r2, [pc, #148]	; (8007d6c <UART_Start_Receive_DMA+0xcc>)
 8007cd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cde:	4a24      	ldr	r2, [pc, #144]	; (8007d70 <UART_Start_Receive_DMA+0xd0>)
 8007ce0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce6:	4a23      	ldr	r2, [pc, #140]	; (8007d74 <UART_Start_Receive_DMA+0xd4>)
 8007ce8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cee:	2200      	movs	r2, #0
 8007cf0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3324      	adds	r3, #36	; 0x24
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d02:	461a      	mov	r2, r3
 8007d04:	88fb      	ldrh	r3, [r7, #6]
 8007d06:	f7fc f9ed 	bl	80040e4 <HAL_DMA_Start_IT>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00c      	beq.n	8007d2a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2210      	movs	r2, #16
 8007d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2220      	movs	r2, #32
 8007d24:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e01c      	b.n	8007d64 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d40:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f042 0201 	orr.w	r2, r2, #1
 8007d50:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d60:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	08007e01 	.word	0x08007e01
 8007d70:	08007e95 	.word	0x08007e95
 8007d74:	08007ecd 	.word	0x08007ecd

08007d78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007d8e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007db8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0201 	bic.w	r2, r2, #1
 8007dc8:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d107      	bne.n	8007de2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0210 	bic.w	r2, r2, #16
 8007de0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2220      	movs	r2, #32
 8007de6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e16:	d02a      	beq.n	8007e6e <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e2e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0201 	bic.w	r2, r2, #1
 8007e3e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689a      	ldr	r2, [r3, #8]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e4e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2220      	movs	r2, #32
 8007e54:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d107      	bne.n	8007e6e <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0210 	bic.w	r2, r2, #16
 8007e6c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d107      	bne.n	8007e86 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f7ff fb50 	bl	8007524 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e84:	e002      	b.n	8007e8c <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f7f9 ff0c 	bl	8001ca4 <HAL_UART_RxCpltCallback>
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d109      	bne.n	8007ebe <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007eb0:	085b      	lsrs	r3, r3, #1
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f7ff fb34 	bl	8007524 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ebc:	e002      	b.n	8007ec4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f7ff fb26 	bl	8007510 <HAL_UART_RxHalfCpltCallback>
}
 8007ec4:	bf00      	nop
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ede:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef0:	2b80      	cmp	r3, #128	; 0x80
 8007ef2:	d109      	bne.n	8007f08 <UART_DMAError+0x3c>
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	2b21      	cmp	r3, #33	; 0x21
 8007ef8:	d106      	bne.n	8007f08 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007f02:	6978      	ldr	r0, [r7, #20]
 8007f04:	f7ff ff38 	bl	8007d78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f12:	2b40      	cmp	r3, #64	; 0x40
 8007f14:	d109      	bne.n	8007f2a <UART_DMAError+0x5e>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b22      	cmp	r3, #34	; 0x22
 8007f1a:	d106      	bne.n	8007f2a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007f24:	6978      	ldr	r0, [r7, #20]
 8007f26:	f7ff ff3c 	bl	8007da2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f30:	f043 0210 	orr.w	r2, r3, #16
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f3a:	6978      	ldr	r0, [r7, #20]
 8007f3c:	f7f9 ff06 	bl	8001d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f40:	bf00      	nop
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f7f9 fef0 	bl	8001d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f6c:	bf00      	nop
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f8a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2220      	movs	r2, #32
 8007f90:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff faaf 	bl	80074fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f9e:	bf00      	nop
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <__errno>:
 8007fa8:	4b01      	ldr	r3, [pc, #4]	; (8007fb0 <__errno+0x8>)
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	20000020 	.word	0x20000020

08007fb4 <__libc_init_array>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	4e0d      	ldr	r6, [pc, #52]	; (8007fec <__libc_init_array+0x38>)
 8007fb8:	4c0d      	ldr	r4, [pc, #52]	; (8007ff0 <__libc_init_array+0x3c>)
 8007fba:	1ba4      	subs	r4, r4, r6
 8007fbc:	10a4      	asrs	r4, r4, #2
 8007fbe:	2500      	movs	r5, #0
 8007fc0:	42a5      	cmp	r5, r4
 8007fc2:	d109      	bne.n	8007fd8 <__libc_init_array+0x24>
 8007fc4:	4e0b      	ldr	r6, [pc, #44]	; (8007ff4 <__libc_init_array+0x40>)
 8007fc6:	4c0c      	ldr	r4, [pc, #48]	; (8007ff8 <__libc_init_array+0x44>)
 8007fc8:	f005 f844 	bl	800d054 <_init>
 8007fcc:	1ba4      	subs	r4, r4, r6
 8007fce:	10a4      	asrs	r4, r4, #2
 8007fd0:	2500      	movs	r5, #0
 8007fd2:	42a5      	cmp	r5, r4
 8007fd4:	d105      	bne.n	8007fe2 <__libc_init_array+0x2e>
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fdc:	4798      	blx	r3
 8007fde:	3501      	adds	r5, #1
 8007fe0:	e7ee      	b.n	8007fc0 <__libc_init_array+0xc>
 8007fe2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fe6:	4798      	blx	r3
 8007fe8:	3501      	adds	r5, #1
 8007fea:	e7f2      	b.n	8007fd2 <__libc_init_array+0x1e>
 8007fec:	0800d758 	.word	0x0800d758
 8007ff0:	0800d758 	.word	0x0800d758
 8007ff4:	0800d758 	.word	0x0800d758
 8007ff8:	0800d75c 	.word	0x0800d75c

08007ffc <memset>:
 8007ffc:	4402      	add	r2, r0
 8007ffe:	4603      	mov	r3, r0
 8008000:	4293      	cmp	r3, r2
 8008002:	d100      	bne.n	8008006 <memset+0xa>
 8008004:	4770      	bx	lr
 8008006:	f803 1b01 	strb.w	r1, [r3], #1
 800800a:	e7f9      	b.n	8008000 <memset+0x4>

0800800c <__cvt>:
 800800c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008010:	ec55 4b10 	vmov	r4, r5, d0
 8008014:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008016:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800801a:	2d00      	cmp	r5, #0
 800801c:	460e      	mov	r6, r1
 800801e:	4691      	mov	r9, r2
 8008020:	4619      	mov	r1, r3
 8008022:	bfb8      	it	lt
 8008024:	4622      	movlt	r2, r4
 8008026:	462b      	mov	r3, r5
 8008028:	f027 0720 	bic.w	r7, r7, #32
 800802c:	bfbb      	ittet	lt
 800802e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008032:	461d      	movlt	r5, r3
 8008034:	2300      	movge	r3, #0
 8008036:	232d      	movlt	r3, #45	; 0x2d
 8008038:	bfb8      	it	lt
 800803a:	4614      	movlt	r4, r2
 800803c:	2f46      	cmp	r7, #70	; 0x46
 800803e:	700b      	strb	r3, [r1, #0]
 8008040:	d004      	beq.n	800804c <__cvt+0x40>
 8008042:	2f45      	cmp	r7, #69	; 0x45
 8008044:	d100      	bne.n	8008048 <__cvt+0x3c>
 8008046:	3601      	adds	r6, #1
 8008048:	2102      	movs	r1, #2
 800804a:	e000      	b.n	800804e <__cvt+0x42>
 800804c:	2103      	movs	r1, #3
 800804e:	ab03      	add	r3, sp, #12
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	ab02      	add	r3, sp, #8
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	4632      	mov	r2, r6
 8008058:	4653      	mov	r3, sl
 800805a:	ec45 4b10 	vmov	d0, r4, r5
 800805e:	f000 fd1f 	bl	8008aa0 <_dtoa_r>
 8008062:	2f47      	cmp	r7, #71	; 0x47
 8008064:	4680      	mov	r8, r0
 8008066:	d102      	bne.n	800806e <__cvt+0x62>
 8008068:	f019 0f01 	tst.w	r9, #1
 800806c:	d026      	beq.n	80080bc <__cvt+0xb0>
 800806e:	2f46      	cmp	r7, #70	; 0x46
 8008070:	eb08 0906 	add.w	r9, r8, r6
 8008074:	d111      	bne.n	800809a <__cvt+0x8e>
 8008076:	f898 3000 	ldrb.w	r3, [r8]
 800807a:	2b30      	cmp	r3, #48	; 0x30
 800807c:	d10a      	bne.n	8008094 <__cvt+0x88>
 800807e:	2200      	movs	r2, #0
 8008080:	2300      	movs	r3, #0
 8008082:	4620      	mov	r0, r4
 8008084:	4629      	mov	r1, r5
 8008086:	f7f8 fd47 	bl	8000b18 <__aeabi_dcmpeq>
 800808a:	b918      	cbnz	r0, 8008094 <__cvt+0x88>
 800808c:	f1c6 0601 	rsb	r6, r6, #1
 8008090:	f8ca 6000 	str.w	r6, [sl]
 8008094:	f8da 3000 	ldr.w	r3, [sl]
 8008098:	4499      	add	r9, r3
 800809a:	2200      	movs	r2, #0
 800809c:	2300      	movs	r3, #0
 800809e:	4620      	mov	r0, r4
 80080a0:	4629      	mov	r1, r5
 80080a2:	f7f8 fd39 	bl	8000b18 <__aeabi_dcmpeq>
 80080a6:	b938      	cbnz	r0, 80080b8 <__cvt+0xac>
 80080a8:	2230      	movs	r2, #48	; 0x30
 80080aa:	9b03      	ldr	r3, [sp, #12]
 80080ac:	454b      	cmp	r3, r9
 80080ae:	d205      	bcs.n	80080bc <__cvt+0xb0>
 80080b0:	1c59      	adds	r1, r3, #1
 80080b2:	9103      	str	r1, [sp, #12]
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	e7f8      	b.n	80080aa <__cvt+0x9e>
 80080b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080c0:	eba3 0308 	sub.w	r3, r3, r8
 80080c4:	4640      	mov	r0, r8
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	b004      	add	sp, #16
 80080ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080080ce <__exponent>:
 80080ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080d0:	2900      	cmp	r1, #0
 80080d2:	4604      	mov	r4, r0
 80080d4:	bfba      	itte	lt
 80080d6:	4249      	neglt	r1, r1
 80080d8:	232d      	movlt	r3, #45	; 0x2d
 80080da:	232b      	movge	r3, #43	; 0x2b
 80080dc:	2909      	cmp	r1, #9
 80080de:	f804 2b02 	strb.w	r2, [r4], #2
 80080e2:	7043      	strb	r3, [r0, #1]
 80080e4:	dd20      	ble.n	8008128 <__exponent+0x5a>
 80080e6:	f10d 0307 	add.w	r3, sp, #7
 80080ea:	461f      	mov	r7, r3
 80080ec:	260a      	movs	r6, #10
 80080ee:	fb91 f5f6 	sdiv	r5, r1, r6
 80080f2:	fb06 1115 	mls	r1, r6, r5, r1
 80080f6:	3130      	adds	r1, #48	; 0x30
 80080f8:	2d09      	cmp	r5, #9
 80080fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80080fe:	f103 32ff 	add.w	r2, r3, #4294967295
 8008102:	4629      	mov	r1, r5
 8008104:	dc09      	bgt.n	800811a <__exponent+0x4c>
 8008106:	3130      	adds	r1, #48	; 0x30
 8008108:	3b02      	subs	r3, #2
 800810a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800810e:	42bb      	cmp	r3, r7
 8008110:	4622      	mov	r2, r4
 8008112:	d304      	bcc.n	800811e <__exponent+0x50>
 8008114:	1a10      	subs	r0, r2, r0
 8008116:	b003      	add	sp, #12
 8008118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800811a:	4613      	mov	r3, r2
 800811c:	e7e7      	b.n	80080ee <__exponent+0x20>
 800811e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008122:	f804 2b01 	strb.w	r2, [r4], #1
 8008126:	e7f2      	b.n	800810e <__exponent+0x40>
 8008128:	2330      	movs	r3, #48	; 0x30
 800812a:	4419      	add	r1, r3
 800812c:	7083      	strb	r3, [r0, #2]
 800812e:	1d02      	adds	r2, r0, #4
 8008130:	70c1      	strb	r1, [r0, #3]
 8008132:	e7ef      	b.n	8008114 <__exponent+0x46>

08008134 <_printf_float>:
 8008134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008138:	b08d      	sub	sp, #52	; 0x34
 800813a:	460c      	mov	r4, r1
 800813c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008140:	4616      	mov	r6, r2
 8008142:	461f      	mov	r7, r3
 8008144:	4605      	mov	r5, r0
 8008146:	f001 fa63 	bl	8009610 <_localeconv_r>
 800814a:	6803      	ldr	r3, [r0, #0]
 800814c:	9304      	str	r3, [sp, #16]
 800814e:	4618      	mov	r0, r3
 8008150:	f7f8 f866 	bl	8000220 <strlen>
 8008154:	2300      	movs	r3, #0
 8008156:	930a      	str	r3, [sp, #40]	; 0x28
 8008158:	f8d8 3000 	ldr.w	r3, [r8]
 800815c:	9005      	str	r0, [sp, #20]
 800815e:	3307      	adds	r3, #7
 8008160:	f023 0307 	bic.w	r3, r3, #7
 8008164:	f103 0208 	add.w	r2, r3, #8
 8008168:	f894 a018 	ldrb.w	sl, [r4, #24]
 800816c:	f8d4 b000 	ldr.w	fp, [r4]
 8008170:	f8c8 2000 	str.w	r2, [r8]
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800817c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008180:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008184:	9307      	str	r3, [sp, #28]
 8008186:	f8cd 8018 	str.w	r8, [sp, #24]
 800818a:	f04f 32ff 	mov.w	r2, #4294967295
 800818e:	4ba7      	ldr	r3, [pc, #668]	; (800842c <_printf_float+0x2f8>)
 8008190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008194:	f7f8 fcf2 	bl	8000b7c <__aeabi_dcmpun>
 8008198:	bb70      	cbnz	r0, 80081f8 <_printf_float+0xc4>
 800819a:	f04f 32ff 	mov.w	r2, #4294967295
 800819e:	4ba3      	ldr	r3, [pc, #652]	; (800842c <_printf_float+0x2f8>)
 80081a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081a4:	f7f8 fccc 	bl	8000b40 <__aeabi_dcmple>
 80081a8:	bb30      	cbnz	r0, 80081f8 <_printf_float+0xc4>
 80081aa:	2200      	movs	r2, #0
 80081ac:	2300      	movs	r3, #0
 80081ae:	4640      	mov	r0, r8
 80081b0:	4649      	mov	r1, r9
 80081b2:	f7f8 fcbb 	bl	8000b2c <__aeabi_dcmplt>
 80081b6:	b110      	cbz	r0, 80081be <_printf_float+0x8a>
 80081b8:	232d      	movs	r3, #45	; 0x2d
 80081ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081be:	4a9c      	ldr	r2, [pc, #624]	; (8008430 <_printf_float+0x2fc>)
 80081c0:	4b9c      	ldr	r3, [pc, #624]	; (8008434 <_printf_float+0x300>)
 80081c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80081c6:	bf8c      	ite	hi
 80081c8:	4690      	movhi	r8, r2
 80081ca:	4698      	movls	r8, r3
 80081cc:	2303      	movs	r3, #3
 80081ce:	f02b 0204 	bic.w	r2, fp, #4
 80081d2:	6123      	str	r3, [r4, #16]
 80081d4:	6022      	str	r2, [r4, #0]
 80081d6:	f04f 0900 	mov.w	r9, #0
 80081da:	9700      	str	r7, [sp, #0]
 80081dc:	4633      	mov	r3, r6
 80081de:	aa0b      	add	r2, sp, #44	; 0x2c
 80081e0:	4621      	mov	r1, r4
 80081e2:	4628      	mov	r0, r5
 80081e4:	f000 f9e6 	bl	80085b4 <_printf_common>
 80081e8:	3001      	adds	r0, #1
 80081ea:	f040 808d 	bne.w	8008308 <_printf_float+0x1d4>
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295
 80081f2:	b00d      	add	sp, #52	; 0x34
 80081f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f8:	4642      	mov	r2, r8
 80081fa:	464b      	mov	r3, r9
 80081fc:	4640      	mov	r0, r8
 80081fe:	4649      	mov	r1, r9
 8008200:	f7f8 fcbc 	bl	8000b7c <__aeabi_dcmpun>
 8008204:	b110      	cbz	r0, 800820c <_printf_float+0xd8>
 8008206:	4a8c      	ldr	r2, [pc, #560]	; (8008438 <_printf_float+0x304>)
 8008208:	4b8c      	ldr	r3, [pc, #560]	; (800843c <_printf_float+0x308>)
 800820a:	e7da      	b.n	80081c2 <_printf_float+0x8e>
 800820c:	6861      	ldr	r1, [r4, #4]
 800820e:	1c4b      	adds	r3, r1, #1
 8008210:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008214:	a80a      	add	r0, sp, #40	; 0x28
 8008216:	d13e      	bne.n	8008296 <_printf_float+0x162>
 8008218:	2306      	movs	r3, #6
 800821a:	6063      	str	r3, [r4, #4]
 800821c:	2300      	movs	r3, #0
 800821e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008222:	ab09      	add	r3, sp, #36	; 0x24
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	ec49 8b10 	vmov	d0, r8, r9
 800822a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800822e:	6022      	str	r2, [r4, #0]
 8008230:	f8cd a004 	str.w	sl, [sp, #4]
 8008234:	6861      	ldr	r1, [r4, #4]
 8008236:	4628      	mov	r0, r5
 8008238:	f7ff fee8 	bl	800800c <__cvt>
 800823c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008240:	2b47      	cmp	r3, #71	; 0x47
 8008242:	4680      	mov	r8, r0
 8008244:	d109      	bne.n	800825a <_printf_float+0x126>
 8008246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008248:	1cd8      	adds	r0, r3, #3
 800824a:	db02      	blt.n	8008252 <_printf_float+0x11e>
 800824c:	6862      	ldr	r2, [r4, #4]
 800824e:	4293      	cmp	r3, r2
 8008250:	dd47      	ble.n	80082e2 <_printf_float+0x1ae>
 8008252:	f1aa 0a02 	sub.w	sl, sl, #2
 8008256:	fa5f fa8a 	uxtb.w	sl, sl
 800825a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800825e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008260:	d824      	bhi.n	80082ac <_printf_float+0x178>
 8008262:	3901      	subs	r1, #1
 8008264:	4652      	mov	r2, sl
 8008266:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800826a:	9109      	str	r1, [sp, #36]	; 0x24
 800826c:	f7ff ff2f 	bl	80080ce <__exponent>
 8008270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008272:	1813      	adds	r3, r2, r0
 8008274:	2a01      	cmp	r2, #1
 8008276:	4681      	mov	r9, r0
 8008278:	6123      	str	r3, [r4, #16]
 800827a:	dc02      	bgt.n	8008282 <_printf_float+0x14e>
 800827c:	6822      	ldr	r2, [r4, #0]
 800827e:	07d1      	lsls	r1, r2, #31
 8008280:	d501      	bpl.n	8008286 <_printf_float+0x152>
 8008282:	3301      	adds	r3, #1
 8008284:	6123      	str	r3, [r4, #16]
 8008286:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0a5      	beq.n	80081da <_printf_float+0xa6>
 800828e:	232d      	movs	r3, #45	; 0x2d
 8008290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008294:	e7a1      	b.n	80081da <_printf_float+0xa6>
 8008296:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800829a:	f000 8177 	beq.w	800858c <_printf_float+0x458>
 800829e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80082a2:	d1bb      	bne.n	800821c <_printf_float+0xe8>
 80082a4:	2900      	cmp	r1, #0
 80082a6:	d1b9      	bne.n	800821c <_printf_float+0xe8>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e7b6      	b.n	800821a <_printf_float+0xe6>
 80082ac:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80082b0:	d119      	bne.n	80082e6 <_printf_float+0x1b2>
 80082b2:	2900      	cmp	r1, #0
 80082b4:	6863      	ldr	r3, [r4, #4]
 80082b6:	dd0c      	ble.n	80082d2 <_printf_float+0x19e>
 80082b8:	6121      	str	r1, [r4, #16]
 80082ba:	b913      	cbnz	r3, 80082c2 <_printf_float+0x18e>
 80082bc:	6822      	ldr	r2, [r4, #0]
 80082be:	07d2      	lsls	r2, r2, #31
 80082c0:	d502      	bpl.n	80082c8 <_printf_float+0x194>
 80082c2:	3301      	adds	r3, #1
 80082c4:	440b      	add	r3, r1
 80082c6:	6123      	str	r3, [r4, #16]
 80082c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80082cc:	f04f 0900 	mov.w	r9, #0
 80082d0:	e7d9      	b.n	8008286 <_printf_float+0x152>
 80082d2:	b913      	cbnz	r3, 80082da <_printf_float+0x1a6>
 80082d4:	6822      	ldr	r2, [r4, #0]
 80082d6:	07d0      	lsls	r0, r2, #31
 80082d8:	d501      	bpl.n	80082de <_printf_float+0x1aa>
 80082da:	3302      	adds	r3, #2
 80082dc:	e7f3      	b.n	80082c6 <_printf_float+0x192>
 80082de:	2301      	movs	r3, #1
 80082e0:	e7f1      	b.n	80082c6 <_printf_float+0x192>
 80082e2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80082e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80082ea:	4293      	cmp	r3, r2
 80082ec:	db05      	blt.n	80082fa <_printf_float+0x1c6>
 80082ee:	6822      	ldr	r2, [r4, #0]
 80082f0:	6123      	str	r3, [r4, #16]
 80082f2:	07d1      	lsls	r1, r2, #31
 80082f4:	d5e8      	bpl.n	80082c8 <_printf_float+0x194>
 80082f6:	3301      	adds	r3, #1
 80082f8:	e7e5      	b.n	80082c6 <_printf_float+0x192>
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	bfd4      	ite	le
 80082fe:	f1c3 0302 	rsble	r3, r3, #2
 8008302:	2301      	movgt	r3, #1
 8008304:	4413      	add	r3, r2
 8008306:	e7de      	b.n	80082c6 <_printf_float+0x192>
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	055a      	lsls	r2, r3, #21
 800830c:	d407      	bmi.n	800831e <_printf_float+0x1ea>
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	4642      	mov	r2, r8
 8008312:	4631      	mov	r1, r6
 8008314:	4628      	mov	r0, r5
 8008316:	47b8      	blx	r7
 8008318:	3001      	adds	r0, #1
 800831a:	d12b      	bne.n	8008374 <_printf_float+0x240>
 800831c:	e767      	b.n	80081ee <_printf_float+0xba>
 800831e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008322:	f240 80dc 	bls.w	80084de <_printf_float+0x3aa>
 8008326:	2200      	movs	r2, #0
 8008328:	2300      	movs	r3, #0
 800832a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800832e:	f7f8 fbf3 	bl	8000b18 <__aeabi_dcmpeq>
 8008332:	2800      	cmp	r0, #0
 8008334:	d033      	beq.n	800839e <_printf_float+0x26a>
 8008336:	2301      	movs	r3, #1
 8008338:	4a41      	ldr	r2, [pc, #260]	; (8008440 <_printf_float+0x30c>)
 800833a:	4631      	mov	r1, r6
 800833c:	4628      	mov	r0, r5
 800833e:	47b8      	blx	r7
 8008340:	3001      	adds	r0, #1
 8008342:	f43f af54 	beq.w	80081ee <_printf_float+0xba>
 8008346:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800834a:	429a      	cmp	r2, r3
 800834c:	db02      	blt.n	8008354 <_printf_float+0x220>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	07d8      	lsls	r0, r3, #31
 8008352:	d50f      	bpl.n	8008374 <_printf_float+0x240>
 8008354:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008358:	4631      	mov	r1, r6
 800835a:	4628      	mov	r0, r5
 800835c:	47b8      	blx	r7
 800835e:	3001      	adds	r0, #1
 8008360:	f43f af45 	beq.w	80081ee <_printf_float+0xba>
 8008364:	f04f 0800 	mov.w	r8, #0
 8008368:	f104 091a 	add.w	r9, r4, #26
 800836c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800836e:	3b01      	subs	r3, #1
 8008370:	4543      	cmp	r3, r8
 8008372:	dc09      	bgt.n	8008388 <_printf_float+0x254>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	079b      	lsls	r3, r3, #30
 8008378:	f100 8103 	bmi.w	8008582 <_printf_float+0x44e>
 800837c:	68e0      	ldr	r0, [r4, #12]
 800837e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008380:	4298      	cmp	r0, r3
 8008382:	bfb8      	it	lt
 8008384:	4618      	movlt	r0, r3
 8008386:	e734      	b.n	80081f2 <_printf_float+0xbe>
 8008388:	2301      	movs	r3, #1
 800838a:	464a      	mov	r2, r9
 800838c:	4631      	mov	r1, r6
 800838e:	4628      	mov	r0, r5
 8008390:	47b8      	blx	r7
 8008392:	3001      	adds	r0, #1
 8008394:	f43f af2b 	beq.w	80081ee <_printf_float+0xba>
 8008398:	f108 0801 	add.w	r8, r8, #1
 800839c:	e7e6      	b.n	800836c <_printf_float+0x238>
 800839e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	dc2b      	bgt.n	80083fc <_printf_float+0x2c8>
 80083a4:	2301      	movs	r3, #1
 80083a6:	4a26      	ldr	r2, [pc, #152]	; (8008440 <_printf_float+0x30c>)
 80083a8:	4631      	mov	r1, r6
 80083aa:	4628      	mov	r0, r5
 80083ac:	47b8      	blx	r7
 80083ae:	3001      	adds	r0, #1
 80083b0:	f43f af1d 	beq.w	80081ee <_printf_float+0xba>
 80083b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b6:	b923      	cbnz	r3, 80083c2 <_printf_float+0x28e>
 80083b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ba:	b913      	cbnz	r3, 80083c2 <_printf_float+0x28e>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	07d9      	lsls	r1, r3, #31
 80083c0:	d5d8      	bpl.n	8008374 <_printf_float+0x240>
 80083c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083c6:	4631      	mov	r1, r6
 80083c8:	4628      	mov	r0, r5
 80083ca:	47b8      	blx	r7
 80083cc:	3001      	adds	r0, #1
 80083ce:	f43f af0e 	beq.w	80081ee <_printf_float+0xba>
 80083d2:	f04f 0900 	mov.w	r9, #0
 80083d6:	f104 0a1a 	add.w	sl, r4, #26
 80083da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083dc:	425b      	negs	r3, r3
 80083de:	454b      	cmp	r3, r9
 80083e0:	dc01      	bgt.n	80083e6 <_printf_float+0x2b2>
 80083e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083e4:	e794      	b.n	8008310 <_printf_float+0x1dc>
 80083e6:	2301      	movs	r3, #1
 80083e8:	4652      	mov	r2, sl
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	f43f aefc 	beq.w	80081ee <_printf_float+0xba>
 80083f6:	f109 0901 	add.w	r9, r9, #1
 80083fa:	e7ee      	b.n	80083da <_printf_float+0x2a6>
 80083fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008400:	429a      	cmp	r2, r3
 8008402:	bfa8      	it	ge
 8008404:	461a      	movge	r2, r3
 8008406:	2a00      	cmp	r2, #0
 8008408:	4691      	mov	r9, r2
 800840a:	dd07      	ble.n	800841c <_printf_float+0x2e8>
 800840c:	4613      	mov	r3, r2
 800840e:	4631      	mov	r1, r6
 8008410:	4642      	mov	r2, r8
 8008412:	4628      	mov	r0, r5
 8008414:	47b8      	blx	r7
 8008416:	3001      	adds	r0, #1
 8008418:	f43f aee9 	beq.w	80081ee <_printf_float+0xba>
 800841c:	f104 031a 	add.w	r3, r4, #26
 8008420:	f04f 0b00 	mov.w	fp, #0
 8008424:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008428:	9306      	str	r3, [sp, #24]
 800842a:	e015      	b.n	8008458 <_printf_float+0x324>
 800842c:	7fefffff 	.word	0x7fefffff
 8008430:	0800d250 	.word	0x0800d250
 8008434:	0800d24c 	.word	0x0800d24c
 8008438:	0800d258 	.word	0x0800d258
 800843c:	0800d254 	.word	0x0800d254
 8008440:	0800d3b3 	.word	0x0800d3b3
 8008444:	2301      	movs	r3, #1
 8008446:	9a06      	ldr	r2, [sp, #24]
 8008448:	4631      	mov	r1, r6
 800844a:	4628      	mov	r0, r5
 800844c:	47b8      	blx	r7
 800844e:	3001      	adds	r0, #1
 8008450:	f43f aecd 	beq.w	80081ee <_printf_float+0xba>
 8008454:	f10b 0b01 	add.w	fp, fp, #1
 8008458:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800845c:	ebaa 0309 	sub.w	r3, sl, r9
 8008460:	455b      	cmp	r3, fp
 8008462:	dcef      	bgt.n	8008444 <_printf_float+0x310>
 8008464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008468:	429a      	cmp	r2, r3
 800846a:	44d0      	add	r8, sl
 800846c:	db15      	blt.n	800849a <_printf_float+0x366>
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	07da      	lsls	r2, r3, #31
 8008472:	d412      	bmi.n	800849a <_printf_float+0x366>
 8008474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008476:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008478:	eba3 020a 	sub.w	r2, r3, sl
 800847c:	eba3 0a01 	sub.w	sl, r3, r1
 8008480:	4592      	cmp	sl, r2
 8008482:	bfa8      	it	ge
 8008484:	4692      	movge	sl, r2
 8008486:	f1ba 0f00 	cmp.w	sl, #0
 800848a:	dc0e      	bgt.n	80084aa <_printf_float+0x376>
 800848c:	f04f 0800 	mov.w	r8, #0
 8008490:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008494:	f104 091a 	add.w	r9, r4, #26
 8008498:	e019      	b.n	80084ce <_printf_float+0x39a>
 800849a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800849e:	4631      	mov	r1, r6
 80084a0:	4628      	mov	r0, r5
 80084a2:	47b8      	blx	r7
 80084a4:	3001      	adds	r0, #1
 80084a6:	d1e5      	bne.n	8008474 <_printf_float+0x340>
 80084a8:	e6a1      	b.n	80081ee <_printf_float+0xba>
 80084aa:	4653      	mov	r3, sl
 80084ac:	4642      	mov	r2, r8
 80084ae:	4631      	mov	r1, r6
 80084b0:	4628      	mov	r0, r5
 80084b2:	47b8      	blx	r7
 80084b4:	3001      	adds	r0, #1
 80084b6:	d1e9      	bne.n	800848c <_printf_float+0x358>
 80084b8:	e699      	b.n	80081ee <_printf_float+0xba>
 80084ba:	2301      	movs	r3, #1
 80084bc:	464a      	mov	r2, r9
 80084be:	4631      	mov	r1, r6
 80084c0:	4628      	mov	r0, r5
 80084c2:	47b8      	blx	r7
 80084c4:	3001      	adds	r0, #1
 80084c6:	f43f ae92 	beq.w	80081ee <_printf_float+0xba>
 80084ca:	f108 0801 	add.w	r8, r8, #1
 80084ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084d2:	1a9b      	subs	r3, r3, r2
 80084d4:	eba3 030a 	sub.w	r3, r3, sl
 80084d8:	4543      	cmp	r3, r8
 80084da:	dcee      	bgt.n	80084ba <_printf_float+0x386>
 80084dc:	e74a      	b.n	8008374 <_printf_float+0x240>
 80084de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084e0:	2a01      	cmp	r2, #1
 80084e2:	dc01      	bgt.n	80084e8 <_printf_float+0x3b4>
 80084e4:	07db      	lsls	r3, r3, #31
 80084e6:	d53a      	bpl.n	800855e <_printf_float+0x42a>
 80084e8:	2301      	movs	r3, #1
 80084ea:	4642      	mov	r2, r8
 80084ec:	4631      	mov	r1, r6
 80084ee:	4628      	mov	r0, r5
 80084f0:	47b8      	blx	r7
 80084f2:	3001      	adds	r0, #1
 80084f4:	f43f ae7b 	beq.w	80081ee <_printf_float+0xba>
 80084f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084fc:	4631      	mov	r1, r6
 80084fe:	4628      	mov	r0, r5
 8008500:	47b8      	blx	r7
 8008502:	3001      	adds	r0, #1
 8008504:	f108 0801 	add.w	r8, r8, #1
 8008508:	f43f ae71 	beq.w	80081ee <_printf_float+0xba>
 800850c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800850e:	2200      	movs	r2, #0
 8008510:	f103 3aff 	add.w	sl, r3, #4294967295
 8008514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008518:	2300      	movs	r3, #0
 800851a:	f7f8 fafd 	bl	8000b18 <__aeabi_dcmpeq>
 800851e:	b9c8      	cbnz	r0, 8008554 <_printf_float+0x420>
 8008520:	4653      	mov	r3, sl
 8008522:	4642      	mov	r2, r8
 8008524:	4631      	mov	r1, r6
 8008526:	4628      	mov	r0, r5
 8008528:	47b8      	blx	r7
 800852a:	3001      	adds	r0, #1
 800852c:	d10e      	bne.n	800854c <_printf_float+0x418>
 800852e:	e65e      	b.n	80081ee <_printf_float+0xba>
 8008530:	2301      	movs	r3, #1
 8008532:	4652      	mov	r2, sl
 8008534:	4631      	mov	r1, r6
 8008536:	4628      	mov	r0, r5
 8008538:	47b8      	blx	r7
 800853a:	3001      	adds	r0, #1
 800853c:	f43f ae57 	beq.w	80081ee <_printf_float+0xba>
 8008540:	f108 0801 	add.w	r8, r8, #1
 8008544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008546:	3b01      	subs	r3, #1
 8008548:	4543      	cmp	r3, r8
 800854a:	dcf1      	bgt.n	8008530 <_printf_float+0x3fc>
 800854c:	464b      	mov	r3, r9
 800854e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008552:	e6de      	b.n	8008312 <_printf_float+0x1de>
 8008554:	f04f 0800 	mov.w	r8, #0
 8008558:	f104 0a1a 	add.w	sl, r4, #26
 800855c:	e7f2      	b.n	8008544 <_printf_float+0x410>
 800855e:	2301      	movs	r3, #1
 8008560:	e7df      	b.n	8008522 <_printf_float+0x3ee>
 8008562:	2301      	movs	r3, #1
 8008564:	464a      	mov	r2, r9
 8008566:	4631      	mov	r1, r6
 8008568:	4628      	mov	r0, r5
 800856a:	47b8      	blx	r7
 800856c:	3001      	adds	r0, #1
 800856e:	f43f ae3e 	beq.w	80081ee <_printf_float+0xba>
 8008572:	f108 0801 	add.w	r8, r8, #1
 8008576:	68e3      	ldr	r3, [r4, #12]
 8008578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800857a:	1a9b      	subs	r3, r3, r2
 800857c:	4543      	cmp	r3, r8
 800857e:	dcf0      	bgt.n	8008562 <_printf_float+0x42e>
 8008580:	e6fc      	b.n	800837c <_printf_float+0x248>
 8008582:	f04f 0800 	mov.w	r8, #0
 8008586:	f104 0919 	add.w	r9, r4, #25
 800858a:	e7f4      	b.n	8008576 <_printf_float+0x442>
 800858c:	2900      	cmp	r1, #0
 800858e:	f43f ae8b 	beq.w	80082a8 <_printf_float+0x174>
 8008592:	2300      	movs	r3, #0
 8008594:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008598:	ab09      	add	r3, sp, #36	; 0x24
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	ec49 8b10 	vmov	d0, r8, r9
 80085a0:	6022      	str	r2, [r4, #0]
 80085a2:	f8cd a004 	str.w	sl, [sp, #4]
 80085a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80085aa:	4628      	mov	r0, r5
 80085ac:	f7ff fd2e 	bl	800800c <__cvt>
 80085b0:	4680      	mov	r8, r0
 80085b2:	e648      	b.n	8008246 <_printf_float+0x112>

080085b4 <_printf_common>:
 80085b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085b8:	4691      	mov	r9, r2
 80085ba:	461f      	mov	r7, r3
 80085bc:	688a      	ldr	r2, [r1, #8]
 80085be:	690b      	ldr	r3, [r1, #16]
 80085c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085c4:	4293      	cmp	r3, r2
 80085c6:	bfb8      	it	lt
 80085c8:	4613      	movlt	r3, r2
 80085ca:	f8c9 3000 	str.w	r3, [r9]
 80085ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085d2:	4606      	mov	r6, r0
 80085d4:	460c      	mov	r4, r1
 80085d6:	b112      	cbz	r2, 80085de <_printf_common+0x2a>
 80085d8:	3301      	adds	r3, #1
 80085da:	f8c9 3000 	str.w	r3, [r9]
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	0699      	lsls	r1, r3, #26
 80085e2:	bf42      	ittt	mi
 80085e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80085e8:	3302      	addmi	r3, #2
 80085ea:	f8c9 3000 	strmi.w	r3, [r9]
 80085ee:	6825      	ldr	r5, [r4, #0]
 80085f0:	f015 0506 	ands.w	r5, r5, #6
 80085f4:	d107      	bne.n	8008606 <_printf_common+0x52>
 80085f6:	f104 0a19 	add.w	sl, r4, #25
 80085fa:	68e3      	ldr	r3, [r4, #12]
 80085fc:	f8d9 2000 	ldr.w	r2, [r9]
 8008600:	1a9b      	subs	r3, r3, r2
 8008602:	42ab      	cmp	r3, r5
 8008604:	dc28      	bgt.n	8008658 <_printf_common+0xa4>
 8008606:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800860a:	6822      	ldr	r2, [r4, #0]
 800860c:	3300      	adds	r3, #0
 800860e:	bf18      	it	ne
 8008610:	2301      	movne	r3, #1
 8008612:	0692      	lsls	r2, r2, #26
 8008614:	d42d      	bmi.n	8008672 <_printf_common+0xbe>
 8008616:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800861a:	4639      	mov	r1, r7
 800861c:	4630      	mov	r0, r6
 800861e:	47c0      	blx	r8
 8008620:	3001      	adds	r0, #1
 8008622:	d020      	beq.n	8008666 <_printf_common+0xb2>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	68e5      	ldr	r5, [r4, #12]
 8008628:	f8d9 2000 	ldr.w	r2, [r9]
 800862c:	f003 0306 	and.w	r3, r3, #6
 8008630:	2b04      	cmp	r3, #4
 8008632:	bf08      	it	eq
 8008634:	1aad      	subeq	r5, r5, r2
 8008636:	68a3      	ldr	r3, [r4, #8]
 8008638:	6922      	ldr	r2, [r4, #16]
 800863a:	bf0c      	ite	eq
 800863c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008640:	2500      	movne	r5, #0
 8008642:	4293      	cmp	r3, r2
 8008644:	bfc4      	itt	gt
 8008646:	1a9b      	subgt	r3, r3, r2
 8008648:	18ed      	addgt	r5, r5, r3
 800864a:	f04f 0900 	mov.w	r9, #0
 800864e:	341a      	adds	r4, #26
 8008650:	454d      	cmp	r5, r9
 8008652:	d11a      	bne.n	800868a <_printf_common+0xd6>
 8008654:	2000      	movs	r0, #0
 8008656:	e008      	b.n	800866a <_printf_common+0xb6>
 8008658:	2301      	movs	r3, #1
 800865a:	4652      	mov	r2, sl
 800865c:	4639      	mov	r1, r7
 800865e:	4630      	mov	r0, r6
 8008660:	47c0      	blx	r8
 8008662:	3001      	adds	r0, #1
 8008664:	d103      	bne.n	800866e <_printf_common+0xba>
 8008666:	f04f 30ff 	mov.w	r0, #4294967295
 800866a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800866e:	3501      	adds	r5, #1
 8008670:	e7c3      	b.n	80085fa <_printf_common+0x46>
 8008672:	18e1      	adds	r1, r4, r3
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	2030      	movs	r0, #48	; 0x30
 8008678:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800867c:	4422      	add	r2, r4
 800867e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008682:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008686:	3302      	adds	r3, #2
 8008688:	e7c5      	b.n	8008616 <_printf_common+0x62>
 800868a:	2301      	movs	r3, #1
 800868c:	4622      	mov	r2, r4
 800868e:	4639      	mov	r1, r7
 8008690:	4630      	mov	r0, r6
 8008692:	47c0      	blx	r8
 8008694:	3001      	adds	r0, #1
 8008696:	d0e6      	beq.n	8008666 <_printf_common+0xb2>
 8008698:	f109 0901 	add.w	r9, r9, #1
 800869c:	e7d8      	b.n	8008650 <_printf_common+0x9c>
	...

080086a0 <_printf_i>:
 80086a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80086a8:	460c      	mov	r4, r1
 80086aa:	7e09      	ldrb	r1, [r1, #24]
 80086ac:	b085      	sub	sp, #20
 80086ae:	296e      	cmp	r1, #110	; 0x6e
 80086b0:	4617      	mov	r7, r2
 80086b2:	4606      	mov	r6, r0
 80086b4:	4698      	mov	r8, r3
 80086b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086b8:	f000 80b3 	beq.w	8008822 <_printf_i+0x182>
 80086bc:	d822      	bhi.n	8008704 <_printf_i+0x64>
 80086be:	2963      	cmp	r1, #99	; 0x63
 80086c0:	d036      	beq.n	8008730 <_printf_i+0x90>
 80086c2:	d80a      	bhi.n	80086da <_printf_i+0x3a>
 80086c4:	2900      	cmp	r1, #0
 80086c6:	f000 80b9 	beq.w	800883c <_printf_i+0x19c>
 80086ca:	2958      	cmp	r1, #88	; 0x58
 80086cc:	f000 8083 	beq.w	80087d6 <_printf_i+0x136>
 80086d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80086d8:	e032      	b.n	8008740 <_printf_i+0xa0>
 80086da:	2964      	cmp	r1, #100	; 0x64
 80086dc:	d001      	beq.n	80086e2 <_printf_i+0x42>
 80086de:	2969      	cmp	r1, #105	; 0x69
 80086e0:	d1f6      	bne.n	80086d0 <_printf_i+0x30>
 80086e2:	6820      	ldr	r0, [r4, #0]
 80086e4:	6813      	ldr	r3, [r2, #0]
 80086e6:	0605      	lsls	r5, r0, #24
 80086e8:	f103 0104 	add.w	r1, r3, #4
 80086ec:	d52a      	bpl.n	8008744 <_printf_i+0xa4>
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6011      	str	r1, [r2, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	da03      	bge.n	80086fe <_printf_i+0x5e>
 80086f6:	222d      	movs	r2, #45	; 0x2d
 80086f8:	425b      	negs	r3, r3
 80086fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80086fe:	486f      	ldr	r0, [pc, #444]	; (80088bc <_printf_i+0x21c>)
 8008700:	220a      	movs	r2, #10
 8008702:	e039      	b.n	8008778 <_printf_i+0xd8>
 8008704:	2973      	cmp	r1, #115	; 0x73
 8008706:	f000 809d 	beq.w	8008844 <_printf_i+0x1a4>
 800870a:	d808      	bhi.n	800871e <_printf_i+0x7e>
 800870c:	296f      	cmp	r1, #111	; 0x6f
 800870e:	d020      	beq.n	8008752 <_printf_i+0xb2>
 8008710:	2970      	cmp	r1, #112	; 0x70
 8008712:	d1dd      	bne.n	80086d0 <_printf_i+0x30>
 8008714:	6823      	ldr	r3, [r4, #0]
 8008716:	f043 0320 	orr.w	r3, r3, #32
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	e003      	b.n	8008726 <_printf_i+0x86>
 800871e:	2975      	cmp	r1, #117	; 0x75
 8008720:	d017      	beq.n	8008752 <_printf_i+0xb2>
 8008722:	2978      	cmp	r1, #120	; 0x78
 8008724:	d1d4      	bne.n	80086d0 <_printf_i+0x30>
 8008726:	2378      	movs	r3, #120	; 0x78
 8008728:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800872c:	4864      	ldr	r0, [pc, #400]	; (80088c0 <_printf_i+0x220>)
 800872e:	e055      	b.n	80087dc <_printf_i+0x13c>
 8008730:	6813      	ldr	r3, [r2, #0]
 8008732:	1d19      	adds	r1, r3, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6011      	str	r1, [r2, #0]
 8008738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800873c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008740:	2301      	movs	r3, #1
 8008742:	e08c      	b.n	800885e <_printf_i+0x1be>
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6011      	str	r1, [r2, #0]
 8008748:	f010 0f40 	tst.w	r0, #64	; 0x40
 800874c:	bf18      	it	ne
 800874e:	b21b      	sxthne	r3, r3
 8008750:	e7cf      	b.n	80086f2 <_printf_i+0x52>
 8008752:	6813      	ldr	r3, [r2, #0]
 8008754:	6825      	ldr	r5, [r4, #0]
 8008756:	1d18      	adds	r0, r3, #4
 8008758:	6010      	str	r0, [r2, #0]
 800875a:	0628      	lsls	r0, r5, #24
 800875c:	d501      	bpl.n	8008762 <_printf_i+0xc2>
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	e002      	b.n	8008768 <_printf_i+0xc8>
 8008762:	0668      	lsls	r0, r5, #25
 8008764:	d5fb      	bpl.n	800875e <_printf_i+0xbe>
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	4854      	ldr	r0, [pc, #336]	; (80088bc <_printf_i+0x21c>)
 800876a:	296f      	cmp	r1, #111	; 0x6f
 800876c:	bf14      	ite	ne
 800876e:	220a      	movne	r2, #10
 8008770:	2208      	moveq	r2, #8
 8008772:	2100      	movs	r1, #0
 8008774:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008778:	6865      	ldr	r5, [r4, #4]
 800877a:	60a5      	str	r5, [r4, #8]
 800877c:	2d00      	cmp	r5, #0
 800877e:	f2c0 8095 	blt.w	80088ac <_printf_i+0x20c>
 8008782:	6821      	ldr	r1, [r4, #0]
 8008784:	f021 0104 	bic.w	r1, r1, #4
 8008788:	6021      	str	r1, [r4, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d13d      	bne.n	800880a <_printf_i+0x16a>
 800878e:	2d00      	cmp	r5, #0
 8008790:	f040 808e 	bne.w	80088b0 <_printf_i+0x210>
 8008794:	4665      	mov	r5, ip
 8008796:	2a08      	cmp	r2, #8
 8008798:	d10b      	bne.n	80087b2 <_printf_i+0x112>
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	07db      	lsls	r3, r3, #31
 800879e:	d508      	bpl.n	80087b2 <_printf_i+0x112>
 80087a0:	6923      	ldr	r3, [r4, #16]
 80087a2:	6862      	ldr	r2, [r4, #4]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	bfde      	ittt	le
 80087a8:	2330      	movle	r3, #48	; 0x30
 80087aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087b2:	ebac 0305 	sub.w	r3, ip, r5
 80087b6:	6123      	str	r3, [r4, #16]
 80087b8:	f8cd 8000 	str.w	r8, [sp]
 80087bc:	463b      	mov	r3, r7
 80087be:	aa03      	add	r2, sp, #12
 80087c0:	4621      	mov	r1, r4
 80087c2:	4630      	mov	r0, r6
 80087c4:	f7ff fef6 	bl	80085b4 <_printf_common>
 80087c8:	3001      	adds	r0, #1
 80087ca:	d14d      	bne.n	8008868 <_printf_i+0x1c8>
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295
 80087d0:	b005      	add	sp, #20
 80087d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087d6:	4839      	ldr	r0, [pc, #228]	; (80088bc <_printf_i+0x21c>)
 80087d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80087dc:	6813      	ldr	r3, [r2, #0]
 80087de:	6821      	ldr	r1, [r4, #0]
 80087e0:	1d1d      	adds	r5, r3, #4
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6015      	str	r5, [r2, #0]
 80087e6:	060a      	lsls	r2, r1, #24
 80087e8:	d50b      	bpl.n	8008802 <_printf_i+0x162>
 80087ea:	07ca      	lsls	r2, r1, #31
 80087ec:	bf44      	itt	mi
 80087ee:	f041 0120 	orrmi.w	r1, r1, #32
 80087f2:	6021      	strmi	r1, [r4, #0]
 80087f4:	b91b      	cbnz	r3, 80087fe <_printf_i+0x15e>
 80087f6:	6822      	ldr	r2, [r4, #0]
 80087f8:	f022 0220 	bic.w	r2, r2, #32
 80087fc:	6022      	str	r2, [r4, #0]
 80087fe:	2210      	movs	r2, #16
 8008800:	e7b7      	b.n	8008772 <_printf_i+0xd2>
 8008802:	064d      	lsls	r5, r1, #25
 8008804:	bf48      	it	mi
 8008806:	b29b      	uxthmi	r3, r3
 8008808:	e7ef      	b.n	80087ea <_printf_i+0x14a>
 800880a:	4665      	mov	r5, ip
 800880c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008810:	fb02 3311 	mls	r3, r2, r1, r3
 8008814:	5cc3      	ldrb	r3, [r0, r3]
 8008816:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800881a:	460b      	mov	r3, r1
 800881c:	2900      	cmp	r1, #0
 800881e:	d1f5      	bne.n	800880c <_printf_i+0x16c>
 8008820:	e7b9      	b.n	8008796 <_printf_i+0xf6>
 8008822:	6813      	ldr	r3, [r2, #0]
 8008824:	6825      	ldr	r5, [r4, #0]
 8008826:	6961      	ldr	r1, [r4, #20]
 8008828:	1d18      	adds	r0, r3, #4
 800882a:	6010      	str	r0, [r2, #0]
 800882c:	0628      	lsls	r0, r5, #24
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	d501      	bpl.n	8008836 <_printf_i+0x196>
 8008832:	6019      	str	r1, [r3, #0]
 8008834:	e002      	b.n	800883c <_printf_i+0x19c>
 8008836:	066a      	lsls	r2, r5, #25
 8008838:	d5fb      	bpl.n	8008832 <_printf_i+0x192>
 800883a:	8019      	strh	r1, [r3, #0]
 800883c:	2300      	movs	r3, #0
 800883e:	6123      	str	r3, [r4, #16]
 8008840:	4665      	mov	r5, ip
 8008842:	e7b9      	b.n	80087b8 <_printf_i+0x118>
 8008844:	6813      	ldr	r3, [r2, #0]
 8008846:	1d19      	adds	r1, r3, #4
 8008848:	6011      	str	r1, [r2, #0]
 800884a:	681d      	ldr	r5, [r3, #0]
 800884c:	6862      	ldr	r2, [r4, #4]
 800884e:	2100      	movs	r1, #0
 8008850:	4628      	mov	r0, r5
 8008852:	f7f7 fced 	bl	8000230 <memchr>
 8008856:	b108      	cbz	r0, 800885c <_printf_i+0x1bc>
 8008858:	1b40      	subs	r0, r0, r5
 800885a:	6060      	str	r0, [r4, #4]
 800885c:	6863      	ldr	r3, [r4, #4]
 800885e:	6123      	str	r3, [r4, #16]
 8008860:	2300      	movs	r3, #0
 8008862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008866:	e7a7      	b.n	80087b8 <_printf_i+0x118>
 8008868:	6923      	ldr	r3, [r4, #16]
 800886a:	462a      	mov	r2, r5
 800886c:	4639      	mov	r1, r7
 800886e:	4630      	mov	r0, r6
 8008870:	47c0      	blx	r8
 8008872:	3001      	adds	r0, #1
 8008874:	d0aa      	beq.n	80087cc <_printf_i+0x12c>
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	079b      	lsls	r3, r3, #30
 800887a:	d413      	bmi.n	80088a4 <_printf_i+0x204>
 800887c:	68e0      	ldr	r0, [r4, #12]
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	4298      	cmp	r0, r3
 8008882:	bfb8      	it	lt
 8008884:	4618      	movlt	r0, r3
 8008886:	e7a3      	b.n	80087d0 <_printf_i+0x130>
 8008888:	2301      	movs	r3, #1
 800888a:	464a      	mov	r2, r9
 800888c:	4639      	mov	r1, r7
 800888e:	4630      	mov	r0, r6
 8008890:	47c0      	blx	r8
 8008892:	3001      	adds	r0, #1
 8008894:	d09a      	beq.n	80087cc <_printf_i+0x12c>
 8008896:	3501      	adds	r5, #1
 8008898:	68e3      	ldr	r3, [r4, #12]
 800889a:	9a03      	ldr	r2, [sp, #12]
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	42ab      	cmp	r3, r5
 80088a0:	dcf2      	bgt.n	8008888 <_printf_i+0x1e8>
 80088a2:	e7eb      	b.n	800887c <_printf_i+0x1dc>
 80088a4:	2500      	movs	r5, #0
 80088a6:	f104 0919 	add.w	r9, r4, #25
 80088aa:	e7f5      	b.n	8008898 <_printf_i+0x1f8>
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1ac      	bne.n	800880a <_printf_i+0x16a>
 80088b0:	7803      	ldrb	r3, [r0, #0]
 80088b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088ba:	e76c      	b.n	8008796 <_printf_i+0xf6>
 80088bc:	0800d25c 	.word	0x0800d25c
 80088c0:	0800d26d 	.word	0x0800d26d

080088c4 <sniprintf>:
 80088c4:	b40c      	push	{r2, r3}
 80088c6:	b530      	push	{r4, r5, lr}
 80088c8:	4b17      	ldr	r3, [pc, #92]	; (8008928 <sniprintf+0x64>)
 80088ca:	1e0c      	subs	r4, r1, #0
 80088cc:	b09d      	sub	sp, #116	; 0x74
 80088ce:	681d      	ldr	r5, [r3, #0]
 80088d0:	da08      	bge.n	80088e4 <sniprintf+0x20>
 80088d2:	238b      	movs	r3, #139	; 0x8b
 80088d4:	602b      	str	r3, [r5, #0]
 80088d6:	f04f 30ff 	mov.w	r0, #4294967295
 80088da:	b01d      	add	sp, #116	; 0x74
 80088dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088e0:	b002      	add	sp, #8
 80088e2:	4770      	bx	lr
 80088e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80088e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80088ec:	bf14      	ite	ne
 80088ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80088f2:	4623      	moveq	r3, r4
 80088f4:	9304      	str	r3, [sp, #16]
 80088f6:	9307      	str	r3, [sp, #28]
 80088f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088fc:	9002      	str	r0, [sp, #8]
 80088fe:	9006      	str	r0, [sp, #24]
 8008900:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008904:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008906:	ab21      	add	r3, sp, #132	; 0x84
 8008908:	a902      	add	r1, sp, #8
 800890a:	4628      	mov	r0, r5
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	f001 fa8b 	bl	8009e28 <_svfiprintf_r>
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	bfbc      	itt	lt
 8008916:	238b      	movlt	r3, #139	; 0x8b
 8008918:	602b      	strlt	r3, [r5, #0]
 800891a:	2c00      	cmp	r4, #0
 800891c:	d0dd      	beq.n	80088da <sniprintf+0x16>
 800891e:	9b02      	ldr	r3, [sp, #8]
 8008920:	2200      	movs	r2, #0
 8008922:	701a      	strb	r2, [r3, #0]
 8008924:	e7d9      	b.n	80088da <sniprintf+0x16>
 8008926:	bf00      	nop
 8008928:	20000020 	.word	0x20000020

0800892c <siscanf>:
 800892c:	b40e      	push	{r1, r2, r3}
 800892e:	b530      	push	{r4, r5, lr}
 8008930:	b09c      	sub	sp, #112	; 0x70
 8008932:	ac1f      	add	r4, sp, #124	; 0x7c
 8008934:	f44f 7201 	mov.w	r2, #516	; 0x204
 8008938:	f854 5b04 	ldr.w	r5, [r4], #4
 800893c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008940:	9002      	str	r0, [sp, #8]
 8008942:	9006      	str	r0, [sp, #24]
 8008944:	f7f7 fc6c 	bl	8000220 <strlen>
 8008948:	4b0b      	ldr	r3, [pc, #44]	; (8008978 <siscanf+0x4c>)
 800894a:	9003      	str	r0, [sp, #12]
 800894c:	9007      	str	r0, [sp, #28]
 800894e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008950:	480a      	ldr	r0, [pc, #40]	; (800897c <siscanf+0x50>)
 8008952:	9401      	str	r4, [sp, #4]
 8008954:	2300      	movs	r3, #0
 8008956:	930f      	str	r3, [sp, #60]	; 0x3c
 8008958:	9314      	str	r3, [sp, #80]	; 0x50
 800895a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800895e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008962:	462a      	mov	r2, r5
 8008964:	4623      	mov	r3, r4
 8008966:	a902      	add	r1, sp, #8
 8008968:	6800      	ldr	r0, [r0, #0]
 800896a:	f001 fbaf 	bl	800a0cc <__ssvfiscanf_r>
 800896e:	b01c      	add	sp, #112	; 0x70
 8008970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008974:	b003      	add	sp, #12
 8008976:	4770      	bx	lr
 8008978:	08008981 	.word	0x08008981
 800897c:	20000020 	.word	0x20000020

08008980 <__seofread>:
 8008980:	2000      	movs	r0, #0
 8008982:	4770      	bx	lr

08008984 <quorem>:
 8008984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008988:	6903      	ldr	r3, [r0, #16]
 800898a:	690c      	ldr	r4, [r1, #16]
 800898c:	42a3      	cmp	r3, r4
 800898e:	4680      	mov	r8, r0
 8008990:	f2c0 8082 	blt.w	8008a98 <quorem+0x114>
 8008994:	3c01      	subs	r4, #1
 8008996:	f101 0714 	add.w	r7, r1, #20
 800899a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800899e:	f100 0614 	add.w	r6, r0, #20
 80089a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80089a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80089aa:	eb06 030c 	add.w	r3, r6, ip
 80089ae:	3501      	adds	r5, #1
 80089b0:	eb07 090c 	add.w	r9, r7, ip
 80089b4:	9301      	str	r3, [sp, #4]
 80089b6:	fbb0 f5f5 	udiv	r5, r0, r5
 80089ba:	b395      	cbz	r5, 8008a22 <quorem+0x9e>
 80089bc:	f04f 0a00 	mov.w	sl, #0
 80089c0:	4638      	mov	r0, r7
 80089c2:	46b6      	mov	lr, r6
 80089c4:	46d3      	mov	fp, sl
 80089c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80089ca:	b293      	uxth	r3, r2
 80089cc:	fb05 a303 	mla	r3, r5, r3, sl
 80089d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	ebab 0303 	sub.w	r3, fp, r3
 80089da:	0c12      	lsrs	r2, r2, #16
 80089dc:	f8de b000 	ldr.w	fp, [lr]
 80089e0:	fb05 a202 	mla	r2, r5, r2, sl
 80089e4:	fa13 f38b 	uxtah	r3, r3, fp
 80089e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80089ec:	fa1f fb82 	uxth.w	fp, r2
 80089f0:	f8de 2000 	ldr.w	r2, [lr]
 80089f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80089f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a02:	4581      	cmp	r9, r0
 8008a04:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008a08:	f84e 3b04 	str.w	r3, [lr], #4
 8008a0c:	d2db      	bcs.n	80089c6 <quorem+0x42>
 8008a0e:	f856 300c 	ldr.w	r3, [r6, ip]
 8008a12:	b933      	cbnz	r3, 8008a22 <quorem+0x9e>
 8008a14:	9b01      	ldr	r3, [sp, #4]
 8008a16:	3b04      	subs	r3, #4
 8008a18:	429e      	cmp	r6, r3
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	d330      	bcc.n	8008a80 <quorem+0xfc>
 8008a1e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008a22:	4640      	mov	r0, r8
 8008a24:	f001 f82a 	bl	8009a7c <__mcmp>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	db25      	blt.n	8008a78 <quorem+0xf4>
 8008a2c:	3501      	adds	r5, #1
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f04f 0c00 	mov.w	ip, #0
 8008a34:	f857 2b04 	ldr.w	r2, [r7], #4
 8008a38:	f8d0 e000 	ldr.w	lr, [r0]
 8008a3c:	b293      	uxth	r3, r2
 8008a3e:	ebac 0303 	sub.w	r3, ip, r3
 8008a42:	0c12      	lsrs	r2, r2, #16
 8008a44:	fa13 f38e 	uxtah	r3, r3, lr
 8008a48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a56:	45b9      	cmp	r9, r7
 8008a58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a5c:	f840 3b04 	str.w	r3, [r0], #4
 8008a60:	d2e8      	bcs.n	8008a34 <quorem+0xb0>
 8008a62:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008a66:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008a6a:	b92a      	cbnz	r2, 8008a78 <quorem+0xf4>
 8008a6c:	3b04      	subs	r3, #4
 8008a6e:	429e      	cmp	r6, r3
 8008a70:	461a      	mov	r2, r3
 8008a72:	d30b      	bcc.n	8008a8c <quorem+0x108>
 8008a74:	f8c8 4010 	str.w	r4, [r8, #16]
 8008a78:	4628      	mov	r0, r5
 8008a7a:	b003      	add	sp, #12
 8008a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	3b04      	subs	r3, #4
 8008a84:	2a00      	cmp	r2, #0
 8008a86:	d1ca      	bne.n	8008a1e <quorem+0x9a>
 8008a88:	3c01      	subs	r4, #1
 8008a8a:	e7c5      	b.n	8008a18 <quorem+0x94>
 8008a8c:	6812      	ldr	r2, [r2, #0]
 8008a8e:	3b04      	subs	r3, #4
 8008a90:	2a00      	cmp	r2, #0
 8008a92:	d1ef      	bne.n	8008a74 <quorem+0xf0>
 8008a94:	3c01      	subs	r4, #1
 8008a96:	e7ea      	b.n	8008a6e <quorem+0xea>
 8008a98:	2000      	movs	r0, #0
 8008a9a:	e7ee      	b.n	8008a7a <quorem+0xf6>
 8008a9c:	0000      	movs	r0, r0
	...

08008aa0 <_dtoa_r>:
 8008aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	ec57 6b10 	vmov	r6, r7, d0
 8008aa8:	b097      	sub	sp, #92	; 0x5c
 8008aaa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008aac:	9106      	str	r1, [sp, #24]
 8008aae:	4604      	mov	r4, r0
 8008ab0:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ab2:	9312      	str	r3, [sp, #72]	; 0x48
 8008ab4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ab8:	e9cd 6700 	strd	r6, r7, [sp]
 8008abc:	b93d      	cbnz	r5, 8008ace <_dtoa_r+0x2e>
 8008abe:	2010      	movs	r0, #16
 8008ac0:	f000 fdb4 	bl	800962c <malloc>
 8008ac4:	6260      	str	r0, [r4, #36]	; 0x24
 8008ac6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008aca:	6005      	str	r5, [r0, #0]
 8008acc:	60c5      	str	r5, [r0, #12]
 8008ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ad0:	6819      	ldr	r1, [r3, #0]
 8008ad2:	b151      	cbz	r1, 8008aea <_dtoa_r+0x4a>
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	604a      	str	r2, [r1, #4]
 8008ad8:	2301      	movs	r3, #1
 8008ada:	4093      	lsls	r3, r2
 8008adc:	608b      	str	r3, [r1, #8]
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f000 fdeb 	bl	80096ba <_Bfree>
 8008ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	1e3b      	subs	r3, r7, #0
 8008aec:	bfbb      	ittet	lt
 8008aee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008af2:	9301      	strlt	r3, [sp, #4]
 8008af4:	2300      	movge	r3, #0
 8008af6:	2201      	movlt	r2, #1
 8008af8:	bfac      	ite	ge
 8008afa:	f8c8 3000 	strge.w	r3, [r8]
 8008afe:	f8c8 2000 	strlt.w	r2, [r8]
 8008b02:	4baf      	ldr	r3, [pc, #700]	; (8008dc0 <_dtoa_r+0x320>)
 8008b04:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008b08:	ea33 0308 	bics.w	r3, r3, r8
 8008b0c:	d114      	bne.n	8008b38 <_dtoa_r+0x98>
 8008b0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b10:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	9b00      	ldr	r3, [sp, #0]
 8008b18:	b923      	cbnz	r3, 8008b24 <_dtoa_r+0x84>
 8008b1a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	f000 8542 	beq.w	80095a8 <_dtoa_r+0xb08>
 8008b24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b26:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008dd4 <_dtoa_r+0x334>
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 8544 	beq.w	80095b8 <_dtoa_r+0xb18>
 8008b30:	f10b 0303 	add.w	r3, fp, #3
 8008b34:	f000 bd3e 	b.w	80095b4 <_dtoa_r+0xb14>
 8008b38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2300      	movs	r3, #0
 8008b40:	4630      	mov	r0, r6
 8008b42:	4639      	mov	r1, r7
 8008b44:	f7f7 ffe8 	bl	8000b18 <__aeabi_dcmpeq>
 8008b48:	4681      	mov	r9, r0
 8008b4a:	b168      	cbz	r0, 8008b68 <_dtoa_r+0xc8>
 8008b4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b4e:	2301      	movs	r3, #1
 8008b50:	6013      	str	r3, [r2, #0]
 8008b52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 8524 	beq.w	80095a2 <_dtoa_r+0xb02>
 8008b5a:	4b9a      	ldr	r3, [pc, #616]	; (8008dc4 <_dtoa_r+0x324>)
 8008b5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b5e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	f000 bd28 	b.w	80095b8 <_dtoa_r+0xb18>
 8008b68:	aa14      	add	r2, sp, #80	; 0x50
 8008b6a:	a915      	add	r1, sp, #84	; 0x54
 8008b6c:	ec47 6b10 	vmov	d0, r6, r7
 8008b70:	4620      	mov	r0, r4
 8008b72:	f000 fffa 	bl	8009b6a <__d2b>
 8008b76:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008b7a:	9004      	str	r0, [sp, #16]
 8008b7c:	2d00      	cmp	r5, #0
 8008b7e:	d07c      	beq.n	8008c7a <_dtoa_r+0x1da>
 8008b80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b84:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008b88:	46b2      	mov	sl, r6
 8008b8a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008b8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b92:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008b96:	2200      	movs	r2, #0
 8008b98:	4b8b      	ldr	r3, [pc, #556]	; (8008dc8 <_dtoa_r+0x328>)
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	4659      	mov	r1, fp
 8008b9e:	f7f7 fb9b 	bl	80002d8 <__aeabi_dsub>
 8008ba2:	a381      	add	r3, pc, #516	; (adr r3, 8008da8 <_dtoa_r+0x308>)
 8008ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba8:	f7f7 fd4e 	bl	8000648 <__aeabi_dmul>
 8008bac:	a380      	add	r3, pc, #512	; (adr r3, 8008db0 <_dtoa_r+0x310>)
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	f7f7 fb93 	bl	80002dc <__adddf3>
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	4628      	mov	r0, r5
 8008bba:	460f      	mov	r7, r1
 8008bbc:	f7f7 fcda 	bl	8000574 <__aeabi_i2d>
 8008bc0:	a37d      	add	r3, pc, #500	; (adr r3, 8008db8 <_dtoa_r+0x318>)
 8008bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc6:	f7f7 fd3f 	bl	8000648 <__aeabi_dmul>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4630      	mov	r0, r6
 8008bd0:	4639      	mov	r1, r7
 8008bd2:	f7f7 fb83 	bl	80002dc <__adddf3>
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	460f      	mov	r7, r1
 8008bda:	f7f7 ffe5 	bl	8000ba8 <__aeabi_d2iz>
 8008bde:	2200      	movs	r2, #0
 8008be0:	4682      	mov	sl, r0
 8008be2:	2300      	movs	r3, #0
 8008be4:	4630      	mov	r0, r6
 8008be6:	4639      	mov	r1, r7
 8008be8:	f7f7 ffa0 	bl	8000b2c <__aeabi_dcmplt>
 8008bec:	b148      	cbz	r0, 8008c02 <_dtoa_r+0x162>
 8008bee:	4650      	mov	r0, sl
 8008bf0:	f7f7 fcc0 	bl	8000574 <__aeabi_i2d>
 8008bf4:	4632      	mov	r2, r6
 8008bf6:	463b      	mov	r3, r7
 8008bf8:	f7f7 ff8e 	bl	8000b18 <__aeabi_dcmpeq>
 8008bfc:	b908      	cbnz	r0, 8008c02 <_dtoa_r+0x162>
 8008bfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c02:	f1ba 0f16 	cmp.w	sl, #22
 8008c06:	d859      	bhi.n	8008cbc <_dtoa_r+0x21c>
 8008c08:	4970      	ldr	r1, [pc, #448]	; (8008dcc <_dtoa_r+0x32c>)
 8008c0a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c16:	f7f7 ffa7 	bl	8000b68 <__aeabi_dcmpgt>
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	d050      	beq.n	8008cc0 <_dtoa_r+0x220>
 8008c1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c22:	2300      	movs	r3, #0
 8008c24:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c28:	1b5d      	subs	r5, r3, r5
 8008c2a:	f1b5 0801 	subs.w	r8, r5, #1
 8008c2e:	bf49      	itett	mi
 8008c30:	f1c5 0301 	rsbmi	r3, r5, #1
 8008c34:	2300      	movpl	r3, #0
 8008c36:	9305      	strmi	r3, [sp, #20]
 8008c38:	f04f 0800 	movmi.w	r8, #0
 8008c3c:	bf58      	it	pl
 8008c3e:	9305      	strpl	r3, [sp, #20]
 8008c40:	f1ba 0f00 	cmp.w	sl, #0
 8008c44:	db3e      	blt.n	8008cc4 <_dtoa_r+0x224>
 8008c46:	2300      	movs	r3, #0
 8008c48:	44d0      	add	r8, sl
 8008c4a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008c4e:	9307      	str	r3, [sp, #28]
 8008c50:	9b06      	ldr	r3, [sp, #24]
 8008c52:	2b09      	cmp	r3, #9
 8008c54:	f200 8090 	bhi.w	8008d78 <_dtoa_r+0x2d8>
 8008c58:	2b05      	cmp	r3, #5
 8008c5a:	bfc4      	itt	gt
 8008c5c:	3b04      	subgt	r3, #4
 8008c5e:	9306      	strgt	r3, [sp, #24]
 8008c60:	9b06      	ldr	r3, [sp, #24]
 8008c62:	f1a3 0302 	sub.w	r3, r3, #2
 8008c66:	bfcc      	ite	gt
 8008c68:	2500      	movgt	r5, #0
 8008c6a:	2501      	movle	r5, #1
 8008c6c:	2b03      	cmp	r3, #3
 8008c6e:	f200 808f 	bhi.w	8008d90 <_dtoa_r+0x2f0>
 8008c72:	e8df f003 	tbb	[pc, r3]
 8008c76:	7f7d      	.short	0x7f7d
 8008c78:	7131      	.short	0x7131
 8008c7a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008c7e:	441d      	add	r5, r3
 8008c80:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008c84:	2820      	cmp	r0, #32
 8008c86:	dd13      	ble.n	8008cb0 <_dtoa_r+0x210>
 8008c88:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008c8c:	9b00      	ldr	r3, [sp, #0]
 8008c8e:	fa08 f800 	lsl.w	r8, r8, r0
 8008c92:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008c96:	fa23 f000 	lsr.w	r0, r3, r0
 8008c9a:	ea48 0000 	orr.w	r0, r8, r0
 8008c9e:	f7f7 fc59 	bl	8000554 <__aeabi_ui2d>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4682      	mov	sl, r0
 8008ca6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008caa:	3d01      	subs	r5, #1
 8008cac:	9313      	str	r3, [sp, #76]	; 0x4c
 8008cae:	e772      	b.n	8008b96 <_dtoa_r+0xf6>
 8008cb0:	9b00      	ldr	r3, [sp, #0]
 8008cb2:	f1c0 0020 	rsb	r0, r0, #32
 8008cb6:	fa03 f000 	lsl.w	r0, r3, r0
 8008cba:	e7f0      	b.n	8008c9e <_dtoa_r+0x1fe>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e7b1      	b.n	8008c24 <_dtoa_r+0x184>
 8008cc0:	900f      	str	r0, [sp, #60]	; 0x3c
 8008cc2:	e7b0      	b.n	8008c26 <_dtoa_r+0x186>
 8008cc4:	9b05      	ldr	r3, [sp, #20]
 8008cc6:	eba3 030a 	sub.w	r3, r3, sl
 8008cca:	9305      	str	r3, [sp, #20]
 8008ccc:	f1ca 0300 	rsb	r3, sl, #0
 8008cd0:	9307      	str	r3, [sp, #28]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	930e      	str	r3, [sp, #56]	; 0x38
 8008cd6:	e7bb      	b.n	8008c50 <_dtoa_r+0x1b0>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	930a      	str	r3, [sp, #40]	; 0x28
 8008cdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	dd59      	ble.n	8008d96 <_dtoa_r+0x2f6>
 8008ce2:	9302      	str	r3, [sp, #8]
 8008ce4:	4699      	mov	r9, r3
 8008ce6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ce8:	2200      	movs	r2, #0
 8008cea:	6072      	str	r2, [r6, #4]
 8008cec:	2204      	movs	r2, #4
 8008cee:	f102 0014 	add.w	r0, r2, #20
 8008cf2:	4298      	cmp	r0, r3
 8008cf4:	6871      	ldr	r1, [r6, #4]
 8008cf6:	d953      	bls.n	8008da0 <_dtoa_r+0x300>
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f000 fcaa 	bl	8009652 <_Balloc>
 8008cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d00:	6030      	str	r0, [r6, #0]
 8008d02:	f1b9 0f0e 	cmp.w	r9, #14
 8008d06:	f8d3 b000 	ldr.w	fp, [r3]
 8008d0a:	f200 80e6 	bhi.w	8008eda <_dtoa_r+0x43a>
 8008d0e:	2d00      	cmp	r5, #0
 8008d10:	f000 80e3 	beq.w	8008eda <_dtoa_r+0x43a>
 8008d14:	ed9d 7b00 	vldr	d7, [sp]
 8008d18:	f1ba 0f00 	cmp.w	sl, #0
 8008d1c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008d20:	dd74      	ble.n	8008e0c <_dtoa_r+0x36c>
 8008d22:	4a2a      	ldr	r2, [pc, #168]	; (8008dcc <_dtoa_r+0x32c>)
 8008d24:	f00a 030f 	and.w	r3, sl, #15
 8008d28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d2c:	ed93 7b00 	vldr	d7, [r3]
 8008d30:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008d34:	06f0      	lsls	r0, r6, #27
 8008d36:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008d3a:	d565      	bpl.n	8008e08 <_dtoa_r+0x368>
 8008d3c:	4b24      	ldr	r3, [pc, #144]	; (8008dd0 <_dtoa_r+0x330>)
 8008d3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d46:	f7f7 fda9 	bl	800089c <__aeabi_ddiv>
 8008d4a:	e9cd 0100 	strd	r0, r1, [sp]
 8008d4e:	f006 060f 	and.w	r6, r6, #15
 8008d52:	2503      	movs	r5, #3
 8008d54:	4f1e      	ldr	r7, [pc, #120]	; (8008dd0 <_dtoa_r+0x330>)
 8008d56:	e04c      	b.n	8008df2 <_dtoa_r+0x352>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d5e:	4453      	add	r3, sl
 8008d60:	f103 0901 	add.w	r9, r3, #1
 8008d64:	9302      	str	r3, [sp, #8]
 8008d66:	464b      	mov	r3, r9
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	bfb8      	it	lt
 8008d6c:	2301      	movlt	r3, #1
 8008d6e:	e7ba      	b.n	8008ce6 <_dtoa_r+0x246>
 8008d70:	2300      	movs	r3, #0
 8008d72:	e7b2      	b.n	8008cda <_dtoa_r+0x23a>
 8008d74:	2300      	movs	r3, #0
 8008d76:	e7f0      	b.n	8008d5a <_dtoa_r+0x2ba>
 8008d78:	2501      	movs	r5, #1
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	9306      	str	r3, [sp, #24]
 8008d7e:	950a      	str	r5, [sp, #40]	; 0x28
 8008d80:	f04f 33ff 	mov.w	r3, #4294967295
 8008d84:	9302      	str	r3, [sp, #8]
 8008d86:	4699      	mov	r9, r3
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2312      	movs	r3, #18
 8008d8c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d8e:	e7aa      	b.n	8008ce6 <_dtoa_r+0x246>
 8008d90:	2301      	movs	r3, #1
 8008d92:	930a      	str	r3, [sp, #40]	; 0x28
 8008d94:	e7f4      	b.n	8008d80 <_dtoa_r+0x2e0>
 8008d96:	2301      	movs	r3, #1
 8008d98:	9302      	str	r3, [sp, #8]
 8008d9a:	4699      	mov	r9, r3
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	e7f5      	b.n	8008d8c <_dtoa_r+0x2ec>
 8008da0:	3101      	adds	r1, #1
 8008da2:	6071      	str	r1, [r6, #4]
 8008da4:	0052      	lsls	r2, r2, #1
 8008da6:	e7a2      	b.n	8008cee <_dtoa_r+0x24e>
 8008da8:	636f4361 	.word	0x636f4361
 8008dac:	3fd287a7 	.word	0x3fd287a7
 8008db0:	8b60c8b3 	.word	0x8b60c8b3
 8008db4:	3fc68a28 	.word	0x3fc68a28
 8008db8:	509f79fb 	.word	0x509f79fb
 8008dbc:	3fd34413 	.word	0x3fd34413
 8008dc0:	7ff00000 	.word	0x7ff00000
 8008dc4:	0800d3b4 	.word	0x0800d3b4
 8008dc8:	3ff80000 	.word	0x3ff80000
 8008dcc:	0800d2b8 	.word	0x0800d2b8
 8008dd0:	0800d290 	.word	0x0800d290
 8008dd4:	0800d287 	.word	0x0800d287
 8008dd8:	07f1      	lsls	r1, r6, #31
 8008dda:	d508      	bpl.n	8008dee <_dtoa_r+0x34e>
 8008ddc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008de4:	f7f7 fc30 	bl	8000648 <__aeabi_dmul>
 8008de8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008dec:	3501      	adds	r5, #1
 8008dee:	1076      	asrs	r6, r6, #1
 8008df0:	3708      	adds	r7, #8
 8008df2:	2e00      	cmp	r6, #0
 8008df4:	d1f0      	bne.n	8008dd8 <_dtoa_r+0x338>
 8008df6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008dfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dfe:	f7f7 fd4d 	bl	800089c <__aeabi_ddiv>
 8008e02:	e9cd 0100 	strd	r0, r1, [sp]
 8008e06:	e01a      	b.n	8008e3e <_dtoa_r+0x39e>
 8008e08:	2502      	movs	r5, #2
 8008e0a:	e7a3      	b.n	8008d54 <_dtoa_r+0x2b4>
 8008e0c:	f000 80a0 	beq.w	8008f50 <_dtoa_r+0x4b0>
 8008e10:	f1ca 0600 	rsb	r6, sl, #0
 8008e14:	4b9f      	ldr	r3, [pc, #636]	; (8009094 <_dtoa_r+0x5f4>)
 8008e16:	4fa0      	ldr	r7, [pc, #640]	; (8009098 <_dtoa_r+0x5f8>)
 8008e18:	f006 020f 	and.w	r2, r6, #15
 8008e1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e28:	f7f7 fc0e 	bl	8000648 <__aeabi_dmul>
 8008e2c:	e9cd 0100 	strd	r0, r1, [sp]
 8008e30:	1136      	asrs	r6, r6, #4
 8008e32:	2300      	movs	r3, #0
 8008e34:	2502      	movs	r5, #2
 8008e36:	2e00      	cmp	r6, #0
 8008e38:	d17f      	bne.n	8008f3a <_dtoa_r+0x49a>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1e1      	bne.n	8008e02 <_dtoa_r+0x362>
 8008e3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 8087 	beq.w	8008f54 <_dtoa_r+0x4b4>
 8008e46:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	4b93      	ldr	r3, [pc, #588]	; (800909c <_dtoa_r+0x5fc>)
 8008e4e:	4630      	mov	r0, r6
 8008e50:	4639      	mov	r1, r7
 8008e52:	f7f7 fe6b 	bl	8000b2c <__aeabi_dcmplt>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d07c      	beq.n	8008f54 <_dtoa_r+0x4b4>
 8008e5a:	f1b9 0f00 	cmp.w	r9, #0
 8008e5e:	d079      	beq.n	8008f54 <_dtoa_r+0x4b4>
 8008e60:	9b02      	ldr	r3, [sp, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	dd35      	ble.n	8008ed2 <_dtoa_r+0x432>
 8008e66:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008e6a:	9308      	str	r3, [sp, #32]
 8008e6c:	4639      	mov	r1, r7
 8008e6e:	2200      	movs	r2, #0
 8008e70:	4b8b      	ldr	r3, [pc, #556]	; (80090a0 <_dtoa_r+0x600>)
 8008e72:	4630      	mov	r0, r6
 8008e74:	f7f7 fbe8 	bl	8000648 <__aeabi_dmul>
 8008e78:	e9cd 0100 	strd	r0, r1, [sp]
 8008e7c:	9f02      	ldr	r7, [sp, #8]
 8008e7e:	3501      	adds	r5, #1
 8008e80:	4628      	mov	r0, r5
 8008e82:	f7f7 fb77 	bl	8000574 <__aeabi_i2d>
 8008e86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e8a:	f7f7 fbdd 	bl	8000648 <__aeabi_dmul>
 8008e8e:	2200      	movs	r2, #0
 8008e90:	4b84      	ldr	r3, [pc, #528]	; (80090a4 <_dtoa_r+0x604>)
 8008e92:	f7f7 fa23 	bl	80002dc <__adddf3>
 8008e96:	4605      	mov	r5, r0
 8008e98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008e9c:	2f00      	cmp	r7, #0
 8008e9e:	d15d      	bne.n	8008f5c <_dtoa_r+0x4bc>
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	4b81      	ldr	r3, [pc, #516]	; (80090a8 <_dtoa_r+0x608>)
 8008ea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ea8:	f7f7 fa16 	bl	80002d8 <__aeabi_dsub>
 8008eac:	462a      	mov	r2, r5
 8008eae:	4633      	mov	r3, r6
 8008eb0:	e9cd 0100 	strd	r0, r1, [sp]
 8008eb4:	f7f7 fe58 	bl	8000b68 <__aeabi_dcmpgt>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	f040 8288 	bne.w	80093ce <_dtoa_r+0x92e>
 8008ebe:	462a      	mov	r2, r5
 8008ec0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008ec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ec8:	f7f7 fe30 	bl	8000b2c <__aeabi_dcmplt>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	f040 827c 	bne.w	80093ca <_dtoa_r+0x92a>
 8008ed2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ed6:	e9cd 2300 	strd	r2, r3, [sp]
 8008eda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f2c0 8150 	blt.w	8009182 <_dtoa_r+0x6e2>
 8008ee2:	f1ba 0f0e 	cmp.w	sl, #14
 8008ee6:	f300 814c 	bgt.w	8009182 <_dtoa_r+0x6e2>
 8008eea:	4b6a      	ldr	r3, [pc, #424]	; (8009094 <_dtoa_r+0x5f4>)
 8008eec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ef0:	ed93 7b00 	vldr	d7, [r3]
 8008ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008efc:	f280 80d8 	bge.w	80090b0 <_dtoa_r+0x610>
 8008f00:	f1b9 0f00 	cmp.w	r9, #0
 8008f04:	f300 80d4 	bgt.w	80090b0 <_dtoa_r+0x610>
 8008f08:	f040 825e 	bne.w	80093c8 <_dtoa_r+0x928>
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4b66      	ldr	r3, [pc, #408]	; (80090a8 <_dtoa_r+0x608>)
 8008f10:	ec51 0b17 	vmov	r0, r1, d7
 8008f14:	f7f7 fb98 	bl	8000648 <__aeabi_dmul>
 8008f18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f1c:	f7f7 fe1a 	bl	8000b54 <__aeabi_dcmpge>
 8008f20:	464f      	mov	r7, r9
 8008f22:	464e      	mov	r6, r9
 8008f24:	2800      	cmp	r0, #0
 8008f26:	f040 8234 	bne.w	8009392 <_dtoa_r+0x8f2>
 8008f2a:	2331      	movs	r3, #49	; 0x31
 8008f2c:	f10b 0501 	add.w	r5, fp, #1
 8008f30:	f88b 3000 	strb.w	r3, [fp]
 8008f34:	f10a 0a01 	add.w	sl, sl, #1
 8008f38:	e22f      	b.n	800939a <_dtoa_r+0x8fa>
 8008f3a:	07f2      	lsls	r2, r6, #31
 8008f3c:	d505      	bpl.n	8008f4a <_dtoa_r+0x4aa>
 8008f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f42:	f7f7 fb81 	bl	8000648 <__aeabi_dmul>
 8008f46:	3501      	adds	r5, #1
 8008f48:	2301      	movs	r3, #1
 8008f4a:	1076      	asrs	r6, r6, #1
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	e772      	b.n	8008e36 <_dtoa_r+0x396>
 8008f50:	2502      	movs	r5, #2
 8008f52:	e774      	b.n	8008e3e <_dtoa_r+0x39e>
 8008f54:	f8cd a020 	str.w	sl, [sp, #32]
 8008f58:	464f      	mov	r7, r9
 8008f5a:	e791      	b.n	8008e80 <_dtoa_r+0x3e0>
 8008f5c:	4b4d      	ldr	r3, [pc, #308]	; (8009094 <_dtoa_r+0x5f4>)
 8008f5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f62:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d047      	beq.n	8008ffc <_dtoa_r+0x55c>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	2000      	movs	r0, #0
 8008f72:	494e      	ldr	r1, [pc, #312]	; (80090ac <_dtoa_r+0x60c>)
 8008f74:	f7f7 fc92 	bl	800089c <__aeabi_ddiv>
 8008f78:	462a      	mov	r2, r5
 8008f7a:	4633      	mov	r3, r6
 8008f7c:	f7f7 f9ac 	bl	80002d8 <__aeabi_dsub>
 8008f80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f84:	465d      	mov	r5, fp
 8008f86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f8a:	f7f7 fe0d 	bl	8000ba8 <__aeabi_d2iz>
 8008f8e:	4606      	mov	r6, r0
 8008f90:	f7f7 faf0 	bl	8000574 <__aeabi_i2d>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f9c:	f7f7 f99c 	bl	80002d8 <__aeabi_dsub>
 8008fa0:	3630      	adds	r6, #48	; 0x30
 8008fa2:	f805 6b01 	strb.w	r6, [r5], #1
 8008fa6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008faa:	e9cd 0100 	strd	r0, r1, [sp]
 8008fae:	f7f7 fdbd 	bl	8000b2c <__aeabi_dcmplt>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d163      	bne.n	800907e <_dtoa_r+0x5de>
 8008fb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fba:	2000      	movs	r0, #0
 8008fbc:	4937      	ldr	r1, [pc, #220]	; (800909c <_dtoa_r+0x5fc>)
 8008fbe:	f7f7 f98b 	bl	80002d8 <__aeabi_dsub>
 8008fc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008fc6:	f7f7 fdb1 	bl	8000b2c <__aeabi_dcmplt>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	f040 80b7 	bne.w	800913e <_dtoa_r+0x69e>
 8008fd0:	eba5 030b 	sub.w	r3, r5, fp
 8008fd4:	429f      	cmp	r7, r3
 8008fd6:	f77f af7c 	ble.w	8008ed2 <_dtoa_r+0x432>
 8008fda:	2200      	movs	r2, #0
 8008fdc:	4b30      	ldr	r3, [pc, #192]	; (80090a0 <_dtoa_r+0x600>)
 8008fde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fe2:	f7f7 fb31 	bl	8000648 <__aeabi_dmul>
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008fec:	4b2c      	ldr	r3, [pc, #176]	; (80090a0 <_dtoa_r+0x600>)
 8008fee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ff2:	f7f7 fb29 	bl	8000648 <__aeabi_dmul>
 8008ff6:	e9cd 0100 	strd	r0, r1, [sp]
 8008ffa:	e7c4      	b.n	8008f86 <_dtoa_r+0x4e6>
 8008ffc:	462a      	mov	r2, r5
 8008ffe:	4633      	mov	r3, r6
 8009000:	f7f7 fb22 	bl	8000648 <__aeabi_dmul>
 8009004:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009008:	eb0b 0507 	add.w	r5, fp, r7
 800900c:	465e      	mov	r6, fp
 800900e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009012:	f7f7 fdc9 	bl	8000ba8 <__aeabi_d2iz>
 8009016:	4607      	mov	r7, r0
 8009018:	f7f7 faac 	bl	8000574 <__aeabi_i2d>
 800901c:	3730      	adds	r7, #48	; 0x30
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009026:	f7f7 f957 	bl	80002d8 <__aeabi_dsub>
 800902a:	f806 7b01 	strb.w	r7, [r6], #1
 800902e:	42ae      	cmp	r6, r5
 8009030:	e9cd 0100 	strd	r0, r1, [sp]
 8009034:	f04f 0200 	mov.w	r2, #0
 8009038:	d126      	bne.n	8009088 <_dtoa_r+0x5e8>
 800903a:	4b1c      	ldr	r3, [pc, #112]	; (80090ac <_dtoa_r+0x60c>)
 800903c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009040:	f7f7 f94c 	bl	80002dc <__adddf3>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	e9dd 0100 	ldrd	r0, r1, [sp]
 800904c:	f7f7 fd8c 	bl	8000b68 <__aeabi_dcmpgt>
 8009050:	2800      	cmp	r0, #0
 8009052:	d174      	bne.n	800913e <_dtoa_r+0x69e>
 8009054:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009058:	2000      	movs	r0, #0
 800905a:	4914      	ldr	r1, [pc, #80]	; (80090ac <_dtoa_r+0x60c>)
 800905c:	f7f7 f93c 	bl	80002d8 <__aeabi_dsub>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009068:	f7f7 fd60 	bl	8000b2c <__aeabi_dcmplt>
 800906c:	2800      	cmp	r0, #0
 800906e:	f43f af30 	beq.w	8008ed2 <_dtoa_r+0x432>
 8009072:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009076:	2b30      	cmp	r3, #48	; 0x30
 8009078:	f105 32ff 	add.w	r2, r5, #4294967295
 800907c:	d002      	beq.n	8009084 <_dtoa_r+0x5e4>
 800907e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009082:	e04a      	b.n	800911a <_dtoa_r+0x67a>
 8009084:	4615      	mov	r5, r2
 8009086:	e7f4      	b.n	8009072 <_dtoa_r+0x5d2>
 8009088:	4b05      	ldr	r3, [pc, #20]	; (80090a0 <_dtoa_r+0x600>)
 800908a:	f7f7 fadd 	bl	8000648 <__aeabi_dmul>
 800908e:	e9cd 0100 	strd	r0, r1, [sp]
 8009092:	e7bc      	b.n	800900e <_dtoa_r+0x56e>
 8009094:	0800d2b8 	.word	0x0800d2b8
 8009098:	0800d290 	.word	0x0800d290
 800909c:	3ff00000 	.word	0x3ff00000
 80090a0:	40240000 	.word	0x40240000
 80090a4:	401c0000 	.word	0x401c0000
 80090a8:	40140000 	.word	0x40140000
 80090ac:	3fe00000 	.word	0x3fe00000
 80090b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80090b4:	465d      	mov	r5, fp
 80090b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090ba:	4630      	mov	r0, r6
 80090bc:	4639      	mov	r1, r7
 80090be:	f7f7 fbed 	bl	800089c <__aeabi_ddiv>
 80090c2:	f7f7 fd71 	bl	8000ba8 <__aeabi_d2iz>
 80090c6:	4680      	mov	r8, r0
 80090c8:	f7f7 fa54 	bl	8000574 <__aeabi_i2d>
 80090cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090d0:	f7f7 faba 	bl	8000648 <__aeabi_dmul>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4630      	mov	r0, r6
 80090da:	4639      	mov	r1, r7
 80090dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80090e0:	f7f7 f8fa 	bl	80002d8 <__aeabi_dsub>
 80090e4:	f805 6b01 	strb.w	r6, [r5], #1
 80090e8:	eba5 060b 	sub.w	r6, r5, fp
 80090ec:	45b1      	cmp	r9, r6
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	d139      	bne.n	8009168 <_dtoa_r+0x6c8>
 80090f4:	f7f7 f8f2 	bl	80002dc <__adddf3>
 80090f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090fc:	4606      	mov	r6, r0
 80090fe:	460f      	mov	r7, r1
 8009100:	f7f7 fd32 	bl	8000b68 <__aeabi_dcmpgt>
 8009104:	b9c8      	cbnz	r0, 800913a <_dtoa_r+0x69a>
 8009106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800910a:	4630      	mov	r0, r6
 800910c:	4639      	mov	r1, r7
 800910e:	f7f7 fd03 	bl	8000b18 <__aeabi_dcmpeq>
 8009112:	b110      	cbz	r0, 800911a <_dtoa_r+0x67a>
 8009114:	f018 0f01 	tst.w	r8, #1
 8009118:	d10f      	bne.n	800913a <_dtoa_r+0x69a>
 800911a:	9904      	ldr	r1, [sp, #16]
 800911c:	4620      	mov	r0, r4
 800911e:	f000 facc 	bl	80096ba <_Bfree>
 8009122:	2300      	movs	r3, #0
 8009124:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009126:	702b      	strb	r3, [r5, #0]
 8009128:	f10a 0301 	add.w	r3, sl, #1
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 8241 	beq.w	80095b8 <_dtoa_r+0xb18>
 8009136:	601d      	str	r5, [r3, #0]
 8009138:	e23e      	b.n	80095b8 <_dtoa_r+0xb18>
 800913a:	f8cd a020 	str.w	sl, [sp, #32]
 800913e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009142:	2a39      	cmp	r2, #57	; 0x39
 8009144:	f105 33ff 	add.w	r3, r5, #4294967295
 8009148:	d108      	bne.n	800915c <_dtoa_r+0x6bc>
 800914a:	459b      	cmp	fp, r3
 800914c:	d10a      	bne.n	8009164 <_dtoa_r+0x6c4>
 800914e:	9b08      	ldr	r3, [sp, #32]
 8009150:	3301      	adds	r3, #1
 8009152:	9308      	str	r3, [sp, #32]
 8009154:	2330      	movs	r3, #48	; 0x30
 8009156:	f88b 3000 	strb.w	r3, [fp]
 800915a:	465b      	mov	r3, fp
 800915c:	781a      	ldrb	r2, [r3, #0]
 800915e:	3201      	adds	r2, #1
 8009160:	701a      	strb	r2, [r3, #0]
 8009162:	e78c      	b.n	800907e <_dtoa_r+0x5de>
 8009164:	461d      	mov	r5, r3
 8009166:	e7ea      	b.n	800913e <_dtoa_r+0x69e>
 8009168:	2200      	movs	r2, #0
 800916a:	4b9b      	ldr	r3, [pc, #620]	; (80093d8 <_dtoa_r+0x938>)
 800916c:	f7f7 fa6c 	bl	8000648 <__aeabi_dmul>
 8009170:	2200      	movs	r2, #0
 8009172:	2300      	movs	r3, #0
 8009174:	4606      	mov	r6, r0
 8009176:	460f      	mov	r7, r1
 8009178:	f7f7 fcce 	bl	8000b18 <__aeabi_dcmpeq>
 800917c:	2800      	cmp	r0, #0
 800917e:	d09a      	beq.n	80090b6 <_dtoa_r+0x616>
 8009180:	e7cb      	b.n	800911a <_dtoa_r+0x67a>
 8009182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009184:	2a00      	cmp	r2, #0
 8009186:	f000 808b 	beq.w	80092a0 <_dtoa_r+0x800>
 800918a:	9a06      	ldr	r2, [sp, #24]
 800918c:	2a01      	cmp	r2, #1
 800918e:	dc6e      	bgt.n	800926e <_dtoa_r+0x7ce>
 8009190:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009192:	2a00      	cmp	r2, #0
 8009194:	d067      	beq.n	8009266 <_dtoa_r+0x7c6>
 8009196:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800919a:	9f07      	ldr	r7, [sp, #28]
 800919c:	9d05      	ldr	r5, [sp, #20]
 800919e:	9a05      	ldr	r2, [sp, #20]
 80091a0:	2101      	movs	r1, #1
 80091a2:	441a      	add	r2, r3
 80091a4:	4620      	mov	r0, r4
 80091a6:	9205      	str	r2, [sp, #20]
 80091a8:	4498      	add	r8, r3
 80091aa:	f000 fb26 	bl	80097fa <__i2b>
 80091ae:	4606      	mov	r6, r0
 80091b0:	2d00      	cmp	r5, #0
 80091b2:	dd0c      	ble.n	80091ce <_dtoa_r+0x72e>
 80091b4:	f1b8 0f00 	cmp.w	r8, #0
 80091b8:	dd09      	ble.n	80091ce <_dtoa_r+0x72e>
 80091ba:	4545      	cmp	r5, r8
 80091bc:	9a05      	ldr	r2, [sp, #20]
 80091be:	462b      	mov	r3, r5
 80091c0:	bfa8      	it	ge
 80091c2:	4643      	movge	r3, r8
 80091c4:	1ad2      	subs	r2, r2, r3
 80091c6:	9205      	str	r2, [sp, #20]
 80091c8:	1aed      	subs	r5, r5, r3
 80091ca:	eba8 0803 	sub.w	r8, r8, r3
 80091ce:	9b07      	ldr	r3, [sp, #28]
 80091d0:	b1eb      	cbz	r3, 800920e <_dtoa_r+0x76e>
 80091d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d067      	beq.n	80092a8 <_dtoa_r+0x808>
 80091d8:	b18f      	cbz	r7, 80091fe <_dtoa_r+0x75e>
 80091da:	4631      	mov	r1, r6
 80091dc:	463a      	mov	r2, r7
 80091de:	4620      	mov	r0, r4
 80091e0:	f000 fbaa 	bl	8009938 <__pow5mult>
 80091e4:	9a04      	ldr	r2, [sp, #16]
 80091e6:	4601      	mov	r1, r0
 80091e8:	4606      	mov	r6, r0
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 fb0e 	bl	800980c <__multiply>
 80091f0:	9904      	ldr	r1, [sp, #16]
 80091f2:	9008      	str	r0, [sp, #32]
 80091f4:	4620      	mov	r0, r4
 80091f6:	f000 fa60 	bl	80096ba <_Bfree>
 80091fa:	9b08      	ldr	r3, [sp, #32]
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	9b07      	ldr	r3, [sp, #28]
 8009200:	1bda      	subs	r2, r3, r7
 8009202:	d004      	beq.n	800920e <_dtoa_r+0x76e>
 8009204:	9904      	ldr	r1, [sp, #16]
 8009206:	4620      	mov	r0, r4
 8009208:	f000 fb96 	bl	8009938 <__pow5mult>
 800920c:	9004      	str	r0, [sp, #16]
 800920e:	2101      	movs	r1, #1
 8009210:	4620      	mov	r0, r4
 8009212:	f000 faf2 	bl	80097fa <__i2b>
 8009216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009218:	4607      	mov	r7, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	f000 81d0 	beq.w	80095c0 <_dtoa_r+0xb20>
 8009220:	461a      	mov	r2, r3
 8009222:	4601      	mov	r1, r0
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fb87 	bl	8009938 <__pow5mult>
 800922a:	9b06      	ldr	r3, [sp, #24]
 800922c:	2b01      	cmp	r3, #1
 800922e:	4607      	mov	r7, r0
 8009230:	dc40      	bgt.n	80092b4 <_dtoa_r+0x814>
 8009232:	9b00      	ldr	r3, [sp, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d139      	bne.n	80092ac <_dtoa_r+0x80c>
 8009238:	9b01      	ldr	r3, [sp, #4]
 800923a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800923e:	2b00      	cmp	r3, #0
 8009240:	d136      	bne.n	80092b0 <_dtoa_r+0x810>
 8009242:	9b01      	ldr	r3, [sp, #4]
 8009244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009248:	0d1b      	lsrs	r3, r3, #20
 800924a:	051b      	lsls	r3, r3, #20
 800924c:	b12b      	cbz	r3, 800925a <_dtoa_r+0x7ba>
 800924e:	9b05      	ldr	r3, [sp, #20]
 8009250:	3301      	adds	r3, #1
 8009252:	9305      	str	r3, [sp, #20]
 8009254:	f108 0801 	add.w	r8, r8, #1
 8009258:	2301      	movs	r3, #1
 800925a:	9307      	str	r3, [sp, #28]
 800925c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800925e:	2b00      	cmp	r3, #0
 8009260:	d12a      	bne.n	80092b8 <_dtoa_r+0x818>
 8009262:	2001      	movs	r0, #1
 8009264:	e030      	b.n	80092c8 <_dtoa_r+0x828>
 8009266:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009268:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800926c:	e795      	b.n	800919a <_dtoa_r+0x6fa>
 800926e:	9b07      	ldr	r3, [sp, #28]
 8009270:	f109 37ff 	add.w	r7, r9, #4294967295
 8009274:	42bb      	cmp	r3, r7
 8009276:	bfbf      	itttt	lt
 8009278:	9b07      	ldrlt	r3, [sp, #28]
 800927a:	9707      	strlt	r7, [sp, #28]
 800927c:	1afa      	sublt	r2, r7, r3
 800927e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009280:	bfbb      	ittet	lt
 8009282:	189b      	addlt	r3, r3, r2
 8009284:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009286:	1bdf      	subge	r7, r3, r7
 8009288:	2700      	movlt	r7, #0
 800928a:	f1b9 0f00 	cmp.w	r9, #0
 800928e:	bfb5      	itete	lt
 8009290:	9b05      	ldrlt	r3, [sp, #20]
 8009292:	9d05      	ldrge	r5, [sp, #20]
 8009294:	eba3 0509 	sublt.w	r5, r3, r9
 8009298:	464b      	movge	r3, r9
 800929a:	bfb8      	it	lt
 800929c:	2300      	movlt	r3, #0
 800929e:	e77e      	b.n	800919e <_dtoa_r+0x6fe>
 80092a0:	9f07      	ldr	r7, [sp, #28]
 80092a2:	9d05      	ldr	r5, [sp, #20]
 80092a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80092a6:	e783      	b.n	80091b0 <_dtoa_r+0x710>
 80092a8:	9a07      	ldr	r2, [sp, #28]
 80092aa:	e7ab      	b.n	8009204 <_dtoa_r+0x764>
 80092ac:	2300      	movs	r3, #0
 80092ae:	e7d4      	b.n	800925a <_dtoa_r+0x7ba>
 80092b0:	9b00      	ldr	r3, [sp, #0]
 80092b2:	e7d2      	b.n	800925a <_dtoa_r+0x7ba>
 80092b4:	2300      	movs	r3, #0
 80092b6:	9307      	str	r3, [sp, #28]
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80092be:	6918      	ldr	r0, [r3, #16]
 80092c0:	f000 fa4d 	bl	800975e <__hi0bits>
 80092c4:	f1c0 0020 	rsb	r0, r0, #32
 80092c8:	4440      	add	r0, r8
 80092ca:	f010 001f 	ands.w	r0, r0, #31
 80092ce:	d047      	beq.n	8009360 <_dtoa_r+0x8c0>
 80092d0:	f1c0 0320 	rsb	r3, r0, #32
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	dd3b      	ble.n	8009350 <_dtoa_r+0x8b0>
 80092d8:	9b05      	ldr	r3, [sp, #20]
 80092da:	f1c0 001c 	rsb	r0, r0, #28
 80092de:	4403      	add	r3, r0
 80092e0:	9305      	str	r3, [sp, #20]
 80092e2:	4405      	add	r5, r0
 80092e4:	4480      	add	r8, r0
 80092e6:	9b05      	ldr	r3, [sp, #20]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	dd05      	ble.n	80092f8 <_dtoa_r+0x858>
 80092ec:	461a      	mov	r2, r3
 80092ee:	9904      	ldr	r1, [sp, #16]
 80092f0:	4620      	mov	r0, r4
 80092f2:	f000 fb6f 	bl	80099d4 <__lshift>
 80092f6:	9004      	str	r0, [sp, #16]
 80092f8:	f1b8 0f00 	cmp.w	r8, #0
 80092fc:	dd05      	ble.n	800930a <_dtoa_r+0x86a>
 80092fe:	4639      	mov	r1, r7
 8009300:	4642      	mov	r2, r8
 8009302:	4620      	mov	r0, r4
 8009304:	f000 fb66 	bl	80099d4 <__lshift>
 8009308:	4607      	mov	r7, r0
 800930a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800930c:	b353      	cbz	r3, 8009364 <_dtoa_r+0x8c4>
 800930e:	4639      	mov	r1, r7
 8009310:	9804      	ldr	r0, [sp, #16]
 8009312:	f000 fbb3 	bl	8009a7c <__mcmp>
 8009316:	2800      	cmp	r0, #0
 8009318:	da24      	bge.n	8009364 <_dtoa_r+0x8c4>
 800931a:	2300      	movs	r3, #0
 800931c:	220a      	movs	r2, #10
 800931e:	9904      	ldr	r1, [sp, #16]
 8009320:	4620      	mov	r0, r4
 8009322:	f000 f9e1 	bl	80096e8 <__multadd>
 8009326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009328:	9004      	str	r0, [sp, #16]
 800932a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 814d 	beq.w	80095ce <_dtoa_r+0xb2e>
 8009334:	2300      	movs	r3, #0
 8009336:	4631      	mov	r1, r6
 8009338:	220a      	movs	r2, #10
 800933a:	4620      	mov	r0, r4
 800933c:	f000 f9d4 	bl	80096e8 <__multadd>
 8009340:	9b02      	ldr	r3, [sp, #8]
 8009342:	2b00      	cmp	r3, #0
 8009344:	4606      	mov	r6, r0
 8009346:	dc4f      	bgt.n	80093e8 <_dtoa_r+0x948>
 8009348:	9b06      	ldr	r3, [sp, #24]
 800934a:	2b02      	cmp	r3, #2
 800934c:	dd4c      	ble.n	80093e8 <_dtoa_r+0x948>
 800934e:	e011      	b.n	8009374 <_dtoa_r+0x8d4>
 8009350:	d0c9      	beq.n	80092e6 <_dtoa_r+0x846>
 8009352:	9a05      	ldr	r2, [sp, #20]
 8009354:	331c      	adds	r3, #28
 8009356:	441a      	add	r2, r3
 8009358:	9205      	str	r2, [sp, #20]
 800935a:	441d      	add	r5, r3
 800935c:	4498      	add	r8, r3
 800935e:	e7c2      	b.n	80092e6 <_dtoa_r+0x846>
 8009360:	4603      	mov	r3, r0
 8009362:	e7f6      	b.n	8009352 <_dtoa_r+0x8b2>
 8009364:	f1b9 0f00 	cmp.w	r9, #0
 8009368:	dc38      	bgt.n	80093dc <_dtoa_r+0x93c>
 800936a:	9b06      	ldr	r3, [sp, #24]
 800936c:	2b02      	cmp	r3, #2
 800936e:	dd35      	ble.n	80093dc <_dtoa_r+0x93c>
 8009370:	f8cd 9008 	str.w	r9, [sp, #8]
 8009374:	9b02      	ldr	r3, [sp, #8]
 8009376:	b963      	cbnz	r3, 8009392 <_dtoa_r+0x8f2>
 8009378:	4639      	mov	r1, r7
 800937a:	2205      	movs	r2, #5
 800937c:	4620      	mov	r0, r4
 800937e:	f000 f9b3 	bl	80096e8 <__multadd>
 8009382:	4601      	mov	r1, r0
 8009384:	4607      	mov	r7, r0
 8009386:	9804      	ldr	r0, [sp, #16]
 8009388:	f000 fb78 	bl	8009a7c <__mcmp>
 800938c:	2800      	cmp	r0, #0
 800938e:	f73f adcc 	bgt.w	8008f2a <_dtoa_r+0x48a>
 8009392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009394:	465d      	mov	r5, fp
 8009396:	ea6f 0a03 	mvn.w	sl, r3
 800939a:	f04f 0900 	mov.w	r9, #0
 800939e:	4639      	mov	r1, r7
 80093a0:	4620      	mov	r0, r4
 80093a2:	f000 f98a 	bl	80096ba <_Bfree>
 80093a6:	2e00      	cmp	r6, #0
 80093a8:	f43f aeb7 	beq.w	800911a <_dtoa_r+0x67a>
 80093ac:	f1b9 0f00 	cmp.w	r9, #0
 80093b0:	d005      	beq.n	80093be <_dtoa_r+0x91e>
 80093b2:	45b1      	cmp	r9, r6
 80093b4:	d003      	beq.n	80093be <_dtoa_r+0x91e>
 80093b6:	4649      	mov	r1, r9
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 f97e 	bl	80096ba <_Bfree>
 80093be:	4631      	mov	r1, r6
 80093c0:	4620      	mov	r0, r4
 80093c2:	f000 f97a 	bl	80096ba <_Bfree>
 80093c6:	e6a8      	b.n	800911a <_dtoa_r+0x67a>
 80093c8:	2700      	movs	r7, #0
 80093ca:	463e      	mov	r6, r7
 80093cc:	e7e1      	b.n	8009392 <_dtoa_r+0x8f2>
 80093ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80093d2:	463e      	mov	r6, r7
 80093d4:	e5a9      	b.n	8008f2a <_dtoa_r+0x48a>
 80093d6:	bf00      	nop
 80093d8:	40240000 	.word	0x40240000
 80093dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093de:	f8cd 9008 	str.w	r9, [sp, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 80fa 	beq.w	80095dc <_dtoa_r+0xb3c>
 80093e8:	2d00      	cmp	r5, #0
 80093ea:	dd05      	ble.n	80093f8 <_dtoa_r+0x958>
 80093ec:	4631      	mov	r1, r6
 80093ee:	462a      	mov	r2, r5
 80093f0:	4620      	mov	r0, r4
 80093f2:	f000 faef 	bl	80099d4 <__lshift>
 80093f6:	4606      	mov	r6, r0
 80093f8:	9b07      	ldr	r3, [sp, #28]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d04c      	beq.n	8009498 <_dtoa_r+0x9f8>
 80093fe:	6871      	ldr	r1, [r6, #4]
 8009400:	4620      	mov	r0, r4
 8009402:	f000 f926 	bl	8009652 <_Balloc>
 8009406:	6932      	ldr	r2, [r6, #16]
 8009408:	3202      	adds	r2, #2
 800940a:	4605      	mov	r5, r0
 800940c:	0092      	lsls	r2, r2, #2
 800940e:	f106 010c 	add.w	r1, r6, #12
 8009412:	300c      	adds	r0, #12
 8009414:	f000 f912 	bl	800963c <memcpy>
 8009418:	2201      	movs	r2, #1
 800941a:	4629      	mov	r1, r5
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fad9 	bl	80099d4 <__lshift>
 8009422:	9b00      	ldr	r3, [sp, #0]
 8009424:	f8cd b014 	str.w	fp, [sp, #20]
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	46b1      	mov	r9, r6
 800942e:	9307      	str	r3, [sp, #28]
 8009430:	4606      	mov	r6, r0
 8009432:	4639      	mov	r1, r7
 8009434:	9804      	ldr	r0, [sp, #16]
 8009436:	f7ff faa5 	bl	8008984 <quorem>
 800943a:	4649      	mov	r1, r9
 800943c:	4605      	mov	r5, r0
 800943e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009442:	9804      	ldr	r0, [sp, #16]
 8009444:	f000 fb1a 	bl	8009a7c <__mcmp>
 8009448:	4632      	mov	r2, r6
 800944a:	9000      	str	r0, [sp, #0]
 800944c:	4639      	mov	r1, r7
 800944e:	4620      	mov	r0, r4
 8009450:	f000 fb2e 	bl	8009ab0 <__mdiff>
 8009454:	68c3      	ldr	r3, [r0, #12]
 8009456:	4602      	mov	r2, r0
 8009458:	bb03      	cbnz	r3, 800949c <_dtoa_r+0x9fc>
 800945a:	4601      	mov	r1, r0
 800945c:	9008      	str	r0, [sp, #32]
 800945e:	9804      	ldr	r0, [sp, #16]
 8009460:	f000 fb0c 	bl	8009a7c <__mcmp>
 8009464:	9a08      	ldr	r2, [sp, #32]
 8009466:	4603      	mov	r3, r0
 8009468:	4611      	mov	r1, r2
 800946a:	4620      	mov	r0, r4
 800946c:	9308      	str	r3, [sp, #32]
 800946e:	f000 f924 	bl	80096ba <_Bfree>
 8009472:	9b08      	ldr	r3, [sp, #32]
 8009474:	b9a3      	cbnz	r3, 80094a0 <_dtoa_r+0xa00>
 8009476:	9a06      	ldr	r2, [sp, #24]
 8009478:	b992      	cbnz	r2, 80094a0 <_dtoa_r+0xa00>
 800947a:	9a07      	ldr	r2, [sp, #28]
 800947c:	b982      	cbnz	r2, 80094a0 <_dtoa_r+0xa00>
 800947e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009482:	d029      	beq.n	80094d8 <_dtoa_r+0xa38>
 8009484:	9b00      	ldr	r3, [sp, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	dd01      	ble.n	800948e <_dtoa_r+0x9ee>
 800948a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800948e:	9b05      	ldr	r3, [sp, #20]
 8009490:	1c5d      	adds	r5, r3, #1
 8009492:	f883 8000 	strb.w	r8, [r3]
 8009496:	e782      	b.n	800939e <_dtoa_r+0x8fe>
 8009498:	4630      	mov	r0, r6
 800949a:	e7c2      	b.n	8009422 <_dtoa_r+0x982>
 800949c:	2301      	movs	r3, #1
 800949e:	e7e3      	b.n	8009468 <_dtoa_r+0x9c8>
 80094a0:	9a00      	ldr	r2, [sp, #0]
 80094a2:	2a00      	cmp	r2, #0
 80094a4:	db04      	blt.n	80094b0 <_dtoa_r+0xa10>
 80094a6:	d125      	bne.n	80094f4 <_dtoa_r+0xa54>
 80094a8:	9a06      	ldr	r2, [sp, #24]
 80094aa:	bb1a      	cbnz	r2, 80094f4 <_dtoa_r+0xa54>
 80094ac:	9a07      	ldr	r2, [sp, #28]
 80094ae:	bb0a      	cbnz	r2, 80094f4 <_dtoa_r+0xa54>
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	ddec      	ble.n	800948e <_dtoa_r+0x9ee>
 80094b4:	2201      	movs	r2, #1
 80094b6:	9904      	ldr	r1, [sp, #16]
 80094b8:	4620      	mov	r0, r4
 80094ba:	f000 fa8b 	bl	80099d4 <__lshift>
 80094be:	4639      	mov	r1, r7
 80094c0:	9004      	str	r0, [sp, #16]
 80094c2:	f000 fadb 	bl	8009a7c <__mcmp>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	dc03      	bgt.n	80094d2 <_dtoa_r+0xa32>
 80094ca:	d1e0      	bne.n	800948e <_dtoa_r+0x9ee>
 80094cc:	f018 0f01 	tst.w	r8, #1
 80094d0:	d0dd      	beq.n	800948e <_dtoa_r+0x9ee>
 80094d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80094d6:	d1d8      	bne.n	800948a <_dtoa_r+0x9ea>
 80094d8:	9b05      	ldr	r3, [sp, #20]
 80094da:	9a05      	ldr	r2, [sp, #20]
 80094dc:	1c5d      	adds	r5, r3, #1
 80094de:	2339      	movs	r3, #57	; 0x39
 80094e0:	7013      	strb	r3, [r2, #0]
 80094e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094e6:	2b39      	cmp	r3, #57	; 0x39
 80094e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80094ec:	d04f      	beq.n	800958e <_dtoa_r+0xaee>
 80094ee:	3301      	adds	r3, #1
 80094f0:	7013      	strb	r3, [r2, #0]
 80094f2:	e754      	b.n	800939e <_dtoa_r+0x8fe>
 80094f4:	9a05      	ldr	r2, [sp, #20]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f102 0501 	add.w	r5, r2, #1
 80094fc:	dd06      	ble.n	800950c <_dtoa_r+0xa6c>
 80094fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009502:	d0e9      	beq.n	80094d8 <_dtoa_r+0xa38>
 8009504:	f108 0801 	add.w	r8, r8, #1
 8009508:	9b05      	ldr	r3, [sp, #20]
 800950a:	e7c2      	b.n	8009492 <_dtoa_r+0x9f2>
 800950c:	9a02      	ldr	r2, [sp, #8]
 800950e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009512:	eba5 030b 	sub.w	r3, r5, fp
 8009516:	4293      	cmp	r3, r2
 8009518:	d021      	beq.n	800955e <_dtoa_r+0xabe>
 800951a:	2300      	movs	r3, #0
 800951c:	220a      	movs	r2, #10
 800951e:	9904      	ldr	r1, [sp, #16]
 8009520:	4620      	mov	r0, r4
 8009522:	f000 f8e1 	bl	80096e8 <__multadd>
 8009526:	45b1      	cmp	r9, r6
 8009528:	9004      	str	r0, [sp, #16]
 800952a:	f04f 0300 	mov.w	r3, #0
 800952e:	f04f 020a 	mov.w	r2, #10
 8009532:	4649      	mov	r1, r9
 8009534:	4620      	mov	r0, r4
 8009536:	d105      	bne.n	8009544 <_dtoa_r+0xaa4>
 8009538:	f000 f8d6 	bl	80096e8 <__multadd>
 800953c:	4681      	mov	r9, r0
 800953e:	4606      	mov	r6, r0
 8009540:	9505      	str	r5, [sp, #20]
 8009542:	e776      	b.n	8009432 <_dtoa_r+0x992>
 8009544:	f000 f8d0 	bl	80096e8 <__multadd>
 8009548:	4631      	mov	r1, r6
 800954a:	4681      	mov	r9, r0
 800954c:	2300      	movs	r3, #0
 800954e:	220a      	movs	r2, #10
 8009550:	4620      	mov	r0, r4
 8009552:	f000 f8c9 	bl	80096e8 <__multadd>
 8009556:	4606      	mov	r6, r0
 8009558:	e7f2      	b.n	8009540 <_dtoa_r+0xaa0>
 800955a:	f04f 0900 	mov.w	r9, #0
 800955e:	2201      	movs	r2, #1
 8009560:	9904      	ldr	r1, [sp, #16]
 8009562:	4620      	mov	r0, r4
 8009564:	f000 fa36 	bl	80099d4 <__lshift>
 8009568:	4639      	mov	r1, r7
 800956a:	9004      	str	r0, [sp, #16]
 800956c:	f000 fa86 	bl	8009a7c <__mcmp>
 8009570:	2800      	cmp	r0, #0
 8009572:	dcb6      	bgt.n	80094e2 <_dtoa_r+0xa42>
 8009574:	d102      	bne.n	800957c <_dtoa_r+0xadc>
 8009576:	f018 0f01 	tst.w	r8, #1
 800957a:	d1b2      	bne.n	80094e2 <_dtoa_r+0xa42>
 800957c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009580:	2b30      	cmp	r3, #48	; 0x30
 8009582:	f105 32ff 	add.w	r2, r5, #4294967295
 8009586:	f47f af0a 	bne.w	800939e <_dtoa_r+0x8fe>
 800958a:	4615      	mov	r5, r2
 800958c:	e7f6      	b.n	800957c <_dtoa_r+0xadc>
 800958e:	4593      	cmp	fp, r2
 8009590:	d105      	bne.n	800959e <_dtoa_r+0xafe>
 8009592:	2331      	movs	r3, #49	; 0x31
 8009594:	f10a 0a01 	add.w	sl, sl, #1
 8009598:	f88b 3000 	strb.w	r3, [fp]
 800959c:	e6ff      	b.n	800939e <_dtoa_r+0x8fe>
 800959e:	4615      	mov	r5, r2
 80095a0:	e79f      	b.n	80094e2 <_dtoa_r+0xa42>
 80095a2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009608 <_dtoa_r+0xb68>
 80095a6:	e007      	b.n	80095b8 <_dtoa_r+0xb18>
 80095a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095aa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800960c <_dtoa_r+0xb6c>
 80095ae:	b11b      	cbz	r3, 80095b8 <_dtoa_r+0xb18>
 80095b0:	f10b 0308 	add.w	r3, fp, #8
 80095b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	4658      	mov	r0, fp
 80095ba:	b017      	add	sp, #92	; 0x5c
 80095bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c0:	9b06      	ldr	r3, [sp, #24]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	f77f ae35 	ble.w	8009232 <_dtoa_r+0x792>
 80095c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095ca:	9307      	str	r3, [sp, #28]
 80095cc:	e649      	b.n	8009262 <_dtoa_r+0x7c2>
 80095ce:	9b02      	ldr	r3, [sp, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	dc03      	bgt.n	80095dc <_dtoa_r+0xb3c>
 80095d4:	9b06      	ldr	r3, [sp, #24]
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	f73f aecc 	bgt.w	8009374 <_dtoa_r+0x8d4>
 80095dc:	465d      	mov	r5, fp
 80095de:	4639      	mov	r1, r7
 80095e0:	9804      	ldr	r0, [sp, #16]
 80095e2:	f7ff f9cf 	bl	8008984 <quorem>
 80095e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80095ea:	f805 8b01 	strb.w	r8, [r5], #1
 80095ee:	9a02      	ldr	r2, [sp, #8]
 80095f0:	eba5 030b 	sub.w	r3, r5, fp
 80095f4:	429a      	cmp	r2, r3
 80095f6:	ddb0      	ble.n	800955a <_dtoa_r+0xaba>
 80095f8:	2300      	movs	r3, #0
 80095fa:	220a      	movs	r2, #10
 80095fc:	9904      	ldr	r1, [sp, #16]
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 f872 	bl	80096e8 <__multadd>
 8009604:	9004      	str	r0, [sp, #16]
 8009606:	e7ea      	b.n	80095de <_dtoa_r+0xb3e>
 8009608:	0800d3b3 	.word	0x0800d3b3
 800960c:	0800d27e 	.word	0x0800d27e

08009610 <_localeconv_r>:
 8009610:	4b04      	ldr	r3, [pc, #16]	; (8009624 <_localeconv_r+0x14>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6a18      	ldr	r0, [r3, #32]
 8009616:	4b04      	ldr	r3, [pc, #16]	; (8009628 <_localeconv_r+0x18>)
 8009618:	2800      	cmp	r0, #0
 800961a:	bf08      	it	eq
 800961c:	4618      	moveq	r0, r3
 800961e:	30f0      	adds	r0, #240	; 0xf0
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	20000020 	.word	0x20000020
 8009628:	20000084 	.word	0x20000084

0800962c <malloc>:
 800962c:	4b02      	ldr	r3, [pc, #8]	; (8009638 <malloc+0xc>)
 800962e:	4601      	mov	r1, r0
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	f000 bb45 	b.w	8009cc0 <_malloc_r>
 8009636:	bf00      	nop
 8009638:	20000020 	.word	0x20000020

0800963c <memcpy>:
 800963c:	b510      	push	{r4, lr}
 800963e:	1e43      	subs	r3, r0, #1
 8009640:	440a      	add	r2, r1
 8009642:	4291      	cmp	r1, r2
 8009644:	d100      	bne.n	8009648 <memcpy+0xc>
 8009646:	bd10      	pop	{r4, pc}
 8009648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800964c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009650:	e7f7      	b.n	8009642 <memcpy+0x6>

08009652 <_Balloc>:
 8009652:	b570      	push	{r4, r5, r6, lr}
 8009654:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009656:	4604      	mov	r4, r0
 8009658:	460e      	mov	r6, r1
 800965a:	b93d      	cbnz	r5, 800966c <_Balloc+0x1a>
 800965c:	2010      	movs	r0, #16
 800965e:	f7ff ffe5 	bl	800962c <malloc>
 8009662:	6260      	str	r0, [r4, #36]	; 0x24
 8009664:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009668:	6005      	str	r5, [r0, #0]
 800966a:	60c5      	str	r5, [r0, #12]
 800966c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800966e:	68eb      	ldr	r3, [r5, #12]
 8009670:	b183      	cbz	r3, 8009694 <_Balloc+0x42>
 8009672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800967a:	b9b8      	cbnz	r0, 80096ac <_Balloc+0x5a>
 800967c:	2101      	movs	r1, #1
 800967e:	fa01 f506 	lsl.w	r5, r1, r6
 8009682:	1d6a      	adds	r2, r5, #5
 8009684:	0092      	lsls	r2, r2, #2
 8009686:	4620      	mov	r0, r4
 8009688:	f000 fabe 	bl	8009c08 <_calloc_r>
 800968c:	b160      	cbz	r0, 80096a8 <_Balloc+0x56>
 800968e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009692:	e00e      	b.n	80096b2 <_Balloc+0x60>
 8009694:	2221      	movs	r2, #33	; 0x21
 8009696:	2104      	movs	r1, #4
 8009698:	4620      	mov	r0, r4
 800969a:	f000 fab5 	bl	8009c08 <_calloc_r>
 800969e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096a0:	60e8      	str	r0, [r5, #12]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e4      	bne.n	8009672 <_Balloc+0x20>
 80096a8:	2000      	movs	r0, #0
 80096aa:	bd70      	pop	{r4, r5, r6, pc}
 80096ac:	6802      	ldr	r2, [r0, #0]
 80096ae:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80096b2:	2300      	movs	r3, #0
 80096b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096b8:	e7f7      	b.n	80096aa <_Balloc+0x58>

080096ba <_Bfree>:
 80096ba:	b570      	push	{r4, r5, r6, lr}
 80096bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80096be:	4606      	mov	r6, r0
 80096c0:	460d      	mov	r5, r1
 80096c2:	b93c      	cbnz	r4, 80096d4 <_Bfree+0x1a>
 80096c4:	2010      	movs	r0, #16
 80096c6:	f7ff ffb1 	bl	800962c <malloc>
 80096ca:	6270      	str	r0, [r6, #36]	; 0x24
 80096cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096d0:	6004      	str	r4, [r0, #0]
 80096d2:	60c4      	str	r4, [r0, #12]
 80096d4:	b13d      	cbz	r5, 80096e6 <_Bfree+0x2c>
 80096d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80096d8:	686a      	ldr	r2, [r5, #4]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096e0:	6029      	str	r1, [r5, #0]
 80096e2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80096e6:	bd70      	pop	{r4, r5, r6, pc}

080096e8 <__multadd>:
 80096e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ec:	690d      	ldr	r5, [r1, #16]
 80096ee:	461f      	mov	r7, r3
 80096f0:	4606      	mov	r6, r0
 80096f2:	460c      	mov	r4, r1
 80096f4:	f101 0c14 	add.w	ip, r1, #20
 80096f8:	2300      	movs	r3, #0
 80096fa:	f8dc 0000 	ldr.w	r0, [ip]
 80096fe:	b281      	uxth	r1, r0
 8009700:	fb02 7101 	mla	r1, r2, r1, r7
 8009704:	0c0f      	lsrs	r7, r1, #16
 8009706:	0c00      	lsrs	r0, r0, #16
 8009708:	fb02 7000 	mla	r0, r2, r0, r7
 800970c:	b289      	uxth	r1, r1
 800970e:	3301      	adds	r3, #1
 8009710:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009714:	429d      	cmp	r5, r3
 8009716:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800971a:	f84c 1b04 	str.w	r1, [ip], #4
 800971e:	dcec      	bgt.n	80096fa <__multadd+0x12>
 8009720:	b1d7      	cbz	r7, 8009758 <__multadd+0x70>
 8009722:	68a3      	ldr	r3, [r4, #8]
 8009724:	42ab      	cmp	r3, r5
 8009726:	dc12      	bgt.n	800974e <__multadd+0x66>
 8009728:	6861      	ldr	r1, [r4, #4]
 800972a:	4630      	mov	r0, r6
 800972c:	3101      	adds	r1, #1
 800972e:	f7ff ff90 	bl	8009652 <_Balloc>
 8009732:	6922      	ldr	r2, [r4, #16]
 8009734:	3202      	adds	r2, #2
 8009736:	f104 010c 	add.w	r1, r4, #12
 800973a:	4680      	mov	r8, r0
 800973c:	0092      	lsls	r2, r2, #2
 800973e:	300c      	adds	r0, #12
 8009740:	f7ff ff7c 	bl	800963c <memcpy>
 8009744:	4621      	mov	r1, r4
 8009746:	4630      	mov	r0, r6
 8009748:	f7ff ffb7 	bl	80096ba <_Bfree>
 800974c:	4644      	mov	r4, r8
 800974e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009752:	3501      	adds	r5, #1
 8009754:	615f      	str	r7, [r3, #20]
 8009756:	6125      	str	r5, [r4, #16]
 8009758:	4620      	mov	r0, r4
 800975a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800975e <__hi0bits>:
 800975e:	0c02      	lsrs	r2, r0, #16
 8009760:	0412      	lsls	r2, r2, #16
 8009762:	4603      	mov	r3, r0
 8009764:	b9b2      	cbnz	r2, 8009794 <__hi0bits+0x36>
 8009766:	0403      	lsls	r3, r0, #16
 8009768:	2010      	movs	r0, #16
 800976a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800976e:	bf04      	itt	eq
 8009770:	021b      	lsleq	r3, r3, #8
 8009772:	3008      	addeq	r0, #8
 8009774:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009778:	bf04      	itt	eq
 800977a:	011b      	lsleq	r3, r3, #4
 800977c:	3004      	addeq	r0, #4
 800977e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009782:	bf04      	itt	eq
 8009784:	009b      	lsleq	r3, r3, #2
 8009786:	3002      	addeq	r0, #2
 8009788:	2b00      	cmp	r3, #0
 800978a:	db06      	blt.n	800979a <__hi0bits+0x3c>
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	d503      	bpl.n	8009798 <__hi0bits+0x3a>
 8009790:	3001      	adds	r0, #1
 8009792:	4770      	bx	lr
 8009794:	2000      	movs	r0, #0
 8009796:	e7e8      	b.n	800976a <__hi0bits+0xc>
 8009798:	2020      	movs	r0, #32
 800979a:	4770      	bx	lr

0800979c <__lo0bits>:
 800979c:	6803      	ldr	r3, [r0, #0]
 800979e:	f013 0207 	ands.w	r2, r3, #7
 80097a2:	4601      	mov	r1, r0
 80097a4:	d00b      	beq.n	80097be <__lo0bits+0x22>
 80097a6:	07da      	lsls	r2, r3, #31
 80097a8:	d423      	bmi.n	80097f2 <__lo0bits+0x56>
 80097aa:	0798      	lsls	r0, r3, #30
 80097ac:	bf49      	itett	mi
 80097ae:	085b      	lsrmi	r3, r3, #1
 80097b0:	089b      	lsrpl	r3, r3, #2
 80097b2:	2001      	movmi	r0, #1
 80097b4:	600b      	strmi	r3, [r1, #0]
 80097b6:	bf5c      	itt	pl
 80097b8:	600b      	strpl	r3, [r1, #0]
 80097ba:	2002      	movpl	r0, #2
 80097bc:	4770      	bx	lr
 80097be:	b298      	uxth	r0, r3
 80097c0:	b9a8      	cbnz	r0, 80097ee <__lo0bits+0x52>
 80097c2:	0c1b      	lsrs	r3, r3, #16
 80097c4:	2010      	movs	r0, #16
 80097c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80097ca:	bf04      	itt	eq
 80097cc:	0a1b      	lsreq	r3, r3, #8
 80097ce:	3008      	addeq	r0, #8
 80097d0:	071a      	lsls	r2, r3, #28
 80097d2:	bf04      	itt	eq
 80097d4:	091b      	lsreq	r3, r3, #4
 80097d6:	3004      	addeq	r0, #4
 80097d8:	079a      	lsls	r2, r3, #30
 80097da:	bf04      	itt	eq
 80097dc:	089b      	lsreq	r3, r3, #2
 80097de:	3002      	addeq	r0, #2
 80097e0:	07da      	lsls	r2, r3, #31
 80097e2:	d402      	bmi.n	80097ea <__lo0bits+0x4e>
 80097e4:	085b      	lsrs	r3, r3, #1
 80097e6:	d006      	beq.n	80097f6 <__lo0bits+0x5a>
 80097e8:	3001      	adds	r0, #1
 80097ea:	600b      	str	r3, [r1, #0]
 80097ec:	4770      	bx	lr
 80097ee:	4610      	mov	r0, r2
 80097f0:	e7e9      	b.n	80097c6 <__lo0bits+0x2a>
 80097f2:	2000      	movs	r0, #0
 80097f4:	4770      	bx	lr
 80097f6:	2020      	movs	r0, #32
 80097f8:	4770      	bx	lr

080097fa <__i2b>:
 80097fa:	b510      	push	{r4, lr}
 80097fc:	460c      	mov	r4, r1
 80097fe:	2101      	movs	r1, #1
 8009800:	f7ff ff27 	bl	8009652 <_Balloc>
 8009804:	2201      	movs	r2, #1
 8009806:	6144      	str	r4, [r0, #20]
 8009808:	6102      	str	r2, [r0, #16]
 800980a:	bd10      	pop	{r4, pc}

0800980c <__multiply>:
 800980c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	4614      	mov	r4, r2
 8009812:	690a      	ldr	r2, [r1, #16]
 8009814:	6923      	ldr	r3, [r4, #16]
 8009816:	429a      	cmp	r2, r3
 8009818:	bfb8      	it	lt
 800981a:	460b      	movlt	r3, r1
 800981c:	4688      	mov	r8, r1
 800981e:	bfbc      	itt	lt
 8009820:	46a0      	movlt	r8, r4
 8009822:	461c      	movlt	r4, r3
 8009824:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009828:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800982c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009830:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009834:	eb07 0609 	add.w	r6, r7, r9
 8009838:	42b3      	cmp	r3, r6
 800983a:	bfb8      	it	lt
 800983c:	3101      	addlt	r1, #1
 800983e:	f7ff ff08 	bl	8009652 <_Balloc>
 8009842:	f100 0514 	add.w	r5, r0, #20
 8009846:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800984a:	462b      	mov	r3, r5
 800984c:	2200      	movs	r2, #0
 800984e:	4573      	cmp	r3, lr
 8009850:	d316      	bcc.n	8009880 <__multiply+0x74>
 8009852:	f104 0214 	add.w	r2, r4, #20
 8009856:	f108 0114 	add.w	r1, r8, #20
 800985a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800985e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	9b00      	ldr	r3, [sp, #0]
 8009866:	9201      	str	r2, [sp, #4]
 8009868:	4293      	cmp	r3, r2
 800986a:	d80c      	bhi.n	8009886 <__multiply+0x7a>
 800986c:	2e00      	cmp	r6, #0
 800986e:	dd03      	ble.n	8009878 <__multiply+0x6c>
 8009870:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009874:	2b00      	cmp	r3, #0
 8009876:	d05d      	beq.n	8009934 <__multiply+0x128>
 8009878:	6106      	str	r6, [r0, #16]
 800987a:	b003      	add	sp, #12
 800987c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009880:	f843 2b04 	str.w	r2, [r3], #4
 8009884:	e7e3      	b.n	800984e <__multiply+0x42>
 8009886:	f8b2 b000 	ldrh.w	fp, [r2]
 800988a:	f1bb 0f00 	cmp.w	fp, #0
 800988e:	d023      	beq.n	80098d8 <__multiply+0xcc>
 8009890:	4689      	mov	r9, r1
 8009892:	46ac      	mov	ip, r5
 8009894:	f04f 0800 	mov.w	r8, #0
 8009898:	f859 4b04 	ldr.w	r4, [r9], #4
 800989c:	f8dc a000 	ldr.w	sl, [ip]
 80098a0:	b2a3      	uxth	r3, r4
 80098a2:	fa1f fa8a 	uxth.w	sl, sl
 80098a6:	fb0b a303 	mla	r3, fp, r3, sl
 80098aa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80098ae:	f8dc 4000 	ldr.w	r4, [ip]
 80098b2:	4443      	add	r3, r8
 80098b4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80098b8:	fb0b 840a 	mla	r4, fp, sl, r8
 80098bc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80098c0:	46e2      	mov	sl, ip
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80098c8:	454f      	cmp	r7, r9
 80098ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80098ce:	f84a 3b04 	str.w	r3, [sl], #4
 80098d2:	d82b      	bhi.n	800992c <__multiply+0x120>
 80098d4:	f8cc 8004 	str.w	r8, [ip, #4]
 80098d8:	9b01      	ldr	r3, [sp, #4]
 80098da:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80098de:	3204      	adds	r2, #4
 80098e0:	f1ba 0f00 	cmp.w	sl, #0
 80098e4:	d020      	beq.n	8009928 <__multiply+0x11c>
 80098e6:	682b      	ldr	r3, [r5, #0]
 80098e8:	4689      	mov	r9, r1
 80098ea:	46a8      	mov	r8, r5
 80098ec:	f04f 0b00 	mov.w	fp, #0
 80098f0:	f8b9 c000 	ldrh.w	ip, [r9]
 80098f4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80098f8:	fb0a 440c 	mla	r4, sl, ip, r4
 80098fc:	445c      	add	r4, fp
 80098fe:	46c4      	mov	ip, r8
 8009900:	b29b      	uxth	r3, r3
 8009902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009906:	f84c 3b04 	str.w	r3, [ip], #4
 800990a:	f859 3b04 	ldr.w	r3, [r9], #4
 800990e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009912:	0c1b      	lsrs	r3, r3, #16
 8009914:	fb0a b303 	mla	r3, sl, r3, fp
 8009918:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800991c:	454f      	cmp	r7, r9
 800991e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009922:	d805      	bhi.n	8009930 <__multiply+0x124>
 8009924:	f8c8 3004 	str.w	r3, [r8, #4]
 8009928:	3504      	adds	r5, #4
 800992a:	e79b      	b.n	8009864 <__multiply+0x58>
 800992c:	46d4      	mov	ip, sl
 800992e:	e7b3      	b.n	8009898 <__multiply+0x8c>
 8009930:	46e0      	mov	r8, ip
 8009932:	e7dd      	b.n	80098f0 <__multiply+0xe4>
 8009934:	3e01      	subs	r6, #1
 8009936:	e799      	b.n	800986c <__multiply+0x60>

08009938 <__pow5mult>:
 8009938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800993c:	4615      	mov	r5, r2
 800993e:	f012 0203 	ands.w	r2, r2, #3
 8009942:	4606      	mov	r6, r0
 8009944:	460f      	mov	r7, r1
 8009946:	d007      	beq.n	8009958 <__pow5mult+0x20>
 8009948:	3a01      	subs	r2, #1
 800994a:	4c21      	ldr	r4, [pc, #132]	; (80099d0 <__pow5mult+0x98>)
 800994c:	2300      	movs	r3, #0
 800994e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009952:	f7ff fec9 	bl	80096e8 <__multadd>
 8009956:	4607      	mov	r7, r0
 8009958:	10ad      	asrs	r5, r5, #2
 800995a:	d035      	beq.n	80099c8 <__pow5mult+0x90>
 800995c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800995e:	b93c      	cbnz	r4, 8009970 <__pow5mult+0x38>
 8009960:	2010      	movs	r0, #16
 8009962:	f7ff fe63 	bl	800962c <malloc>
 8009966:	6270      	str	r0, [r6, #36]	; 0x24
 8009968:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800996c:	6004      	str	r4, [r0, #0]
 800996e:	60c4      	str	r4, [r0, #12]
 8009970:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009978:	b94c      	cbnz	r4, 800998e <__pow5mult+0x56>
 800997a:	f240 2171 	movw	r1, #625	; 0x271
 800997e:	4630      	mov	r0, r6
 8009980:	f7ff ff3b 	bl	80097fa <__i2b>
 8009984:	2300      	movs	r3, #0
 8009986:	f8c8 0008 	str.w	r0, [r8, #8]
 800998a:	4604      	mov	r4, r0
 800998c:	6003      	str	r3, [r0, #0]
 800998e:	f04f 0800 	mov.w	r8, #0
 8009992:	07eb      	lsls	r3, r5, #31
 8009994:	d50a      	bpl.n	80099ac <__pow5mult+0x74>
 8009996:	4639      	mov	r1, r7
 8009998:	4622      	mov	r2, r4
 800999a:	4630      	mov	r0, r6
 800999c:	f7ff ff36 	bl	800980c <__multiply>
 80099a0:	4639      	mov	r1, r7
 80099a2:	4681      	mov	r9, r0
 80099a4:	4630      	mov	r0, r6
 80099a6:	f7ff fe88 	bl	80096ba <_Bfree>
 80099aa:	464f      	mov	r7, r9
 80099ac:	106d      	asrs	r5, r5, #1
 80099ae:	d00b      	beq.n	80099c8 <__pow5mult+0x90>
 80099b0:	6820      	ldr	r0, [r4, #0]
 80099b2:	b938      	cbnz	r0, 80099c4 <__pow5mult+0x8c>
 80099b4:	4622      	mov	r2, r4
 80099b6:	4621      	mov	r1, r4
 80099b8:	4630      	mov	r0, r6
 80099ba:	f7ff ff27 	bl	800980c <__multiply>
 80099be:	6020      	str	r0, [r4, #0]
 80099c0:	f8c0 8000 	str.w	r8, [r0]
 80099c4:	4604      	mov	r4, r0
 80099c6:	e7e4      	b.n	8009992 <__pow5mult+0x5a>
 80099c8:	4638      	mov	r0, r7
 80099ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ce:	bf00      	nop
 80099d0:	0800d380 	.word	0x0800d380

080099d4 <__lshift>:
 80099d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d8:	460c      	mov	r4, r1
 80099da:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099de:	6923      	ldr	r3, [r4, #16]
 80099e0:	6849      	ldr	r1, [r1, #4]
 80099e2:	eb0a 0903 	add.w	r9, sl, r3
 80099e6:	68a3      	ldr	r3, [r4, #8]
 80099e8:	4607      	mov	r7, r0
 80099ea:	4616      	mov	r6, r2
 80099ec:	f109 0501 	add.w	r5, r9, #1
 80099f0:	42ab      	cmp	r3, r5
 80099f2:	db32      	blt.n	8009a5a <__lshift+0x86>
 80099f4:	4638      	mov	r0, r7
 80099f6:	f7ff fe2c 	bl	8009652 <_Balloc>
 80099fa:	2300      	movs	r3, #0
 80099fc:	4680      	mov	r8, r0
 80099fe:	f100 0114 	add.w	r1, r0, #20
 8009a02:	461a      	mov	r2, r3
 8009a04:	4553      	cmp	r3, sl
 8009a06:	db2b      	blt.n	8009a60 <__lshift+0x8c>
 8009a08:	6920      	ldr	r0, [r4, #16]
 8009a0a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a0e:	f104 0314 	add.w	r3, r4, #20
 8009a12:	f016 021f 	ands.w	r2, r6, #31
 8009a16:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a1a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a1e:	d025      	beq.n	8009a6c <__lshift+0x98>
 8009a20:	f1c2 0e20 	rsb	lr, r2, #32
 8009a24:	2000      	movs	r0, #0
 8009a26:	681e      	ldr	r6, [r3, #0]
 8009a28:	468a      	mov	sl, r1
 8009a2a:	4096      	lsls	r6, r2
 8009a2c:	4330      	orrs	r0, r6
 8009a2e:	f84a 0b04 	str.w	r0, [sl], #4
 8009a32:	f853 0b04 	ldr.w	r0, [r3], #4
 8009a36:	459c      	cmp	ip, r3
 8009a38:	fa20 f00e 	lsr.w	r0, r0, lr
 8009a3c:	d814      	bhi.n	8009a68 <__lshift+0x94>
 8009a3e:	6048      	str	r0, [r1, #4]
 8009a40:	b108      	cbz	r0, 8009a46 <__lshift+0x72>
 8009a42:	f109 0502 	add.w	r5, r9, #2
 8009a46:	3d01      	subs	r5, #1
 8009a48:	4638      	mov	r0, r7
 8009a4a:	f8c8 5010 	str.w	r5, [r8, #16]
 8009a4e:	4621      	mov	r1, r4
 8009a50:	f7ff fe33 	bl	80096ba <_Bfree>
 8009a54:	4640      	mov	r0, r8
 8009a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5a:	3101      	adds	r1, #1
 8009a5c:	005b      	lsls	r3, r3, #1
 8009a5e:	e7c7      	b.n	80099f0 <__lshift+0x1c>
 8009a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009a64:	3301      	adds	r3, #1
 8009a66:	e7cd      	b.n	8009a04 <__lshift+0x30>
 8009a68:	4651      	mov	r1, sl
 8009a6a:	e7dc      	b.n	8009a26 <__lshift+0x52>
 8009a6c:	3904      	subs	r1, #4
 8009a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a72:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a76:	459c      	cmp	ip, r3
 8009a78:	d8f9      	bhi.n	8009a6e <__lshift+0x9a>
 8009a7a:	e7e4      	b.n	8009a46 <__lshift+0x72>

08009a7c <__mcmp>:
 8009a7c:	6903      	ldr	r3, [r0, #16]
 8009a7e:	690a      	ldr	r2, [r1, #16]
 8009a80:	1a9b      	subs	r3, r3, r2
 8009a82:	b530      	push	{r4, r5, lr}
 8009a84:	d10c      	bne.n	8009aa0 <__mcmp+0x24>
 8009a86:	0092      	lsls	r2, r2, #2
 8009a88:	3014      	adds	r0, #20
 8009a8a:	3114      	adds	r1, #20
 8009a8c:	1884      	adds	r4, r0, r2
 8009a8e:	4411      	add	r1, r2
 8009a90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a98:	4295      	cmp	r5, r2
 8009a9a:	d003      	beq.n	8009aa4 <__mcmp+0x28>
 8009a9c:	d305      	bcc.n	8009aaa <__mcmp+0x2e>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	bd30      	pop	{r4, r5, pc}
 8009aa4:	42a0      	cmp	r0, r4
 8009aa6:	d3f3      	bcc.n	8009a90 <__mcmp+0x14>
 8009aa8:	e7fa      	b.n	8009aa0 <__mcmp+0x24>
 8009aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8009aae:	e7f7      	b.n	8009aa0 <__mcmp+0x24>

08009ab0 <__mdiff>:
 8009ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab4:	460d      	mov	r5, r1
 8009ab6:	4607      	mov	r7, r0
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4628      	mov	r0, r5
 8009abc:	4614      	mov	r4, r2
 8009abe:	f7ff ffdd 	bl	8009a7c <__mcmp>
 8009ac2:	1e06      	subs	r6, r0, #0
 8009ac4:	d108      	bne.n	8009ad8 <__mdiff+0x28>
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4638      	mov	r0, r7
 8009aca:	f7ff fdc2 	bl	8009652 <_Balloc>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad8:	bfa4      	itt	ge
 8009ada:	4623      	movge	r3, r4
 8009adc:	462c      	movge	r4, r5
 8009ade:	4638      	mov	r0, r7
 8009ae0:	6861      	ldr	r1, [r4, #4]
 8009ae2:	bfa6      	itte	ge
 8009ae4:	461d      	movge	r5, r3
 8009ae6:	2600      	movge	r6, #0
 8009ae8:	2601      	movlt	r6, #1
 8009aea:	f7ff fdb2 	bl	8009652 <_Balloc>
 8009aee:	692b      	ldr	r3, [r5, #16]
 8009af0:	60c6      	str	r6, [r0, #12]
 8009af2:	6926      	ldr	r6, [r4, #16]
 8009af4:	f105 0914 	add.w	r9, r5, #20
 8009af8:	f104 0214 	add.w	r2, r4, #20
 8009afc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009b00:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009b04:	f100 0514 	add.w	r5, r0, #20
 8009b08:	f04f 0e00 	mov.w	lr, #0
 8009b0c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009b10:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b14:	fa1e f18a 	uxtah	r1, lr, sl
 8009b18:	b2a3      	uxth	r3, r4
 8009b1a:	1ac9      	subs	r1, r1, r3
 8009b1c:	0c23      	lsrs	r3, r4, #16
 8009b1e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009b22:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b26:	b289      	uxth	r1, r1
 8009b28:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009b2c:	45c8      	cmp	r8, r9
 8009b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009b32:	4694      	mov	ip, r2
 8009b34:	f845 3b04 	str.w	r3, [r5], #4
 8009b38:	d8e8      	bhi.n	8009b0c <__mdiff+0x5c>
 8009b3a:	45bc      	cmp	ip, r7
 8009b3c:	d304      	bcc.n	8009b48 <__mdiff+0x98>
 8009b3e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009b42:	b183      	cbz	r3, 8009b66 <__mdiff+0xb6>
 8009b44:	6106      	str	r6, [r0, #16]
 8009b46:	e7c5      	b.n	8009ad4 <__mdiff+0x24>
 8009b48:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009b4c:	fa1e f381 	uxtah	r3, lr, r1
 8009b50:	141a      	asrs	r2, r3, #16
 8009b52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b5c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009b60:	f845 3b04 	str.w	r3, [r5], #4
 8009b64:	e7e9      	b.n	8009b3a <__mdiff+0x8a>
 8009b66:	3e01      	subs	r6, #1
 8009b68:	e7e9      	b.n	8009b3e <__mdiff+0x8e>

08009b6a <__d2b>:
 8009b6a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b6e:	460e      	mov	r6, r1
 8009b70:	2101      	movs	r1, #1
 8009b72:	ec59 8b10 	vmov	r8, r9, d0
 8009b76:	4615      	mov	r5, r2
 8009b78:	f7ff fd6b 	bl	8009652 <_Balloc>
 8009b7c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009b80:	4607      	mov	r7, r0
 8009b82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b86:	bb34      	cbnz	r4, 8009bd6 <__d2b+0x6c>
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	f1b8 0300 	subs.w	r3, r8, #0
 8009b8e:	d027      	beq.n	8009be0 <__d2b+0x76>
 8009b90:	a802      	add	r0, sp, #8
 8009b92:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009b96:	f7ff fe01 	bl	800979c <__lo0bits>
 8009b9a:	9900      	ldr	r1, [sp, #0]
 8009b9c:	b1f0      	cbz	r0, 8009bdc <__d2b+0x72>
 8009b9e:	9a01      	ldr	r2, [sp, #4]
 8009ba0:	f1c0 0320 	rsb	r3, r0, #32
 8009ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba8:	430b      	orrs	r3, r1
 8009baa:	40c2      	lsrs	r2, r0
 8009bac:	617b      	str	r3, [r7, #20]
 8009bae:	9201      	str	r2, [sp, #4]
 8009bb0:	9b01      	ldr	r3, [sp, #4]
 8009bb2:	61bb      	str	r3, [r7, #24]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	bf14      	ite	ne
 8009bb8:	2102      	movne	r1, #2
 8009bba:	2101      	moveq	r1, #1
 8009bbc:	6139      	str	r1, [r7, #16]
 8009bbe:	b1c4      	cbz	r4, 8009bf2 <__d2b+0x88>
 8009bc0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009bc4:	4404      	add	r4, r0
 8009bc6:	6034      	str	r4, [r6, #0]
 8009bc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009bcc:	6028      	str	r0, [r5, #0]
 8009bce:	4638      	mov	r0, r7
 8009bd0:	b003      	add	sp, #12
 8009bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bda:	e7d5      	b.n	8009b88 <__d2b+0x1e>
 8009bdc:	6179      	str	r1, [r7, #20]
 8009bde:	e7e7      	b.n	8009bb0 <__d2b+0x46>
 8009be0:	a801      	add	r0, sp, #4
 8009be2:	f7ff fddb 	bl	800979c <__lo0bits>
 8009be6:	9b01      	ldr	r3, [sp, #4]
 8009be8:	617b      	str	r3, [r7, #20]
 8009bea:	2101      	movs	r1, #1
 8009bec:	6139      	str	r1, [r7, #16]
 8009bee:	3020      	adds	r0, #32
 8009bf0:	e7e5      	b.n	8009bbe <__d2b+0x54>
 8009bf2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009bf6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009bfa:	6030      	str	r0, [r6, #0]
 8009bfc:	6918      	ldr	r0, [r3, #16]
 8009bfe:	f7ff fdae 	bl	800975e <__hi0bits>
 8009c02:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009c06:	e7e1      	b.n	8009bcc <__d2b+0x62>

08009c08 <_calloc_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	fb02 f401 	mul.w	r4, r2, r1
 8009c0e:	4621      	mov	r1, r4
 8009c10:	f000 f856 	bl	8009cc0 <_malloc_r>
 8009c14:	4605      	mov	r5, r0
 8009c16:	b118      	cbz	r0, 8009c20 <_calloc_r+0x18>
 8009c18:	4622      	mov	r2, r4
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	f7fe f9ee 	bl	8007ffc <memset>
 8009c20:	4628      	mov	r0, r5
 8009c22:	bd38      	pop	{r3, r4, r5, pc}

08009c24 <_free_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4605      	mov	r5, r0
 8009c28:	2900      	cmp	r1, #0
 8009c2a:	d045      	beq.n	8009cb8 <_free_r+0x94>
 8009c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c30:	1f0c      	subs	r4, r1, #4
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	bfb8      	it	lt
 8009c36:	18e4      	addlt	r4, r4, r3
 8009c38:	f000 fec3 	bl	800a9c2 <__malloc_lock>
 8009c3c:	4a1f      	ldr	r2, [pc, #124]	; (8009cbc <_free_r+0x98>)
 8009c3e:	6813      	ldr	r3, [r2, #0]
 8009c40:	4610      	mov	r0, r2
 8009c42:	b933      	cbnz	r3, 8009c52 <_free_r+0x2e>
 8009c44:	6063      	str	r3, [r4, #4]
 8009c46:	6014      	str	r4, [r2, #0]
 8009c48:	4628      	mov	r0, r5
 8009c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c4e:	f000 beb9 	b.w	800a9c4 <__malloc_unlock>
 8009c52:	42a3      	cmp	r3, r4
 8009c54:	d90c      	bls.n	8009c70 <_free_r+0x4c>
 8009c56:	6821      	ldr	r1, [r4, #0]
 8009c58:	1862      	adds	r2, r4, r1
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	bf04      	itt	eq
 8009c5e:	681a      	ldreq	r2, [r3, #0]
 8009c60:	685b      	ldreq	r3, [r3, #4]
 8009c62:	6063      	str	r3, [r4, #4]
 8009c64:	bf04      	itt	eq
 8009c66:	1852      	addeq	r2, r2, r1
 8009c68:	6022      	streq	r2, [r4, #0]
 8009c6a:	6004      	str	r4, [r0, #0]
 8009c6c:	e7ec      	b.n	8009c48 <_free_r+0x24>
 8009c6e:	4613      	mov	r3, r2
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	b10a      	cbz	r2, 8009c78 <_free_r+0x54>
 8009c74:	42a2      	cmp	r2, r4
 8009c76:	d9fa      	bls.n	8009c6e <_free_r+0x4a>
 8009c78:	6819      	ldr	r1, [r3, #0]
 8009c7a:	1858      	adds	r0, r3, r1
 8009c7c:	42a0      	cmp	r0, r4
 8009c7e:	d10b      	bne.n	8009c98 <_free_r+0x74>
 8009c80:	6820      	ldr	r0, [r4, #0]
 8009c82:	4401      	add	r1, r0
 8009c84:	1858      	adds	r0, r3, r1
 8009c86:	4282      	cmp	r2, r0
 8009c88:	6019      	str	r1, [r3, #0]
 8009c8a:	d1dd      	bne.n	8009c48 <_free_r+0x24>
 8009c8c:	6810      	ldr	r0, [r2, #0]
 8009c8e:	6852      	ldr	r2, [r2, #4]
 8009c90:	605a      	str	r2, [r3, #4]
 8009c92:	4401      	add	r1, r0
 8009c94:	6019      	str	r1, [r3, #0]
 8009c96:	e7d7      	b.n	8009c48 <_free_r+0x24>
 8009c98:	d902      	bls.n	8009ca0 <_free_r+0x7c>
 8009c9a:	230c      	movs	r3, #12
 8009c9c:	602b      	str	r3, [r5, #0]
 8009c9e:	e7d3      	b.n	8009c48 <_free_r+0x24>
 8009ca0:	6820      	ldr	r0, [r4, #0]
 8009ca2:	1821      	adds	r1, r4, r0
 8009ca4:	428a      	cmp	r2, r1
 8009ca6:	bf04      	itt	eq
 8009ca8:	6811      	ldreq	r1, [r2, #0]
 8009caa:	6852      	ldreq	r2, [r2, #4]
 8009cac:	6062      	str	r2, [r4, #4]
 8009cae:	bf04      	itt	eq
 8009cb0:	1809      	addeq	r1, r1, r0
 8009cb2:	6021      	streq	r1, [r4, #0]
 8009cb4:	605c      	str	r4, [r3, #4]
 8009cb6:	e7c7      	b.n	8009c48 <_free_r+0x24>
 8009cb8:	bd38      	pop	{r3, r4, r5, pc}
 8009cba:	bf00      	nop
 8009cbc:	20000394 	.word	0x20000394

08009cc0 <_malloc_r>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	1ccd      	adds	r5, r1, #3
 8009cc4:	f025 0503 	bic.w	r5, r5, #3
 8009cc8:	3508      	adds	r5, #8
 8009cca:	2d0c      	cmp	r5, #12
 8009ccc:	bf38      	it	cc
 8009cce:	250c      	movcc	r5, #12
 8009cd0:	2d00      	cmp	r5, #0
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	db01      	blt.n	8009cda <_malloc_r+0x1a>
 8009cd6:	42a9      	cmp	r1, r5
 8009cd8:	d903      	bls.n	8009ce2 <_malloc_r+0x22>
 8009cda:	230c      	movs	r3, #12
 8009cdc:	6033      	str	r3, [r6, #0]
 8009cde:	2000      	movs	r0, #0
 8009ce0:	bd70      	pop	{r4, r5, r6, pc}
 8009ce2:	f000 fe6e 	bl	800a9c2 <__malloc_lock>
 8009ce6:	4a21      	ldr	r2, [pc, #132]	; (8009d6c <_malloc_r+0xac>)
 8009ce8:	6814      	ldr	r4, [r2, #0]
 8009cea:	4621      	mov	r1, r4
 8009cec:	b991      	cbnz	r1, 8009d14 <_malloc_r+0x54>
 8009cee:	4c20      	ldr	r4, [pc, #128]	; (8009d70 <_malloc_r+0xb0>)
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	b91b      	cbnz	r3, 8009cfc <_malloc_r+0x3c>
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	f000 fc91 	bl	800a61c <_sbrk_r>
 8009cfa:	6020      	str	r0, [r4, #0]
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f000 fc8c 	bl	800a61c <_sbrk_r>
 8009d04:	1c43      	adds	r3, r0, #1
 8009d06:	d124      	bne.n	8009d52 <_malloc_r+0x92>
 8009d08:	230c      	movs	r3, #12
 8009d0a:	6033      	str	r3, [r6, #0]
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	f000 fe59 	bl	800a9c4 <__malloc_unlock>
 8009d12:	e7e4      	b.n	8009cde <_malloc_r+0x1e>
 8009d14:	680b      	ldr	r3, [r1, #0]
 8009d16:	1b5b      	subs	r3, r3, r5
 8009d18:	d418      	bmi.n	8009d4c <_malloc_r+0x8c>
 8009d1a:	2b0b      	cmp	r3, #11
 8009d1c:	d90f      	bls.n	8009d3e <_malloc_r+0x7e>
 8009d1e:	600b      	str	r3, [r1, #0]
 8009d20:	50cd      	str	r5, [r1, r3]
 8009d22:	18cc      	adds	r4, r1, r3
 8009d24:	4630      	mov	r0, r6
 8009d26:	f000 fe4d 	bl	800a9c4 <__malloc_unlock>
 8009d2a:	f104 000b 	add.w	r0, r4, #11
 8009d2e:	1d23      	adds	r3, r4, #4
 8009d30:	f020 0007 	bic.w	r0, r0, #7
 8009d34:	1ac3      	subs	r3, r0, r3
 8009d36:	d0d3      	beq.n	8009ce0 <_malloc_r+0x20>
 8009d38:	425a      	negs	r2, r3
 8009d3a:	50e2      	str	r2, [r4, r3]
 8009d3c:	e7d0      	b.n	8009ce0 <_malloc_r+0x20>
 8009d3e:	428c      	cmp	r4, r1
 8009d40:	684b      	ldr	r3, [r1, #4]
 8009d42:	bf16      	itet	ne
 8009d44:	6063      	strne	r3, [r4, #4]
 8009d46:	6013      	streq	r3, [r2, #0]
 8009d48:	460c      	movne	r4, r1
 8009d4a:	e7eb      	b.n	8009d24 <_malloc_r+0x64>
 8009d4c:	460c      	mov	r4, r1
 8009d4e:	6849      	ldr	r1, [r1, #4]
 8009d50:	e7cc      	b.n	8009cec <_malloc_r+0x2c>
 8009d52:	1cc4      	adds	r4, r0, #3
 8009d54:	f024 0403 	bic.w	r4, r4, #3
 8009d58:	42a0      	cmp	r0, r4
 8009d5a:	d005      	beq.n	8009d68 <_malloc_r+0xa8>
 8009d5c:	1a21      	subs	r1, r4, r0
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f000 fc5c 	bl	800a61c <_sbrk_r>
 8009d64:	3001      	adds	r0, #1
 8009d66:	d0cf      	beq.n	8009d08 <_malloc_r+0x48>
 8009d68:	6025      	str	r5, [r4, #0]
 8009d6a:	e7db      	b.n	8009d24 <_malloc_r+0x64>
 8009d6c:	20000394 	.word	0x20000394
 8009d70:	20000398 	.word	0x20000398

08009d74 <__ssputs_r>:
 8009d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d78:	688e      	ldr	r6, [r1, #8]
 8009d7a:	429e      	cmp	r6, r3
 8009d7c:	4682      	mov	sl, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	4690      	mov	r8, r2
 8009d82:	4699      	mov	r9, r3
 8009d84:	d837      	bhi.n	8009df6 <__ssputs_r+0x82>
 8009d86:	898a      	ldrh	r2, [r1, #12]
 8009d88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d8c:	d031      	beq.n	8009df2 <__ssputs_r+0x7e>
 8009d8e:	6825      	ldr	r5, [r4, #0]
 8009d90:	6909      	ldr	r1, [r1, #16]
 8009d92:	1a6f      	subs	r7, r5, r1
 8009d94:	6965      	ldr	r5, [r4, #20]
 8009d96:	2302      	movs	r3, #2
 8009d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009da0:	f109 0301 	add.w	r3, r9, #1
 8009da4:	443b      	add	r3, r7
 8009da6:	429d      	cmp	r5, r3
 8009da8:	bf38      	it	cc
 8009daa:	461d      	movcc	r5, r3
 8009dac:	0553      	lsls	r3, r2, #21
 8009dae:	d530      	bpl.n	8009e12 <__ssputs_r+0x9e>
 8009db0:	4629      	mov	r1, r5
 8009db2:	f7ff ff85 	bl	8009cc0 <_malloc_r>
 8009db6:	4606      	mov	r6, r0
 8009db8:	b950      	cbnz	r0, 8009dd0 <__ssputs_r+0x5c>
 8009dba:	230c      	movs	r3, #12
 8009dbc:	f8ca 3000 	str.w	r3, [sl]
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dc6:	81a3      	strh	r3, [r4, #12]
 8009dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd0:	463a      	mov	r2, r7
 8009dd2:	6921      	ldr	r1, [r4, #16]
 8009dd4:	f7ff fc32 	bl	800963c <memcpy>
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	6126      	str	r6, [r4, #16]
 8009de6:	6165      	str	r5, [r4, #20]
 8009de8:	443e      	add	r6, r7
 8009dea:	1bed      	subs	r5, r5, r7
 8009dec:	6026      	str	r6, [r4, #0]
 8009dee:	60a5      	str	r5, [r4, #8]
 8009df0:	464e      	mov	r6, r9
 8009df2:	454e      	cmp	r6, r9
 8009df4:	d900      	bls.n	8009df8 <__ssputs_r+0x84>
 8009df6:	464e      	mov	r6, r9
 8009df8:	4632      	mov	r2, r6
 8009dfa:	4641      	mov	r1, r8
 8009dfc:	6820      	ldr	r0, [r4, #0]
 8009dfe:	f000 fdc7 	bl	800a990 <memmove>
 8009e02:	68a3      	ldr	r3, [r4, #8]
 8009e04:	1b9b      	subs	r3, r3, r6
 8009e06:	60a3      	str	r3, [r4, #8]
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	441e      	add	r6, r3
 8009e0c:	6026      	str	r6, [r4, #0]
 8009e0e:	2000      	movs	r0, #0
 8009e10:	e7dc      	b.n	8009dcc <__ssputs_r+0x58>
 8009e12:	462a      	mov	r2, r5
 8009e14:	f000 fdd7 	bl	800a9c6 <_realloc_r>
 8009e18:	4606      	mov	r6, r0
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d1e2      	bne.n	8009de4 <__ssputs_r+0x70>
 8009e1e:	6921      	ldr	r1, [r4, #16]
 8009e20:	4650      	mov	r0, sl
 8009e22:	f7ff feff 	bl	8009c24 <_free_r>
 8009e26:	e7c8      	b.n	8009dba <__ssputs_r+0x46>

08009e28 <_svfiprintf_r>:
 8009e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	461d      	mov	r5, r3
 8009e2e:	898b      	ldrh	r3, [r1, #12]
 8009e30:	061f      	lsls	r7, r3, #24
 8009e32:	b09d      	sub	sp, #116	; 0x74
 8009e34:	4680      	mov	r8, r0
 8009e36:	460c      	mov	r4, r1
 8009e38:	4616      	mov	r6, r2
 8009e3a:	d50f      	bpl.n	8009e5c <_svfiprintf_r+0x34>
 8009e3c:	690b      	ldr	r3, [r1, #16]
 8009e3e:	b96b      	cbnz	r3, 8009e5c <_svfiprintf_r+0x34>
 8009e40:	2140      	movs	r1, #64	; 0x40
 8009e42:	f7ff ff3d 	bl	8009cc0 <_malloc_r>
 8009e46:	6020      	str	r0, [r4, #0]
 8009e48:	6120      	str	r0, [r4, #16]
 8009e4a:	b928      	cbnz	r0, 8009e58 <_svfiprintf_r+0x30>
 8009e4c:	230c      	movs	r3, #12
 8009e4e:	f8c8 3000 	str.w	r3, [r8]
 8009e52:	f04f 30ff 	mov.w	r0, #4294967295
 8009e56:	e0c8      	b.n	8009fea <_svfiprintf_r+0x1c2>
 8009e58:	2340      	movs	r3, #64	; 0x40
 8009e5a:	6163      	str	r3, [r4, #20]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e60:	2320      	movs	r3, #32
 8009e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e66:	2330      	movs	r3, #48	; 0x30
 8009e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e6c:	9503      	str	r5, [sp, #12]
 8009e6e:	f04f 0b01 	mov.w	fp, #1
 8009e72:	4637      	mov	r7, r6
 8009e74:	463d      	mov	r5, r7
 8009e76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e7a:	b10b      	cbz	r3, 8009e80 <_svfiprintf_r+0x58>
 8009e7c:	2b25      	cmp	r3, #37	; 0x25
 8009e7e:	d13e      	bne.n	8009efe <_svfiprintf_r+0xd6>
 8009e80:	ebb7 0a06 	subs.w	sl, r7, r6
 8009e84:	d00b      	beq.n	8009e9e <_svfiprintf_r+0x76>
 8009e86:	4653      	mov	r3, sl
 8009e88:	4632      	mov	r2, r6
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	4640      	mov	r0, r8
 8009e8e:	f7ff ff71 	bl	8009d74 <__ssputs_r>
 8009e92:	3001      	adds	r0, #1
 8009e94:	f000 80a4 	beq.w	8009fe0 <_svfiprintf_r+0x1b8>
 8009e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9a:	4453      	add	r3, sl
 8009e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e9e:	783b      	ldrb	r3, [r7, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f000 809d 	beq.w	8009fe0 <_svfiprintf_r+0x1b8>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8009eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009eb0:	9304      	str	r3, [sp, #16]
 8009eb2:	9307      	str	r3, [sp, #28]
 8009eb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eb8:	931a      	str	r3, [sp, #104]	; 0x68
 8009eba:	462f      	mov	r7, r5
 8009ebc:	2205      	movs	r2, #5
 8009ebe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009ec2:	4850      	ldr	r0, [pc, #320]	; (800a004 <_svfiprintf_r+0x1dc>)
 8009ec4:	f7f6 f9b4 	bl	8000230 <memchr>
 8009ec8:	9b04      	ldr	r3, [sp, #16]
 8009eca:	b9d0      	cbnz	r0, 8009f02 <_svfiprintf_r+0xda>
 8009ecc:	06d9      	lsls	r1, r3, #27
 8009ece:	bf44      	itt	mi
 8009ed0:	2220      	movmi	r2, #32
 8009ed2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ed6:	071a      	lsls	r2, r3, #28
 8009ed8:	bf44      	itt	mi
 8009eda:	222b      	movmi	r2, #43	; 0x2b
 8009edc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ee0:	782a      	ldrb	r2, [r5, #0]
 8009ee2:	2a2a      	cmp	r2, #42	; 0x2a
 8009ee4:	d015      	beq.n	8009f12 <_svfiprintf_r+0xea>
 8009ee6:	9a07      	ldr	r2, [sp, #28]
 8009ee8:	462f      	mov	r7, r5
 8009eea:	2000      	movs	r0, #0
 8009eec:	250a      	movs	r5, #10
 8009eee:	4639      	mov	r1, r7
 8009ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ef4:	3b30      	subs	r3, #48	; 0x30
 8009ef6:	2b09      	cmp	r3, #9
 8009ef8:	d94d      	bls.n	8009f96 <_svfiprintf_r+0x16e>
 8009efa:	b1b8      	cbz	r0, 8009f2c <_svfiprintf_r+0x104>
 8009efc:	e00f      	b.n	8009f1e <_svfiprintf_r+0xf6>
 8009efe:	462f      	mov	r7, r5
 8009f00:	e7b8      	b.n	8009e74 <_svfiprintf_r+0x4c>
 8009f02:	4a40      	ldr	r2, [pc, #256]	; (800a004 <_svfiprintf_r+0x1dc>)
 8009f04:	1a80      	subs	r0, r0, r2
 8009f06:	fa0b f000 	lsl.w	r0, fp, r0
 8009f0a:	4318      	orrs	r0, r3
 8009f0c:	9004      	str	r0, [sp, #16]
 8009f0e:	463d      	mov	r5, r7
 8009f10:	e7d3      	b.n	8009eba <_svfiprintf_r+0x92>
 8009f12:	9a03      	ldr	r2, [sp, #12]
 8009f14:	1d11      	adds	r1, r2, #4
 8009f16:	6812      	ldr	r2, [r2, #0]
 8009f18:	9103      	str	r1, [sp, #12]
 8009f1a:	2a00      	cmp	r2, #0
 8009f1c:	db01      	blt.n	8009f22 <_svfiprintf_r+0xfa>
 8009f1e:	9207      	str	r2, [sp, #28]
 8009f20:	e004      	b.n	8009f2c <_svfiprintf_r+0x104>
 8009f22:	4252      	negs	r2, r2
 8009f24:	f043 0302 	orr.w	r3, r3, #2
 8009f28:	9207      	str	r2, [sp, #28]
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	783b      	ldrb	r3, [r7, #0]
 8009f2e:	2b2e      	cmp	r3, #46	; 0x2e
 8009f30:	d10c      	bne.n	8009f4c <_svfiprintf_r+0x124>
 8009f32:	787b      	ldrb	r3, [r7, #1]
 8009f34:	2b2a      	cmp	r3, #42	; 0x2a
 8009f36:	d133      	bne.n	8009fa0 <_svfiprintf_r+0x178>
 8009f38:	9b03      	ldr	r3, [sp, #12]
 8009f3a:	1d1a      	adds	r2, r3, #4
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	9203      	str	r2, [sp, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	bfb8      	it	lt
 8009f44:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f48:	3702      	adds	r7, #2
 8009f4a:	9305      	str	r3, [sp, #20]
 8009f4c:	4d2e      	ldr	r5, [pc, #184]	; (800a008 <_svfiprintf_r+0x1e0>)
 8009f4e:	7839      	ldrb	r1, [r7, #0]
 8009f50:	2203      	movs	r2, #3
 8009f52:	4628      	mov	r0, r5
 8009f54:	f7f6 f96c 	bl	8000230 <memchr>
 8009f58:	b138      	cbz	r0, 8009f6a <_svfiprintf_r+0x142>
 8009f5a:	2340      	movs	r3, #64	; 0x40
 8009f5c:	1b40      	subs	r0, r0, r5
 8009f5e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f62:	9b04      	ldr	r3, [sp, #16]
 8009f64:	4303      	orrs	r3, r0
 8009f66:	3701      	adds	r7, #1
 8009f68:	9304      	str	r3, [sp, #16]
 8009f6a:	7839      	ldrb	r1, [r7, #0]
 8009f6c:	4827      	ldr	r0, [pc, #156]	; (800a00c <_svfiprintf_r+0x1e4>)
 8009f6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f72:	2206      	movs	r2, #6
 8009f74:	1c7e      	adds	r6, r7, #1
 8009f76:	f7f6 f95b 	bl	8000230 <memchr>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d038      	beq.n	8009ff0 <_svfiprintf_r+0x1c8>
 8009f7e:	4b24      	ldr	r3, [pc, #144]	; (800a010 <_svfiprintf_r+0x1e8>)
 8009f80:	bb13      	cbnz	r3, 8009fc8 <_svfiprintf_r+0x1a0>
 8009f82:	9b03      	ldr	r3, [sp, #12]
 8009f84:	3307      	adds	r3, #7
 8009f86:	f023 0307 	bic.w	r3, r3, #7
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	9303      	str	r3, [sp, #12]
 8009f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f90:	444b      	add	r3, r9
 8009f92:	9309      	str	r3, [sp, #36]	; 0x24
 8009f94:	e76d      	b.n	8009e72 <_svfiprintf_r+0x4a>
 8009f96:	fb05 3202 	mla	r2, r5, r2, r3
 8009f9a:	2001      	movs	r0, #1
 8009f9c:	460f      	mov	r7, r1
 8009f9e:	e7a6      	b.n	8009eee <_svfiprintf_r+0xc6>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	3701      	adds	r7, #1
 8009fa4:	9305      	str	r3, [sp, #20]
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	250a      	movs	r5, #10
 8009faa:	4638      	mov	r0, r7
 8009fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fb0:	3a30      	subs	r2, #48	; 0x30
 8009fb2:	2a09      	cmp	r2, #9
 8009fb4:	d903      	bls.n	8009fbe <_svfiprintf_r+0x196>
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d0c8      	beq.n	8009f4c <_svfiprintf_r+0x124>
 8009fba:	9105      	str	r1, [sp, #20]
 8009fbc:	e7c6      	b.n	8009f4c <_svfiprintf_r+0x124>
 8009fbe:	fb05 2101 	mla	r1, r5, r1, r2
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	e7f0      	b.n	8009faa <_svfiprintf_r+0x182>
 8009fc8:	ab03      	add	r3, sp, #12
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	4622      	mov	r2, r4
 8009fce:	4b11      	ldr	r3, [pc, #68]	; (800a014 <_svfiprintf_r+0x1ec>)
 8009fd0:	a904      	add	r1, sp, #16
 8009fd2:	4640      	mov	r0, r8
 8009fd4:	f7fe f8ae 	bl	8008134 <_printf_float>
 8009fd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009fdc:	4681      	mov	r9, r0
 8009fde:	d1d6      	bne.n	8009f8e <_svfiprintf_r+0x166>
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	065b      	lsls	r3, r3, #25
 8009fe4:	f53f af35 	bmi.w	8009e52 <_svfiprintf_r+0x2a>
 8009fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fea:	b01d      	add	sp, #116	; 0x74
 8009fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff0:	ab03      	add	r3, sp, #12
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	4622      	mov	r2, r4
 8009ff6:	4b07      	ldr	r3, [pc, #28]	; (800a014 <_svfiprintf_r+0x1ec>)
 8009ff8:	a904      	add	r1, sp, #16
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	f7fe fb50 	bl	80086a0 <_printf_i>
 800a000:	e7ea      	b.n	8009fd8 <_svfiprintf_r+0x1b0>
 800a002:	bf00      	nop
 800a004:	0800d38c 	.word	0x0800d38c
 800a008:	0800d392 	.word	0x0800d392
 800a00c:	0800d396 	.word	0x0800d396
 800a010:	08008135 	.word	0x08008135
 800a014:	08009d75 	.word	0x08009d75

0800a018 <_sungetc_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	1c4b      	adds	r3, r1, #1
 800a01c:	4614      	mov	r4, r2
 800a01e:	d103      	bne.n	800a028 <_sungetc_r+0x10>
 800a020:	f04f 35ff 	mov.w	r5, #4294967295
 800a024:	4628      	mov	r0, r5
 800a026:	bd38      	pop	{r3, r4, r5, pc}
 800a028:	8993      	ldrh	r3, [r2, #12]
 800a02a:	f023 0320 	bic.w	r3, r3, #32
 800a02e:	8193      	strh	r3, [r2, #12]
 800a030:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a032:	6852      	ldr	r2, [r2, #4]
 800a034:	b2cd      	uxtb	r5, r1
 800a036:	b18b      	cbz	r3, 800a05c <_sungetc_r+0x44>
 800a038:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a03a:	4293      	cmp	r3, r2
 800a03c:	dd08      	ble.n	800a050 <_sungetc_r+0x38>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	1e5a      	subs	r2, r3, #1
 800a042:	6022      	str	r2, [r4, #0]
 800a044:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a048:	6863      	ldr	r3, [r4, #4]
 800a04a:	3301      	adds	r3, #1
 800a04c:	6063      	str	r3, [r4, #4]
 800a04e:	e7e9      	b.n	800a024 <_sungetc_r+0xc>
 800a050:	4621      	mov	r1, r4
 800a052:	f000 fc3f 	bl	800a8d4 <__submore>
 800a056:	2800      	cmp	r0, #0
 800a058:	d0f1      	beq.n	800a03e <_sungetc_r+0x26>
 800a05a:	e7e1      	b.n	800a020 <_sungetc_r+0x8>
 800a05c:	6921      	ldr	r1, [r4, #16]
 800a05e:	6823      	ldr	r3, [r4, #0]
 800a060:	b151      	cbz	r1, 800a078 <_sungetc_r+0x60>
 800a062:	4299      	cmp	r1, r3
 800a064:	d208      	bcs.n	800a078 <_sungetc_r+0x60>
 800a066:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a06a:	42a9      	cmp	r1, r5
 800a06c:	d104      	bne.n	800a078 <_sungetc_r+0x60>
 800a06e:	3b01      	subs	r3, #1
 800a070:	3201      	adds	r2, #1
 800a072:	6023      	str	r3, [r4, #0]
 800a074:	6062      	str	r2, [r4, #4]
 800a076:	e7d5      	b.n	800a024 <_sungetc_r+0xc>
 800a078:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a07c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a080:	6363      	str	r3, [r4, #52]	; 0x34
 800a082:	2303      	movs	r3, #3
 800a084:	63a3      	str	r3, [r4, #56]	; 0x38
 800a086:	4623      	mov	r3, r4
 800a088:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	2301      	movs	r3, #1
 800a090:	e7dc      	b.n	800a04c <_sungetc_r+0x34>

0800a092 <__ssrefill_r>:
 800a092:	b510      	push	{r4, lr}
 800a094:	460c      	mov	r4, r1
 800a096:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a098:	b169      	cbz	r1, 800a0b6 <__ssrefill_r+0x24>
 800a09a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a09e:	4299      	cmp	r1, r3
 800a0a0:	d001      	beq.n	800a0a6 <__ssrefill_r+0x14>
 800a0a2:	f7ff fdbf 	bl	8009c24 <_free_r>
 800a0a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0a8:	6063      	str	r3, [r4, #4]
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a0ae:	b113      	cbz	r3, 800a0b6 <__ssrefill_r+0x24>
 800a0b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a0b2:	6023      	str	r3, [r4, #0]
 800a0b4:	bd10      	pop	{r4, pc}
 800a0b6:	6923      	ldr	r3, [r4, #16]
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	6063      	str	r3, [r4, #4]
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	f043 0320 	orr.w	r3, r3, #32
 800a0c4:	81a3      	strh	r3, [r4, #12]
 800a0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ca:	e7f3      	b.n	800a0b4 <__ssrefill_r+0x22>

0800a0cc <__ssvfiscanf_r>:
 800a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a0d4:	460c      	mov	r4, r1
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	9144      	str	r1, [sp, #272]	; 0x110
 800a0da:	9145      	str	r1, [sp, #276]	; 0x114
 800a0dc:	499f      	ldr	r1, [pc, #636]	; (800a35c <__ssvfiscanf_r+0x290>)
 800a0de:	91a0      	str	r1, [sp, #640]	; 0x280
 800a0e0:	f10d 0804 	add.w	r8, sp, #4
 800a0e4:	499e      	ldr	r1, [pc, #632]	; (800a360 <__ssvfiscanf_r+0x294>)
 800a0e6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800a364 <__ssvfiscanf_r+0x298>
 800a0ea:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	4692      	mov	sl, r2
 800a0f2:	91a1      	str	r1, [sp, #644]	; 0x284
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	270a      	movs	r7, #10
 800a0f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 812a 	beq.w	800a356 <__ssvfiscanf_r+0x28a>
 800a102:	4655      	mov	r5, sl
 800a104:	f000 fc24 	bl	800a950 <__locale_ctype_ptr>
 800a108:	f815 bb01 	ldrb.w	fp, [r5], #1
 800a10c:	4458      	add	r0, fp
 800a10e:	7843      	ldrb	r3, [r0, #1]
 800a110:	f013 0308 	ands.w	r3, r3, #8
 800a114:	d01c      	beq.n	800a150 <__ssvfiscanf_r+0x84>
 800a116:	6863      	ldr	r3, [r4, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	dd12      	ble.n	800a142 <__ssvfiscanf_r+0x76>
 800a11c:	f000 fc18 	bl	800a950 <__locale_ctype_ptr>
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	781a      	ldrb	r2, [r3, #0]
 800a124:	4410      	add	r0, r2
 800a126:	7842      	ldrb	r2, [r0, #1]
 800a128:	0712      	lsls	r2, r2, #28
 800a12a:	d401      	bmi.n	800a130 <__ssvfiscanf_r+0x64>
 800a12c:	46aa      	mov	sl, r5
 800a12e:	e7e3      	b.n	800a0f8 <__ssvfiscanf_r+0x2c>
 800a130:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a132:	3201      	adds	r2, #1
 800a134:	9245      	str	r2, [sp, #276]	; 0x114
 800a136:	6862      	ldr	r2, [r4, #4]
 800a138:	3301      	adds	r3, #1
 800a13a:	3a01      	subs	r2, #1
 800a13c:	6062      	str	r2, [r4, #4]
 800a13e:	6023      	str	r3, [r4, #0]
 800a140:	e7e9      	b.n	800a116 <__ssvfiscanf_r+0x4a>
 800a142:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a144:	4621      	mov	r1, r4
 800a146:	4630      	mov	r0, r6
 800a148:	4798      	blx	r3
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d0e6      	beq.n	800a11c <__ssvfiscanf_r+0x50>
 800a14e:	e7ed      	b.n	800a12c <__ssvfiscanf_r+0x60>
 800a150:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a154:	f040 8082 	bne.w	800a25c <__ssvfiscanf_r+0x190>
 800a158:	9343      	str	r3, [sp, #268]	; 0x10c
 800a15a:	9341      	str	r3, [sp, #260]	; 0x104
 800a15c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a160:	2b2a      	cmp	r3, #42	; 0x2a
 800a162:	d103      	bne.n	800a16c <__ssvfiscanf_r+0xa0>
 800a164:	2310      	movs	r3, #16
 800a166:	9341      	str	r3, [sp, #260]	; 0x104
 800a168:	f10a 0502 	add.w	r5, sl, #2
 800a16c:	46aa      	mov	sl, r5
 800a16e:	f815 1b01 	ldrb.w	r1, [r5], #1
 800a172:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a176:	2a09      	cmp	r2, #9
 800a178:	d922      	bls.n	800a1c0 <__ssvfiscanf_r+0xf4>
 800a17a:	2203      	movs	r2, #3
 800a17c:	4879      	ldr	r0, [pc, #484]	; (800a364 <__ssvfiscanf_r+0x298>)
 800a17e:	f7f6 f857 	bl	8000230 <memchr>
 800a182:	b138      	cbz	r0, 800a194 <__ssvfiscanf_r+0xc8>
 800a184:	eba0 0309 	sub.w	r3, r0, r9
 800a188:	2001      	movs	r0, #1
 800a18a:	4098      	lsls	r0, r3
 800a18c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a18e:	4318      	orrs	r0, r3
 800a190:	9041      	str	r0, [sp, #260]	; 0x104
 800a192:	46aa      	mov	sl, r5
 800a194:	f89a 3000 	ldrb.w	r3, [sl]
 800a198:	2b67      	cmp	r3, #103	; 0x67
 800a19a:	f10a 0501 	add.w	r5, sl, #1
 800a19e:	d82b      	bhi.n	800a1f8 <__ssvfiscanf_r+0x12c>
 800a1a0:	2b65      	cmp	r3, #101	; 0x65
 800a1a2:	f080 809f 	bcs.w	800a2e4 <__ssvfiscanf_r+0x218>
 800a1a6:	2b47      	cmp	r3, #71	; 0x47
 800a1a8:	d810      	bhi.n	800a1cc <__ssvfiscanf_r+0x100>
 800a1aa:	2b45      	cmp	r3, #69	; 0x45
 800a1ac:	f080 809a 	bcs.w	800a2e4 <__ssvfiscanf_r+0x218>
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d06c      	beq.n	800a28e <__ssvfiscanf_r+0x1c2>
 800a1b4:	2b25      	cmp	r3, #37	; 0x25
 800a1b6:	d051      	beq.n	800a25c <__ssvfiscanf_r+0x190>
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	9347      	str	r3, [sp, #284]	; 0x11c
 800a1bc:	9742      	str	r7, [sp, #264]	; 0x108
 800a1be:	e027      	b.n	800a210 <__ssvfiscanf_r+0x144>
 800a1c0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a1c2:	fb07 1303 	mla	r3, r7, r3, r1
 800a1c6:	3b30      	subs	r3, #48	; 0x30
 800a1c8:	9343      	str	r3, [sp, #268]	; 0x10c
 800a1ca:	e7cf      	b.n	800a16c <__ssvfiscanf_r+0xa0>
 800a1cc:	2b5b      	cmp	r3, #91	; 0x5b
 800a1ce:	d06a      	beq.n	800a2a6 <__ssvfiscanf_r+0x1da>
 800a1d0:	d80c      	bhi.n	800a1ec <__ssvfiscanf_r+0x120>
 800a1d2:	2b58      	cmp	r3, #88	; 0x58
 800a1d4:	d1f0      	bne.n	800a1b8 <__ssvfiscanf_r+0xec>
 800a1d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a1d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1dc:	9241      	str	r2, [sp, #260]	; 0x104
 800a1de:	2210      	movs	r2, #16
 800a1e0:	9242      	str	r2, [sp, #264]	; 0x108
 800a1e2:	2b6e      	cmp	r3, #110	; 0x6e
 800a1e4:	bf8c      	ite	hi
 800a1e6:	2304      	movhi	r3, #4
 800a1e8:	2303      	movls	r3, #3
 800a1ea:	e010      	b.n	800a20e <__ssvfiscanf_r+0x142>
 800a1ec:	2b63      	cmp	r3, #99	; 0x63
 800a1ee:	d065      	beq.n	800a2bc <__ssvfiscanf_r+0x1f0>
 800a1f0:	2b64      	cmp	r3, #100	; 0x64
 800a1f2:	d1e1      	bne.n	800a1b8 <__ssvfiscanf_r+0xec>
 800a1f4:	9742      	str	r7, [sp, #264]	; 0x108
 800a1f6:	e7f4      	b.n	800a1e2 <__ssvfiscanf_r+0x116>
 800a1f8:	2b70      	cmp	r3, #112	; 0x70
 800a1fa:	d04b      	beq.n	800a294 <__ssvfiscanf_r+0x1c8>
 800a1fc:	d826      	bhi.n	800a24c <__ssvfiscanf_r+0x180>
 800a1fe:	2b6e      	cmp	r3, #110	; 0x6e
 800a200:	d062      	beq.n	800a2c8 <__ssvfiscanf_r+0x1fc>
 800a202:	d84c      	bhi.n	800a29e <__ssvfiscanf_r+0x1d2>
 800a204:	2b69      	cmp	r3, #105	; 0x69
 800a206:	d1d7      	bne.n	800a1b8 <__ssvfiscanf_r+0xec>
 800a208:	2300      	movs	r3, #0
 800a20a:	9342      	str	r3, [sp, #264]	; 0x108
 800a20c:	2303      	movs	r3, #3
 800a20e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a210:	6863      	ldr	r3, [r4, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	dd68      	ble.n	800a2e8 <__ssvfiscanf_r+0x21c>
 800a216:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a218:	0659      	lsls	r1, r3, #25
 800a21a:	d407      	bmi.n	800a22c <__ssvfiscanf_r+0x160>
 800a21c:	f000 fb98 	bl	800a950 <__locale_ctype_ptr>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	781a      	ldrb	r2, [r3, #0]
 800a224:	4410      	add	r0, r2
 800a226:	7842      	ldrb	r2, [r0, #1]
 800a228:	0712      	lsls	r2, r2, #28
 800a22a:	d464      	bmi.n	800a2f6 <__ssvfiscanf_r+0x22a>
 800a22c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a22e:	2b02      	cmp	r3, #2
 800a230:	dc73      	bgt.n	800a31a <__ssvfiscanf_r+0x24e>
 800a232:	466b      	mov	r3, sp
 800a234:	4622      	mov	r2, r4
 800a236:	a941      	add	r1, sp, #260	; 0x104
 800a238:	4630      	mov	r0, r6
 800a23a:	f000 f897 	bl	800a36c <_scanf_chars>
 800a23e:	2801      	cmp	r0, #1
 800a240:	f000 8089 	beq.w	800a356 <__ssvfiscanf_r+0x28a>
 800a244:	2802      	cmp	r0, #2
 800a246:	f47f af71 	bne.w	800a12c <__ssvfiscanf_r+0x60>
 800a24a:	e01d      	b.n	800a288 <__ssvfiscanf_r+0x1bc>
 800a24c:	2b75      	cmp	r3, #117	; 0x75
 800a24e:	d0d1      	beq.n	800a1f4 <__ssvfiscanf_r+0x128>
 800a250:	2b78      	cmp	r3, #120	; 0x78
 800a252:	d0c0      	beq.n	800a1d6 <__ssvfiscanf_r+0x10a>
 800a254:	2b73      	cmp	r3, #115	; 0x73
 800a256:	d1af      	bne.n	800a1b8 <__ssvfiscanf_r+0xec>
 800a258:	2302      	movs	r3, #2
 800a25a:	e7d8      	b.n	800a20e <__ssvfiscanf_r+0x142>
 800a25c:	6863      	ldr	r3, [r4, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	dd0c      	ble.n	800a27c <__ssvfiscanf_r+0x1b0>
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	781a      	ldrb	r2, [r3, #0]
 800a266:	455a      	cmp	r2, fp
 800a268:	d175      	bne.n	800a356 <__ssvfiscanf_r+0x28a>
 800a26a:	3301      	adds	r3, #1
 800a26c:	6862      	ldr	r2, [r4, #4]
 800a26e:	6023      	str	r3, [r4, #0]
 800a270:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a272:	3a01      	subs	r2, #1
 800a274:	3301      	adds	r3, #1
 800a276:	6062      	str	r2, [r4, #4]
 800a278:	9345      	str	r3, [sp, #276]	; 0x114
 800a27a:	e757      	b.n	800a12c <__ssvfiscanf_r+0x60>
 800a27c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a27e:	4621      	mov	r1, r4
 800a280:	4630      	mov	r0, r6
 800a282:	4798      	blx	r3
 800a284:	2800      	cmp	r0, #0
 800a286:	d0ec      	beq.n	800a262 <__ssvfiscanf_r+0x196>
 800a288:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d159      	bne.n	800a342 <__ssvfiscanf_r+0x276>
 800a28e:	f04f 30ff 	mov.w	r0, #4294967295
 800a292:	e05c      	b.n	800a34e <__ssvfiscanf_r+0x282>
 800a294:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a296:	f042 0220 	orr.w	r2, r2, #32
 800a29a:	9241      	str	r2, [sp, #260]	; 0x104
 800a29c:	e79b      	b.n	800a1d6 <__ssvfiscanf_r+0x10a>
 800a29e:	2308      	movs	r3, #8
 800a2a0:	9342      	str	r3, [sp, #264]	; 0x108
 800a2a2:	2304      	movs	r3, #4
 800a2a4:	e7b3      	b.n	800a20e <__ssvfiscanf_r+0x142>
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	4640      	mov	r0, r8
 800a2aa:	f000 f9c7 	bl	800a63c <__sccl>
 800a2ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a2b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2b4:	9341      	str	r3, [sp, #260]	; 0x104
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e7a8      	b.n	800a20e <__ssvfiscanf_r+0x142>
 800a2bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2c2:	9341      	str	r3, [sp, #260]	; 0x104
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	e7a2      	b.n	800a20e <__ssvfiscanf_r+0x142>
 800a2c8:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a2ca:	06c3      	lsls	r3, r0, #27
 800a2cc:	f53f af2e 	bmi.w	800a12c <__ssvfiscanf_r+0x60>
 800a2d0:	9b00      	ldr	r3, [sp, #0]
 800a2d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a2d4:	1d19      	adds	r1, r3, #4
 800a2d6:	9100      	str	r1, [sp, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	07c0      	lsls	r0, r0, #31
 800a2dc:	bf4c      	ite	mi
 800a2de:	801a      	strhmi	r2, [r3, #0]
 800a2e0:	601a      	strpl	r2, [r3, #0]
 800a2e2:	e723      	b.n	800a12c <__ssvfiscanf_r+0x60>
 800a2e4:	2305      	movs	r3, #5
 800a2e6:	e792      	b.n	800a20e <__ssvfiscanf_r+0x142>
 800a2e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	4798      	blx	r3
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d090      	beq.n	800a216 <__ssvfiscanf_r+0x14a>
 800a2f4:	e7c8      	b.n	800a288 <__ssvfiscanf_r+0x1bc>
 800a2f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a2f8:	3201      	adds	r2, #1
 800a2fa:	9245      	str	r2, [sp, #276]	; 0x114
 800a2fc:	6862      	ldr	r2, [r4, #4]
 800a2fe:	3a01      	subs	r2, #1
 800a300:	2a00      	cmp	r2, #0
 800a302:	6062      	str	r2, [r4, #4]
 800a304:	dd02      	ble.n	800a30c <__ssvfiscanf_r+0x240>
 800a306:	3301      	adds	r3, #1
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	e787      	b.n	800a21c <__ssvfiscanf_r+0x150>
 800a30c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a30e:	4621      	mov	r1, r4
 800a310:	4630      	mov	r0, r6
 800a312:	4798      	blx	r3
 800a314:	2800      	cmp	r0, #0
 800a316:	d081      	beq.n	800a21c <__ssvfiscanf_r+0x150>
 800a318:	e7b6      	b.n	800a288 <__ssvfiscanf_r+0x1bc>
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	dc06      	bgt.n	800a32c <__ssvfiscanf_r+0x260>
 800a31e:	466b      	mov	r3, sp
 800a320:	4622      	mov	r2, r4
 800a322:	a941      	add	r1, sp, #260	; 0x104
 800a324:	4630      	mov	r0, r6
 800a326:	f000 f885 	bl	800a434 <_scanf_i>
 800a32a:	e788      	b.n	800a23e <__ssvfiscanf_r+0x172>
 800a32c:	4b0e      	ldr	r3, [pc, #56]	; (800a368 <__ssvfiscanf_r+0x29c>)
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f43f aefc 	beq.w	800a12c <__ssvfiscanf_r+0x60>
 800a334:	466b      	mov	r3, sp
 800a336:	4622      	mov	r2, r4
 800a338:	a941      	add	r1, sp, #260	; 0x104
 800a33a:	4630      	mov	r0, r6
 800a33c:	f3af 8000 	nop.w
 800a340:	e77d      	b.n	800a23e <__ssvfiscanf_r+0x172>
 800a342:	89a3      	ldrh	r3, [r4, #12]
 800a344:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a348:	bf18      	it	ne
 800a34a:	f04f 30ff 	movne.w	r0, #4294967295
 800a34e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a356:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a358:	e7f9      	b.n	800a34e <__ssvfiscanf_r+0x282>
 800a35a:	bf00      	nop
 800a35c:	0800a019 	.word	0x0800a019
 800a360:	0800a093 	.word	0x0800a093
 800a364:	0800d392 	.word	0x0800d392
 800a368:	00000000 	.word	0x00000000

0800a36c <_scanf_chars>:
 800a36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a370:	4615      	mov	r5, r2
 800a372:	688a      	ldr	r2, [r1, #8]
 800a374:	4680      	mov	r8, r0
 800a376:	460c      	mov	r4, r1
 800a378:	b932      	cbnz	r2, 800a388 <_scanf_chars+0x1c>
 800a37a:	698a      	ldr	r2, [r1, #24]
 800a37c:	2a00      	cmp	r2, #0
 800a37e:	bf14      	ite	ne
 800a380:	f04f 32ff 	movne.w	r2, #4294967295
 800a384:	2201      	moveq	r2, #1
 800a386:	608a      	str	r2, [r1, #8]
 800a388:	6822      	ldr	r2, [r4, #0]
 800a38a:	06d1      	lsls	r1, r2, #27
 800a38c:	bf5f      	itttt	pl
 800a38e:	681a      	ldrpl	r2, [r3, #0]
 800a390:	1d11      	addpl	r1, r2, #4
 800a392:	6019      	strpl	r1, [r3, #0]
 800a394:	6817      	ldrpl	r7, [r2, #0]
 800a396:	2600      	movs	r6, #0
 800a398:	69a3      	ldr	r3, [r4, #24]
 800a39a:	b1db      	cbz	r3, 800a3d4 <_scanf_chars+0x68>
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d107      	bne.n	800a3b0 <_scanf_chars+0x44>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	6962      	ldr	r2, [r4, #20]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	5cd3      	ldrb	r3, [r2, r3]
 800a3a8:	b9a3      	cbnz	r3, 800a3d4 <_scanf_chars+0x68>
 800a3aa:	2e00      	cmp	r6, #0
 800a3ac:	d132      	bne.n	800a414 <_scanf_chars+0xa8>
 800a3ae:	e006      	b.n	800a3be <_scanf_chars+0x52>
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d007      	beq.n	800a3c4 <_scanf_chars+0x58>
 800a3b4:	2e00      	cmp	r6, #0
 800a3b6:	d12d      	bne.n	800a414 <_scanf_chars+0xa8>
 800a3b8:	69a3      	ldr	r3, [r4, #24]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d12a      	bne.n	800a414 <_scanf_chars+0xa8>
 800a3be:	2001      	movs	r0, #1
 800a3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c4:	f000 fac4 	bl	800a950 <__locale_ctype_ptr>
 800a3c8:	682b      	ldr	r3, [r5, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	4418      	add	r0, r3
 800a3ce:	7843      	ldrb	r3, [r0, #1]
 800a3d0:	071b      	lsls	r3, r3, #28
 800a3d2:	d4ef      	bmi.n	800a3b4 <_scanf_chars+0x48>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	06da      	lsls	r2, r3, #27
 800a3d8:	bf5e      	ittt	pl
 800a3da:	682b      	ldrpl	r3, [r5, #0]
 800a3dc:	781b      	ldrbpl	r3, [r3, #0]
 800a3de:	703b      	strbpl	r3, [r7, #0]
 800a3e0:	682a      	ldr	r2, [r5, #0]
 800a3e2:	686b      	ldr	r3, [r5, #4]
 800a3e4:	f102 0201 	add.w	r2, r2, #1
 800a3e8:	602a      	str	r2, [r5, #0]
 800a3ea:	68a2      	ldr	r2, [r4, #8]
 800a3ec:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3f0:	f102 32ff 	add.w	r2, r2, #4294967295
 800a3f4:	606b      	str	r3, [r5, #4]
 800a3f6:	f106 0601 	add.w	r6, r6, #1
 800a3fa:	bf58      	it	pl
 800a3fc:	3701      	addpl	r7, #1
 800a3fe:	60a2      	str	r2, [r4, #8]
 800a400:	b142      	cbz	r2, 800a414 <_scanf_chars+0xa8>
 800a402:	2b00      	cmp	r3, #0
 800a404:	dcc8      	bgt.n	800a398 <_scanf_chars+0x2c>
 800a406:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a40a:	4629      	mov	r1, r5
 800a40c:	4640      	mov	r0, r8
 800a40e:	4798      	blx	r3
 800a410:	2800      	cmp	r0, #0
 800a412:	d0c1      	beq.n	800a398 <_scanf_chars+0x2c>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	f013 0310 	ands.w	r3, r3, #16
 800a41a:	d105      	bne.n	800a428 <_scanf_chars+0xbc>
 800a41c:	68e2      	ldr	r2, [r4, #12]
 800a41e:	3201      	adds	r2, #1
 800a420:	60e2      	str	r2, [r4, #12]
 800a422:	69a2      	ldr	r2, [r4, #24]
 800a424:	b102      	cbz	r2, 800a428 <_scanf_chars+0xbc>
 800a426:	703b      	strb	r3, [r7, #0]
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	441e      	add	r6, r3
 800a42c:	6126      	str	r6, [r4, #16]
 800a42e:	2000      	movs	r0, #0
 800a430:	e7c6      	b.n	800a3c0 <_scanf_chars+0x54>
	...

0800a434 <_scanf_i>:
 800a434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a438:	469a      	mov	sl, r3
 800a43a:	4b74      	ldr	r3, [pc, #464]	; (800a60c <_scanf_i+0x1d8>)
 800a43c:	460c      	mov	r4, r1
 800a43e:	4683      	mov	fp, r0
 800a440:	4616      	mov	r6, r2
 800a442:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a446:	b087      	sub	sp, #28
 800a448:	ab03      	add	r3, sp, #12
 800a44a:	68a7      	ldr	r7, [r4, #8]
 800a44c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a450:	4b6f      	ldr	r3, [pc, #444]	; (800a610 <_scanf_i+0x1dc>)
 800a452:	69a1      	ldr	r1, [r4, #24]
 800a454:	4a6f      	ldr	r2, [pc, #444]	; (800a614 <_scanf_i+0x1e0>)
 800a456:	2903      	cmp	r1, #3
 800a458:	bf08      	it	eq
 800a45a:	461a      	moveq	r2, r3
 800a45c:	1e7b      	subs	r3, r7, #1
 800a45e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a462:	bf84      	itt	hi
 800a464:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a468:	60a3      	strhi	r3, [r4, #8]
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	9200      	str	r2, [sp, #0]
 800a46e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a472:	bf88      	it	hi
 800a474:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a478:	f104 091c 	add.w	r9, r4, #28
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	bf8c      	ite	hi
 800a480:	197f      	addhi	r7, r7, r5
 800a482:	2700      	movls	r7, #0
 800a484:	464b      	mov	r3, r9
 800a486:	f04f 0800 	mov.w	r8, #0
 800a48a:	9301      	str	r3, [sp, #4]
 800a48c:	6831      	ldr	r1, [r6, #0]
 800a48e:	ab03      	add	r3, sp, #12
 800a490:	2202      	movs	r2, #2
 800a492:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a496:	7809      	ldrb	r1, [r1, #0]
 800a498:	f7f5 feca 	bl	8000230 <memchr>
 800a49c:	9b01      	ldr	r3, [sp, #4]
 800a49e:	b330      	cbz	r0, 800a4ee <_scanf_i+0xba>
 800a4a0:	f1b8 0f01 	cmp.w	r8, #1
 800a4a4:	d15a      	bne.n	800a55c <_scanf_i+0x128>
 800a4a6:	6862      	ldr	r2, [r4, #4]
 800a4a8:	b92a      	cbnz	r2, 800a4b6 <_scanf_i+0x82>
 800a4aa:	6822      	ldr	r2, [r4, #0]
 800a4ac:	2108      	movs	r1, #8
 800a4ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4b2:	6061      	str	r1, [r4, #4]
 800a4b4:	6022      	str	r2, [r4, #0]
 800a4b6:	6822      	ldr	r2, [r4, #0]
 800a4b8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a4bc:	6022      	str	r2, [r4, #0]
 800a4be:	68a2      	ldr	r2, [r4, #8]
 800a4c0:	1e51      	subs	r1, r2, #1
 800a4c2:	60a1      	str	r1, [r4, #8]
 800a4c4:	b19a      	cbz	r2, 800a4ee <_scanf_i+0xba>
 800a4c6:	6832      	ldr	r2, [r6, #0]
 800a4c8:	1c51      	adds	r1, r2, #1
 800a4ca:	6031      	str	r1, [r6, #0]
 800a4cc:	7812      	ldrb	r2, [r2, #0]
 800a4ce:	701a      	strb	r2, [r3, #0]
 800a4d0:	1c5d      	adds	r5, r3, #1
 800a4d2:	6873      	ldr	r3, [r6, #4]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	6073      	str	r3, [r6, #4]
 800a4da:	dc07      	bgt.n	800a4ec <_scanf_i+0xb8>
 800a4dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a4e0:	4631      	mov	r1, r6
 800a4e2:	4658      	mov	r0, fp
 800a4e4:	4798      	blx	r3
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	f040 8086 	bne.w	800a5f8 <_scanf_i+0x1c4>
 800a4ec:	462b      	mov	r3, r5
 800a4ee:	f108 0801 	add.w	r8, r8, #1
 800a4f2:	f1b8 0f03 	cmp.w	r8, #3
 800a4f6:	d1c8      	bne.n	800a48a <_scanf_i+0x56>
 800a4f8:	6862      	ldr	r2, [r4, #4]
 800a4fa:	b90a      	cbnz	r2, 800a500 <_scanf_i+0xcc>
 800a4fc:	220a      	movs	r2, #10
 800a4fe:	6062      	str	r2, [r4, #4]
 800a500:	6862      	ldr	r2, [r4, #4]
 800a502:	4945      	ldr	r1, [pc, #276]	; (800a618 <_scanf_i+0x1e4>)
 800a504:	6960      	ldr	r0, [r4, #20]
 800a506:	9301      	str	r3, [sp, #4]
 800a508:	1a89      	subs	r1, r1, r2
 800a50a:	f000 f897 	bl	800a63c <__sccl>
 800a50e:	9b01      	ldr	r3, [sp, #4]
 800a510:	f04f 0800 	mov.w	r8, #0
 800a514:	461d      	mov	r5, r3
 800a516:	68a3      	ldr	r3, [r4, #8]
 800a518:	6822      	ldr	r2, [r4, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d03a      	beq.n	800a594 <_scanf_i+0x160>
 800a51e:	6831      	ldr	r1, [r6, #0]
 800a520:	6960      	ldr	r0, [r4, #20]
 800a522:	f891 c000 	ldrb.w	ip, [r1]
 800a526:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a52a:	2800      	cmp	r0, #0
 800a52c:	d032      	beq.n	800a594 <_scanf_i+0x160>
 800a52e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a532:	d121      	bne.n	800a578 <_scanf_i+0x144>
 800a534:	0510      	lsls	r0, r2, #20
 800a536:	d51f      	bpl.n	800a578 <_scanf_i+0x144>
 800a538:	f108 0801 	add.w	r8, r8, #1
 800a53c:	b117      	cbz	r7, 800a544 <_scanf_i+0x110>
 800a53e:	3301      	adds	r3, #1
 800a540:	3f01      	subs	r7, #1
 800a542:	60a3      	str	r3, [r4, #8]
 800a544:	6873      	ldr	r3, [r6, #4]
 800a546:	3b01      	subs	r3, #1
 800a548:	2b00      	cmp	r3, #0
 800a54a:	6073      	str	r3, [r6, #4]
 800a54c:	dd1b      	ble.n	800a586 <_scanf_i+0x152>
 800a54e:	6833      	ldr	r3, [r6, #0]
 800a550:	3301      	adds	r3, #1
 800a552:	6033      	str	r3, [r6, #0]
 800a554:	68a3      	ldr	r3, [r4, #8]
 800a556:	3b01      	subs	r3, #1
 800a558:	60a3      	str	r3, [r4, #8]
 800a55a:	e7dc      	b.n	800a516 <_scanf_i+0xe2>
 800a55c:	f1b8 0f02 	cmp.w	r8, #2
 800a560:	d1ad      	bne.n	800a4be <_scanf_i+0x8a>
 800a562:	6822      	ldr	r2, [r4, #0]
 800a564:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a568:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a56c:	d1bf      	bne.n	800a4ee <_scanf_i+0xba>
 800a56e:	2110      	movs	r1, #16
 800a570:	6061      	str	r1, [r4, #4]
 800a572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a576:	e7a1      	b.n	800a4bc <_scanf_i+0x88>
 800a578:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a57c:	6022      	str	r2, [r4, #0]
 800a57e:	780b      	ldrb	r3, [r1, #0]
 800a580:	702b      	strb	r3, [r5, #0]
 800a582:	3501      	adds	r5, #1
 800a584:	e7de      	b.n	800a544 <_scanf_i+0x110>
 800a586:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a58a:	4631      	mov	r1, r6
 800a58c:	4658      	mov	r0, fp
 800a58e:	4798      	blx	r3
 800a590:	2800      	cmp	r0, #0
 800a592:	d0df      	beq.n	800a554 <_scanf_i+0x120>
 800a594:	6823      	ldr	r3, [r4, #0]
 800a596:	05d9      	lsls	r1, r3, #23
 800a598:	d50c      	bpl.n	800a5b4 <_scanf_i+0x180>
 800a59a:	454d      	cmp	r5, r9
 800a59c:	d908      	bls.n	800a5b0 <_scanf_i+0x17c>
 800a59e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a5a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5a6:	4632      	mov	r2, r6
 800a5a8:	4658      	mov	r0, fp
 800a5aa:	4798      	blx	r3
 800a5ac:	1e6f      	subs	r7, r5, #1
 800a5ae:	463d      	mov	r5, r7
 800a5b0:	454d      	cmp	r5, r9
 800a5b2:	d029      	beq.n	800a608 <_scanf_i+0x1d4>
 800a5b4:	6822      	ldr	r2, [r4, #0]
 800a5b6:	f012 0210 	ands.w	r2, r2, #16
 800a5ba:	d113      	bne.n	800a5e4 <_scanf_i+0x1b0>
 800a5bc:	702a      	strb	r2, [r5, #0]
 800a5be:	6863      	ldr	r3, [r4, #4]
 800a5c0:	9e00      	ldr	r6, [sp, #0]
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	4658      	mov	r0, fp
 800a5c6:	47b0      	blx	r6
 800a5c8:	f8da 3000 	ldr.w	r3, [sl]
 800a5cc:	6821      	ldr	r1, [r4, #0]
 800a5ce:	1d1a      	adds	r2, r3, #4
 800a5d0:	f8ca 2000 	str.w	r2, [sl]
 800a5d4:	f011 0f20 	tst.w	r1, #32
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	d010      	beq.n	800a5fe <_scanf_i+0x1ca>
 800a5dc:	6018      	str	r0, [r3, #0]
 800a5de:	68e3      	ldr	r3, [r4, #12]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	60e3      	str	r3, [r4, #12]
 800a5e4:	eba5 0509 	sub.w	r5, r5, r9
 800a5e8:	44a8      	add	r8, r5
 800a5ea:	6925      	ldr	r5, [r4, #16]
 800a5ec:	4445      	add	r5, r8
 800a5ee:	6125      	str	r5, [r4, #16]
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	b007      	add	sp, #28
 800a5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f8:	f04f 0800 	mov.w	r8, #0
 800a5fc:	e7ca      	b.n	800a594 <_scanf_i+0x160>
 800a5fe:	07ca      	lsls	r2, r1, #31
 800a600:	bf4c      	ite	mi
 800a602:	8018      	strhmi	r0, [r3, #0]
 800a604:	6018      	strpl	r0, [r3, #0]
 800a606:	e7ea      	b.n	800a5de <_scanf_i+0x1aa>
 800a608:	2001      	movs	r0, #1
 800a60a:	e7f2      	b.n	800a5f2 <_scanf_i+0x1be>
 800a60c:	0800d220 	.word	0x0800d220
 800a610:	0800a799 	.word	0x0800a799
 800a614:	0800a8b1 	.word	0x0800a8b1
 800a618:	0800d3ad 	.word	0x0800d3ad

0800a61c <_sbrk_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4c06      	ldr	r4, [pc, #24]	; (800a638 <_sbrk_r+0x1c>)
 800a620:	2300      	movs	r3, #0
 800a622:	4605      	mov	r5, r0
 800a624:	4608      	mov	r0, r1
 800a626:	6023      	str	r3, [r4, #0]
 800a628:	f7f9 faac 	bl	8003b84 <_sbrk>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d102      	bne.n	800a636 <_sbrk_r+0x1a>
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	b103      	cbz	r3, 800a636 <_sbrk_r+0x1a>
 800a634:	602b      	str	r3, [r5, #0]
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	20001068 	.word	0x20001068

0800a63c <__sccl>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	780b      	ldrb	r3, [r1, #0]
 800a640:	2b5e      	cmp	r3, #94	; 0x5e
 800a642:	bf13      	iteet	ne
 800a644:	1c4a      	addne	r2, r1, #1
 800a646:	1c8a      	addeq	r2, r1, #2
 800a648:	784b      	ldrbeq	r3, [r1, #1]
 800a64a:	2100      	movne	r1, #0
 800a64c:	bf08      	it	eq
 800a64e:	2101      	moveq	r1, #1
 800a650:	1e44      	subs	r4, r0, #1
 800a652:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800a656:	f804 1f01 	strb.w	r1, [r4, #1]!
 800a65a:	42ac      	cmp	r4, r5
 800a65c:	d1fb      	bne.n	800a656 <__sccl+0x1a>
 800a65e:	b913      	cbnz	r3, 800a666 <__sccl+0x2a>
 800a660:	3a01      	subs	r2, #1
 800a662:	4610      	mov	r0, r2
 800a664:	bd70      	pop	{r4, r5, r6, pc}
 800a666:	f081 0401 	eor.w	r4, r1, #1
 800a66a:	54c4      	strb	r4, [r0, r3]
 800a66c:	1c51      	adds	r1, r2, #1
 800a66e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800a672:	2d2d      	cmp	r5, #45	; 0x2d
 800a674:	f101 36ff 	add.w	r6, r1, #4294967295
 800a678:	460a      	mov	r2, r1
 800a67a:	d006      	beq.n	800a68a <__sccl+0x4e>
 800a67c:	2d5d      	cmp	r5, #93	; 0x5d
 800a67e:	d0f0      	beq.n	800a662 <__sccl+0x26>
 800a680:	b90d      	cbnz	r5, 800a686 <__sccl+0x4a>
 800a682:	4632      	mov	r2, r6
 800a684:	e7ed      	b.n	800a662 <__sccl+0x26>
 800a686:	462b      	mov	r3, r5
 800a688:	e7ef      	b.n	800a66a <__sccl+0x2e>
 800a68a:	780e      	ldrb	r6, [r1, #0]
 800a68c:	2e5d      	cmp	r6, #93	; 0x5d
 800a68e:	d0fa      	beq.n	800a686 <__sccl+0x4a>
 800a690:	42b3      	cmp	r3, r6
 800a692:	dcf8      	bgt.n	800a686 <__sccl+0x4a>
 800a694:	3301      	adds	r3, #1
 800a696:	429e      	cmp	r6, r3
 800a698:	54c4      	strb	r4, [r0, r3]
 800a69a:	dcfb      	bgt.n	800a694 <__sccl+0x58>
 800a69c:	3102      	adds	r1, #2
 800a69e:	e7e6      	b.n	800a66e <__sccl+0x32>

0800a6a0 <_strtol_l.isra.0>:
 800a6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a4:	4680      	mov	r8, r0
 800a6a6:	4689      	mov	r9, r1
 800a6a8:	4692      	mov	sl, r2
 800a6aa:	461e      	mov	r6, r3
 800a6ac:	460f      	mov	r7, r1
 800a6ae:	463d      	mov	r5, r7
 800a6b0:	9808      	ldr	r0, [sp, #32]
 800a6b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6b6:	f000 f947 	bl	800a948 <__locale_ctype_ptr_l>
 800a6ba:	4420      	add	r0, r4
 800a6bc:	7843      	ldrb	r3, [r0, #1]
 800a6be:	f013 0308 	ands.w	r3, r3, #8
 800a6c2:	d132      	bne.n	800a72a <_strtol_l.isra.0+0x8a>
 800a6c4:	2c2d      	cmp	r4, #45	; 0x2d
 800a6c6:	d132      	bne.n	800a72e <_strtol_l.isra.0+0x8e>
 800a6c8:	787c      	ldrb	r4, [r7, #1]
 800a6ca:	1cbd      	adds	r5, r7, #2
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	2e00      	cmp	r6, #0
 800a6d0:	d05d      	beq.n	800a78e <_strtol_l.isra.0+0xee>
 800a6d2:	2e10      	cmp	r6, #16
 800a6d4:	d109      	bne.n	800a6ea <_strtol_l.isra.0+0x4a>
 800a6d6:	2c30      	cmp	r4, #48	; 0x30
 800a6d8:	d107      	bne.n	800a6ea <_strtol_l.isra.0+0x4a>
 800a6da:	782b      	ldrb	r3, [r5, #0]
 800a6dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6e0:	2b58      	cmp	r3, #88	; 0x58
 800a6e2:	d14f      	bne.n	800a784 <_strtol_l.isra.0+0xe4>
 800a6e4:	786c      	ldrb	r4, [r5, #1]
 800a6e6:	2610      	movs	r6, #16
 800a6e8:	3502      	adds	r5, #2
 800a6ea:	2a00      	cmp	r2, #0
 800a6ec:	bf14      	ite	ne
 800a6ee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a6f2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a6f6:	2700      	movs	r7, #0
 800a6f8:	fbb1 fcf6 	udiv	ip, r1, r6
 800a6fc:	4638      	mov	r0, r7
 800a6fe:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a702:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a706:	2b09      	cmp	r3, #9
 800a708:	d817      	bhi.n	800a73a <_strtol_l.isra.0+0x9a>
 800a70a:	461c      	mov	r4, r3
 800a70c:	42a6      	cmp	r6, r4
 800a70e:	dd23      	ble.n	800a758 <_strtol_l.isra.0+0xb8>
 800a710:	1c7b      	adds	r3, r7, #1
 800a712:	d007      	beq.n	800a724 <_strtol_l.isra.0+0x84>
 800a714:	4584      	cmp	ip, r0
 800a716:	d31c      	bcc.n	800a752 <_strtol_l.isra.0+0xb2>
 800a718:	d101      	bne.n	800a71e <_strtol_l.isra.0+0x7e>
 800a71a:	45a6      	cmp	lr, r4
 800a71c:	db19      	blt.n	800a752 <_strtol_l.isra.0+0xb2>
 800a71e:	fb00 4006 	mla	r0, r0, r6, r4
 800a722:	2701      	movs	r7, #1
 800a724:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a728:	e7eb      	b.n	800a702 <_strtol_l.isra.0+0x62>
 800a72a:	462f      	mov	r7, r5
 800a72c:	e7bf      	b.n	800a6ae <_strtol_l.isra.0+0xe>
 800a72e:	2c2b      	cmp	r4, #43	; 0x2b
 800a730:	bf04      	itt	eq
 800a732:	1cbd      	addeq	r5, r7, #2
 800a734:	787c      	ldrbeq	r4, [r7, #1]
 800a736:	461a      	mov	r2, r3
 800a738:	e7c9      	b.n	800a6ce <_strtol_l.isra.0+0x2e>
 800a73a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a73e:	2b19      	cmp	r3, #25
 800a740:	d801      	bhi.n	800a746 <_strtol_l.isra.0+0xa6>
 800a742:	3c37      	subs	r4, #55	; 0x37
 800a744:	e7e2      	b.n	800a70c <_strtol_l.isra.0+0x6c>
 800a746:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a74a:	2b19      	cmp	r3, #25
 800a74c:	d804      	bhi.n	800a758 <_strtol_l.isra.0+0xb8>
 800a74e:	3c57      	subs	r4, #87	; 0x57
 800a750:	e7dc      	b.n	800a70c <_strtol_l.isra.0+0x6c>
 800a752:	f04f 37ff 	mov.w	r7, #4294967295
 800a756:	e7e5      	b.n	800a724 <_strtol_l.isra.0+0x84>
 800a758:	1c7b      	adds	r3, r7, #1
 800a75a:	d108      	bne.n	800a76e <_strtol_l.isra.0+0xce>
 800a75c:	2322      	movs	r3, #34	; 0x22
 800a75e:	f8c8 3000 	str.w	r3, [r8]
 800a762:	4608      	mov	r0, r1
 800a764:	f1ba 0f00 	cmp.w	sl, #0
 800a768:	d107      	bne.n	800a77a <_strtol_l.isra.0+0xda>
 800a76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76e:	b102      	cbz	r2, 800a772 <_strtol_l.isra.0+0xd2>
 800a770:	4240      	negs	r0, r0
 800a772:	f1ba 0f00 	cmp.w	sl, #0
 800a776:	d0f8      	beq.n	800a76a <_strtol_l.isra.0+0xca>
 800a778:	b10f      	cbz	r7, 800a77e <_strtol_l.isra.0+0xde>
 800a77a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a77e:	f8ca 9000 	str.w	r9, [sl]
 800a782:	e7f2      	b.n	800a76a <_strtol_l.isra.0+0xca>
 800a784:	2430      	movs	r4, #48	; 0x30
 800a786:	2e00      	cmp	r6, #0
 800a788:	d1af      	bne.n	800a6ea <_strtol_l.isra.0+0x4a>
 800a78a:	2608      	movs	r6, #8
 800a78c:	e7ad      	b.n	800a6ea <_strtol_l.isra.0+0x4a>
 800a78e:	2c30      	cmp	r4, #48	; 0x30
 800a790:	d0a3      	beq.n	800a6da <_strtol_l.isra.0+0x3a>
 800a792:	260a      	movs	r6, #10
 800a794:	e7a9      	b.n	800a6ea <_strtol_l.isra.0+0x4a>
	...

0800a798 <_strtol_r>:
 800a798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a79a:	4c06      	ldr	r4, [pc, #24]	; (800a7b4 <_strtol_r+0x1c>)
 800a79c:	4d06      	ldr	r5, [pc, #24]	; (800a7b8 <_strtol_r+0x20>)
 800a79e:	6824      	ldr	r4, [r4, #0]
 800a7a0:	6a24      	ldr	r4, [r4, #32]
 800a7a2:	2c00      	cmp	r4, #0
 800a7a4:	bf08      	it	eq
 800a7a6:	462c      	moveq	r4, r5
 800a7a8:	9400      	str	r4, [sp, #0]
 800a7aa:	f7ff ff79 	bl	800a6a0 <_strtol_l.isra.0>
 800a7ae:	b003      	add	sp, #12
 800a7b0:	bd30      	pop	{r4, r5, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20000020 	.word	0x20000020
 800a7b8:	20000084 	.word	0x20000084

0800a7bc <_strtoul_l.isra.0>:
 800a7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c0:	4680      	mov	r8, r0
 800a7c2:	4689      	mov	r9, r1
 800a7c4:	4692      	mov	sl, r2
 800a7c6:	461e      	mov	r6, r3
 800a7c8:	460f      	mov	r7, r1
 800a7ca:	463d      	mov	r5, r7
 800a7cc:	9808      	ldr	r0, [sp, #32]
 800a7ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7d2:	f000 f8b9 	bl	800a948 <__locale_ctype_ptr_l>
 800a7d6:	4420      	add	r0, r4
 800a7d8:	7843      	ldrb	r3, [r0, #1]
 800a7da:	f013 0308 	ands.w	r3, r3, #8
 800a7de:	d130      	bne.n	800a842 <_strtoul_l.isra.0+0x86>
 800a7e0:	2c2d      	cmp	r4, #45	; 0x2d
 800a7e2:	d130      	bne.n	800a846 <_strtoul_l.isra.0+0x8a>
 800a7e4:	787c      	ldrb	r4, [r7, #1]
 800a7e6:	1cbd      	adds	r5, r7, #2
 800a7e8:	2101      	movs	r1, #1
 800a7ea:	2e00      	cmp	r6, #0
 800a7ec:	d05c      	beq.n	800a8a8 <_strtoul_l.isra.0+0xec>
 800a7ee:	2e10      	cmp	r6, #16
 800a7f0:	d109      	bne.n	800a806 <_strtoul_l.isra.0+0x4a>
 800a7f2:	2c30      	cmp	r4, #48	; 0x30
 800a7f4:	d107      	bne.n	800a806 <_strtoul_l.isra.0+0x4a>
 800a7f6:	782b      	ldrb	r3, [r5, #0]
 800a7f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a7fc:	2b58      	cmp	r3, #88	; 0x58
 800a7fe:	d14e      	bne.n	800a89e <_strtoul_l.isra.0+0xe2>
 800a800:	786c      	ldrb	r4, [r5, #1]
 800a802:	2610      	movs	r6, #16
 800a804:	3502      	adds	r5, #2
 800a806:	f04f 32ff 	mov.w	r2, #4294967295
 800a80a:	2300      	movs	r3, #0
 800a80c:	fbb2 f2f6 	udiv	r2, r2, r6
 800a810:	fb06 fc02 	mul.w	ip, r6, r2
 800a814:	ea6f 0c0c 	mvn.w	ip, ip
 800a818:	4618      	mov	r0, r3
 800a81a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a81e:	2f09      	cmp	r7, #9
 800a820:	d817      	bhi.n	800a852 <_strtoul_l.isra.0+0x96>
 800a822:	463c      	mov	r4, r7
 800a824:	42a6      	cmp	r6, r4
 800a826:	dd23      	ble.n	800a870 <_strtoul_l.isra.0+0xb4>
 800a828:	2b00      	cmp	r3, #0
 800a82a:	db1e      	blt.n	800a86a <_strtoul_l.isra.0+0xae>
 800a82c:	4282      	cmp	r2, r0
 800a82e:	d31c      	bcc.n	800a86a <_strtoul_l.isra.0+0xae>
 800a830:	d101      	bne.n	800a836 <_strtoul_l.isra.0+0x7a>
 800a832:	45a4      	cmp	ip, r4
 800a834:	db19      	blt.n	800a86a <_strtoul_l.isra.0+0xae>
 800a836:	fb00 4006 	mla	r0, r0, r6, r4
 800a83a:	2301      	movs	r3, #1
 800a83c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a840:	e7eb      	b.n	800a81a <_strtoul_l.isra.0+0x5e>
 800a842:	462f      	mov	r7, r5
 800a844:	e7c1      	b.n	800a7ca <_strtoul_l.isra.0+0xe>
 800a846:	2c2b      	cmp	r4, #43	; 0x2b
 800a848:	bf04      	itt	eq
 800a84a:	1cbd      	addeq	r5, r7, #2
 800a84c:	787c      	ldrbeq	r4, [r7, #1]
 800a84e:	4619      	mov	r1, r3
 800a850:	e7cb      	b.n	800a7ea <_strtoul_l.isra.0+0x2e>
 800a852:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a856:	2f19      	cmp	r7, #25
 800a858:	d801      	bhi.n	800a85e <_strtoul_l.isra.0+0xa2>
 800a85a:	3c37      	subs	r4, #55	; 0x37
 800a85c:	e7e2      	b.n	800a824 <_strtoul_l.isra.0+0x68>
 800a85e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a862:	2f19      	cmp	r7, #25
 800a864:	d804      	bhi.n	800a870 <_strtoul_l.isra.0+0xb4>
 800a866:	3c57      	subs	r4, #87	; 0x57
 800a868:	e7dc      	b.n	800a824 <_strtoul_l.isra.0+0x68>
 800a86a:	f04f 33ff 	mov.w	r3, #4294967295
 800a86e:	e7e5      	b.n	800a83c <_strtoul_l.isra.0+0x80>
 800a870:	2b00      	cmp	r3, #0
 800a872:	da09      	bge.n	800a888 <_strtoul_l.isra.0+0xcc>
 800a874:	2322      	movs	r3, #34	; 0x22
 800a876:	f8c8 3000 	str.w	r3, [r8]
 800a87a:	f04f 30ff 	mov.w	r0, #4294967295
 800a87e:	f1ba 0f00 	cmp.w	sl, #0
 800a882:	d107      	bne.n	800a894 <_strtoul_l.isra.0+0xd8>
 800a884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a888:	b101      	cbz	r1, 800a88c <_strtoul_l.isra.0+0xd0>
 800a88a:	4240      	negs	r0, r0
 800a88c:	f1ba 0f00 	cmp.w	sl, #0
 800a890:	d0f8      	beq.n	800a884 <_strtoul_l.isra.0+0xc8>
 800a892:	b10b      	cbz	r3, 800a898 <_strtoul_l.isra.0+0xdc>
 800a894:	f105 39ff 	add.w	r9, r5, #4294967295
 800a898:	f8ca 9000 	str.w	r9, [sl]
 800a89c:	e7f2      	b.n	800a884 <_strtoul_l.isra.0+0xc8>
 800a89e:	2430      	movs	r4, #48	; 0x30
 800a8a0:	2e00      	cmp	r6, #0
 800a8a2:	d1b0      	bne.n	800a806 <_strtoul_l.isra.0+0x4a>
 800a8a4:	2608      	movs	r6, #8
 800a8a6:	e7ae      	b.n	800a806 <_strtoul_l.isra.0+0x4a>
 800a8a8:	2c30      	cmp	r4, #48	; 0x30
 800a8aa:	d0a4      	beq.n	800a7f6 <_strtoul_l.isra.0+0x3a>
 800a8ac:	260a      	movs	r6, #10
 800a8ae:	e7aa      	b.n	800a806 <_strtoul_l.isra.0+0x4a>

0800a8b0 <_strtoul_r>:
 800a8b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8b2:	4c06      	ldr	r4, [pc, #24]	; (800a8cc <_strtoul_r+0x1c>)
 800a8b4:	4d06      	ldr	r5, [pc, #24]	; (800a8d0 <_strtoul_r+0x20>)
 800a8b6:	6824      	ldr	r4, [r4, #0]
 800a8b8:	6a24      	ldr	r4, [r4, #32]
 800a8ba:	2c00      	cmp	r4, #0
 800a8bc:	bf08      	it	eq
 800a8be:	462c      	moveq	r4, r5
 800a8c0:	9400      	str	r4, [sp, #0]
 800a8c2:	f7ff ff7b 	bl	800a7bc <_strtoul_l.isra.0>
 800a8c6:	b003      	add	sp, #12
 800a8c8:	bd30      	pop	{r4, r5, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20000020 	.word	0x20000020
 800a8d0:	20000084 	.word	0x20000084

0800a8d4 <__submore>:
 800a8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d8:	460c      	mov	r4, r1
 800a8da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a8dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8e0:	4299      	cmp	r1, r3
 800a8e2:	d11d      	bne.n	800a920 <__submore+0x4c>
 800a8e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a8e8:	f7ff f9ea 	bl	8009cc0 <_malloc_r>
 800a8ec:	b918      	cbnz	r0, 800a8f6 <__submore+0x22>
 800a8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8fa:	63a3      	str	r3, [r4, #56]	; 0x38
 800a8fc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a900:	6360      	str	r0, [r4, #52]	; 0x34
 800a902:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a906:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a90a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a90e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a912:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a916:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a91a:	6020      	str	r0, [r4, #0]
 800a91c:	2000      	movs	r0, #0
 800a91e:	e7e8      	b.n	800a8f2 <__submore+0x1e>
 800a920:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a922:	0077      	lsls	r7, r6, #1
 800a924:	463a      	mov	r2, r7
 800a926:	f000 f84e 	bl	800a9c6 <_realloc_r>
 800a92a:	4605      	mov	r5, r0
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d0de      	beq.n	800a8ee <__submore+0x1a>
 800a930:	eb00 0806 	add.w	r8, r0, r6
 800a934:	4601      	mov	r1, r0
 800a936:	4632      	mov	r2, r6
 800a938:	4640      	mov	r0, r8
 800a93a:	f7fe fe7f 	bl	800963c <memcpy>
 800a93e:	f8c4 8000 	str.w	r8, [r4]
 800a942:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a946:	e7e9      	b.n	800a91c <__submore+0x48>

0800a948 <__locale_ctype_ptr_l>:
 800a948:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a94c:	4770      	bx	lr
	...

0800a950 <__locale_ctype_ptr>:
 800a950:	4b04      	ldr	r3, [pc, #16]	; (800a964 <__locale_ctype_ptr+0x14>)
 800a952:	4a05      	ldr	r2, [pc, #20]	; (800a968 <__locale_ctype_ptr+0x18>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	6a1b      	ldr	r3, [r3, #32]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	bf08      	it	eq
 800a95c:	4613      	moveq	r3, r2
 800a95e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800a962:	4770      	bx	lr
 800a964:	20000020 	.word	0x20000020
 800a968:	20000084 	.word	0x20000084

0800a96c <__ascii_mbtowc>:
 800a96c:	b082      	sub	sp, #8
 800a96e:	b901      	cbnz	r1, 800a972 <__ascii_mbtowc+0x6>
 800a970:	a901      	add	r1, sp, #4
 800a972:	b142      	cbz	r2, 800a986 <__ascii_mbtowc+0x1a>
 800a974:	b14b      	cbz	r3, 800a98a <__ascii_mbtowc+0x1e>
 800a976:	7813      	ldrb	r3, [r2, #0]
 800a978:	600b      	str	r3, [r1, #0]
 800a97a:	7812      	ldrb	r2, [r2, #0]
 800a97c:	1c10      	adds	r0, r2, #0
 800a97e:	bf18      	it	ne
 800a980:	2001      	movne	r0, #1
 800a982:	b002      	add	sp, #8
 800a984:	4770      	bx	lr
 800a986:	4610      	mov	r0, r2
 800a988:	e7fb      	b.n	800a982 <__ascii_mbtowc+0x16>
 800a98a:	f06f 0001 	mvn.w	r0, #1
 800a98e:	e7f8      	b.n	800a982 <__ascii_mbtowc+0x16>

0800a990 <memmove>:
 800a990:	4288      	cmp	r0, r1
 800a992:	b510      	push	{r4, lr}
 800a994:	eb01 0302 	add.w	r3, r1, r2
 800a998:	d807      	bhi.n	800a9aa <memmove+0x1a>
 800a99a:	1e42      	subs	r2, r0, #1
 800a99c:	4299      	cmp	r1, r3
 800a99e:	d00a      	beq.n	800a9b6 <memmove+0x26>
 800a9a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9a4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a9a8:	e7f8      	b.n	800a99c <memmove+0xc>
 800a9aa:	4283      	cmp	r3, r0
 800a9ac:	d9f5      	bls.n	800a99a <memmove+0xa>
 800a9ae:	1881      	adds	r1, r0, r2
 800a9b0:	1ad2      	subs	r2, r2, r3
 800a9b2:	42d3      	cmn	r3, r2
 800a9b4:	d100      	bne.n	800a9b8 <memmove+0x28>
 800a9b6:	bd10      	pop	{r4, pc}
 800a9b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a9c0:	e7f7      	b.n	800a9b2 <memmove+0x22>

0800a9c2 <__malloc_lock>:
 800a9c2:	4770      	bx	lr

0800a9c4 <__malloc_unlock>:
 800a9c4:	4770      	bx	lr

0800a9c6 <_realloc_r>:
 800a9c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c8:	4607      	mov	r7, r0
 800a9ca:	4614      	mov	r4, r2
 800a9cc:	460e      	mov	r6, r1
 800a9ce:	b921      	cbnz	r1, 800a9da <_realloc_r+0x14>
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a9d6:	f7ff b973 	b.w	8009cc0 <_malloc_r>
 800a9da:	b922      	cbnz	r2, 800a9e6 <_realloc_r+0x20>
 800a9dc:	f7ff f922 	bl	8009c24 <_free_r>
 800a9e0:	4625      	mov	r5, r4
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9e6:	f000 f821 	bl	800aa2c <_malloc_usable_size_r>
 800a9ea:	42a0      	cmp	r0, r4
 800a9ec:	d20f      	bcs.n	800aa0e <_realloc_r+0x48>
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	4638      	mov	r0, r7
 800a9f2:	f7ff f965 	bl	8009cc0 <_malloc_r>
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d0f2      	beq.n	800a9e2 <_realloc_r+0x1c>
 800a9fc:	4631      	mov	r1, r6
 800a9fe:	4622      	mov	r2, r4
 800aa00:	f7fe fe1c 	bl	800963c <memcpy>
 800aa04:	4631      	mov	r1, r6
 800aa06:	4638      	mov	r0, r7
 800aa08:	f7ff f90c 	bl	8009c24 <_free_r>
 800aa0c:	e7e9      	b.n	800a9e2 <_realloc_r+0x1c>
 800aa0e:	4635      	mov	r5, r6
 800aa10:	e7e7      	b.n	800a9e2 <_realloc_r+0x1c>

0800aa12 <__ascii_wctomb>:
 800aa12:	b149      	cbz	r1, 800aa28 <__ascii_wctomb+0x16>
 800aa14:	2aff      	cmp	r2, #255	; 0xff
 800aa16:	bf85      	ittet	hi
 800aa18:	238a      	movhi	r3, #138	; 0x8a
 800aa1a:	6003      	strhi	r3, [r0, #0]
 800aa1c:	700a      	strbls	r2, [r1, #0]
 800aa1e:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa22:	bf98      	it	ls
 800aa24:	2001      	movls	r0, #1
 800aa26:	4770      	bx	lr
 800aa28:	4608      	mov	r0, r1
 800aa2a:	4770      	bx	lr

0800aa2c <_malloc_usable_size_r>:
 800aa2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa30:	1f18      	subs	r0, r3, #4
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	bfbc      	itt	lt
 800aa36:	580b      	ldrlt	r3, [r1, r0]
 800aa38:	18c0      	addlt	r0, r0, r3
 800aa3a:	4770      	bx	lr
 800aa3c:	0000      	movs	r0, r0
	...

0800aa40 <cos>:
 800aa40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa42:	ec51 0b10 	vmov	r0, r1, d0
 800aa46:	4a1e      	ldr	r2, [pc, #120]	; (800aac0 <cos+0x80>)
 800aa48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	dc06      	bgt.n	800aa5e <cos+0x1e>
 800aa50:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800aab8 <cos+0x78>
 800aa54:	f001 fc90 	bl	800c378 <__kernel_cos>
 800aa58:	ec51 0b10 	vmov	r0, r1, d0
 800aa5c:	e007      	b.n	800aa6e <cos+0x2e>
 800aa5e:	4a19      	ldr	r2, [pc, #100]	; (800aac4 <cos+0x84>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	dd09      	ble.n	800aa78 <cos+0x38>
 800aa64:	ee10 2a10 	vmov	r2, s0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	f7f5 fc35 	bl	80002d8 <__aeabi_dsub>
 800aa6e:	ec41 0b10 	vmov	d0, r0, r1
 800aa72:	b005      	add	sp, #20
 800aa74:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa78:	4668      	mov	r0, sp
 800aa7a:	f001 f9d9 	bl	800be30 <__ieee754_rem_pio2>
 800aa7e:	f000 0003 	and.w	r0, r0, #3
 800aa82:	2801      	cmp	r0, #1
 800aa84:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa88:	ed9d 0b00 	vldr	d0, [sp]
 800aa8c:	d007      	beq.n	800aa9e <cos+0x5e>
 800aa8e:	2802      	cmp	r0, #2
 800aa90:	d00e      	beq.n	800aab0 <cos+0x70>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d0de      	beq.n	800aa54 <cos+0x14>
 800aa96:	2001      	movs	r0, #1
 800aa98:	f002 f876 	bl	800cb88 <__kernel_sin>
 800aa9c:	e7dc      	b.n	800aa58 <cos+0x18>
 800aa9e:	f002 f873 	bl	800cb88 <__kernel_sin>
 800aaa2:	ec53 2b10 	vmov	r2, r3, d0
 800aaa6:	ee10 0a10 	vmov	r0, s0
 800aaaa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aaae:	e7de      	b.n	800aa6e <cos+0x2e>
 800aab0:	f001 fc62 	bl	800c378 <__kernel_cos>
 800aab4:	e7f5      	b.n	800aaa2 <cos+0x62>
 800aab6:	bf00      	nop
	...
 800aac0:	3fe921fb 	.word	0x3fe921fb
 800aac4:	7fefffff 	.word	0x7fefffff

0800aac8 <roundf>:
 800aac8:	ee10 0a10 	vmov	r0, s0
 800aacc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800aad0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800aad4:	2a16      	cmp	r2, #22
 800aad6:	dc15      	bgt.n	800ab04 <roundf+0x3c>
 800aad8:	2a00      	cmp	r2, #0
 800aada:	da08      	bge.n	800aaee <roundf+0x26>
 800aadc:	3201      	adds	r2, #1
 800aade:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800aae2:	d101      	bne.n	800aae8 <roundf+0x20>
 800aae4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800aae8:	ee00 3a10 	vmov	s0, r3
 800aaec:	4770      	bx	lr
 800aaee:	4908      	ldr	r1, [pc, #32]	; (800ab10 <roundf+0x48>)
 800aaf0:	4111      	asrs	r1, r2
 800aaf2:	4208      	tst	r0, r1
 800aaf4:	d0fa      	beq.n	800aaec <roundf+0x24>
 800aaf6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aafa:	4113      	asrs	r3, r2
 800aafc:	4403      	add	r3, r0
 800aafe:	ea23 0301 	bic.w	r3, r3, r1
 800ab02:	e7f1      	b.n	800aae8 <roundf+0x20>
 800ab04:	2a80      	cmp	r2, #128	; 0x80
 800ab06:	d1f1      	bne.n	800aaec <roundf+0x24>
 800ab08:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	007fffff 	.word	0x007fffff

0800ab14 <acos>:
 800ab14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab16:	ed2d 8b02 	vpush	{d8}
 800ab1a:	4e26      	ldr	r6, [pc, #152]	; (800abb4 <acos+0xa0>)
 800ab1c:	b08b      	sub	sp, #44	; 0x2c
 800ab1e:	ec55 4b10 	vmov	r4, r5, d0
 800ab22:	f000 fa19 	bl	800af58 <__ieee754_acos>
 800ab26:	f996 3000 	ldrsb.w	r3, [r6]
 800ab2a:	eeb0 8a40 	vmov.f32	s16, s0
 800ab2e:	eef0 8a60 	vmov.f32	s17, s1
 800ab32:	3301      	adds	r3, #1
 800ab34:	d036      	beq.n	800aba4 <acos+0x90>
 800ab36:	4622      	mov	r2, r4
 800ab38:	462b      	mov	r3, r5
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	f7f6 f81d 	bl	8000b7c <__aeabi_dcmpun>
 800ab42:	4607      	mov	r7, r0
 800ab44:	bb70      	cbnz	r0, 800aba4 <acos+0x90>
 800ab46:	ec45 4b10 	vmov	d0, r4, r5
 800ab4a:	f002 f8d7 	bl	800ccfc <fabs>
 800ab4e:	2200      	movs	r2, #0
 800ab50:	4b19      	ldr	r3, [pc, #100]	; (800abb8 <acos+0xa4>)
 800ab52:	ec51 0b10 	vmov	r0, r1, d0
 800ab56:	f7f6 f807 	bl	8000b68 <__aeabi_dcmpgt>
 800ab5a:	b318      	cbz	r0, 800aba4 <acos+0x90>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	4816      	ldr	r0, [pc, #88]	; (800abbc <acos+0xa8>)
 800ab62:	4b17      	ldr	r3, [pc, #92]	; (800abc0 <acos+0xac>)
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	9708      	str	r7, [sp, #32]
 800ab68:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ab6c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ab70:	f002 f95e 	bl	800ce30 <nan>
 800ab74:	f996 3000 	ldrsb.w	r3, [r6]
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ab7e:	d104      	bne.n	800ab8a <acos+0x76>
 800ab80:	f7fd fa12 	bl	8007fa8 <__errno>
 800ab84:	2321      	movs	r3, #33	; 0x21
 800ab86:	6003      	str	r3, [r0, #0]
 800ab88:	e004      	b.n	800ab94 <acos+0x80>
 800ab8a:	4668      	mov	r0, sp
 800ab8c:	f002 f94c 	bl	800ce28 <matherr>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d0f5      	beq.n	800ab80 <acos+0x6c>
 800ab94:	9b08      	ldr	r3, [sp, #32]
 800ab96:	b11b      	cbz	r3, 800aba0 <acos+0x8c>
 800ab98:	f7fd fa06 	bl	8007fa8 <__errno>
 800ab9c:	9b08      	ldr	r3, [sp, #32]
 800ab9e:	6003      	str	r3, [r0, #0]
 800aba0:	ed9d 8b06 	vldr	d8, [sp, #24]
 800aba4:	eeb0 0a48 	vmov.f32	s0, s16
 800aba8:	eef0 0a68 	vmov.f32	s1, s17
 800abac:	b00b      	add	sp, #44	; 0x2c
 800abae:	ecbd 8b02 	vpop	{d8}
 800abb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abb4:	200001f0 	.word	0x200001f0
 800abb8:	3ff00000 	.word	0x3ff00000
 800abbc:	0800d391 	.word	0x0800d391
 800abc0:	0800d523 	.word	0x0800d523

0800abc4 <pow>:
 800abc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc8:	ed2d 8b04 	vpush	{d8-d9}
 800abcc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800aea0 <pow+0x2dc>
 800abd0:	b08d      	sub	sp, #52	; 0x34
 800abd2:	ec57 6b10 	vmov	r6, r7, d0
 800abd6:	ec55 4b11 	vmov	r4, r5, d1
 800abda:	f000 fc19 	bl	800b410 <__ieee754_pow>
 800abde:	f999 3000 	ldrsb.w	r3, [r9]
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	3301      	adds	r3, #1
 800abe6:	eeb0 8a40 	vmov.f32	s16, s0
 800abea:	eef0 8a60 	vmov.f32	s17, s1
 800abee:	46c8      	mov	r8, r9
 800abf0:	d05f      	beq.n	800acb2 <pow+0xee>
 800abf2:	4622      	mov	r2, r4
 800abf4:	462b      	mov	r3, r5
 800abf6:	4620      	mov	r0, r4
 800abf8:	4629      	mov	r1, r5
 800abfa:	f7f5 ffbf 	bl	8000b7c <__aeabi_dcmpun>
 800abfe:	4683      	mov	fp, r0
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d156      	bne.n	800acb2 <pow+0xee>
 800ac04:	4632      	mov	r2, r6
 800ac06:	463b      	mov	r3, r7
 800ac08:	4630      	mov	r0, r6
 800ac0a:	4639      	mov	r1, r7
 800ac0c:	f7f5 ffb6 	bl	8000b7c <__aeabi_dcmpun>
 800ac10:	9001      	str	r0, [sp, #4]
 800ac12:	b1e8      	cbz	r0, 800ac50 <pow+0x8c>
 800ac14:	2200      	movs	r2, #0
 800ac16:	2300      	movs	r3, #0
 800ac18:	4620      	mov	r0, r4
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	f7f5 ff7c 	bl	8000b18 <__aeabi_dcmpeq>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d046      	beq.n	800acb2 <pow+0xee>
 800ac24:	2301      	movs	r3, #1
 800ac26:	9302      	str	r3, [sp, #8]
 800ac28:	4b96      	ldr	r3, [pc, #600]	; (800ae84 <pow+0x2c0>)
 800ac2a:	9303      	str	r3, [sp, #12]
 800ac2c:	4b96      	ldr	r3, [pc, #600]	; (800ae88 <pow+0x2c4>)
 800ac2e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ac32:	2200      	movs	r2, #0
 800ac34:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac38:	9b00      	ldr	r3, [sp, #0]
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ac40:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ac44:	d033      	beq.n	800acae <pow+0xea>
 800ac46:	a802      	add	r0, sp, #8
 800ac48:	f002 f8ee 	bl	800ce28 <matherr>
 800ac4c:	bb48      	cbnz	r0, 800aca2 <pow+0xde>
 800ac4e:	e05d      	b.n	800ad0c <pow+0x148>
 800ac50:	f04f 0a00 	mov.w	sl, #0
 800ac54:	f04f 0b00 	mov.w	fp, #0
 800ac58:	4652      	mov	r2, sl
 800ac5a:	465b      	mov	r3, fp
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	4639      	mov	r1, r7
 800ac60:	f7f5 ff5a 	bl	8000b18 <__aeabi_dcmpeq>
 800ac64:	ec4b ab19 	vmov	d9, sl, fp
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d054      	beq.n	800ad16 <pow+0x152>
 800ac6c:	4652      	mov	r2, sl
 800ac6e:	465b      	mov	r3, fp
 800ac70:	4620      	mov	r0, r4
 800ac72:	4629      	mov	r1, r5
 800ac74:	f7f5 ff50 	bl	8000b18 <__aeabi_dcmpeq>
 800ac78:	4680      	mov	r8, r0
 800ac7a:	b318      	cbz	r0, 800acc4 <pow+0x100>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	9302      	str	r3, [sp, #8]
 800ac80:	4b80      	ldr	r3, [pc, #512]	; (800ae84 <pow+0x2c0>)
 800ac82:	9303      	str	r3, [sp, #12]
 800ac84:	9b01      	ldr	r3, [sp, #4]
 800ac86:	930a      	str	r3, [sp, #40]	; 0x28
 800ac88:	9b00      	ldr	r3, [sp, #0]
 800ac8a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ac8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ac92:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d0d5      	beq.n	800ac46 <pow+0x82>
 800ac9a:	4b7b      	ldr	r3, [pc, #492]	; (800ae88 <pow+0x2c4>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aca4:	b11b      	cbz	r3, 800acae <pow+0xea>
 800aca6:	f7fd f97f 	bl	8007fa8 <__errno>
 800acaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acac:	6003      	str	r3, [r0, #0]
 800acae:	ed9d 8b08 	vldr	d8, [sp, #32]
 800acb2:	eeb0 0a48 	vmov.f32	s0, s16
 800acb6:	eef0 0a68 	vmov.f32	s1, s17
 800acba:	b00d      	add	sp, #52	; 0x34
 800acbc:	ecbd 8b04 	vpop	{d8-d9}
 800acc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc4:	ec45 4b10 	vmov	d0, r4, r5
 800acc8:	f002 f821 	bl	800cd0e <finite>
 800accc:	2800      	cmp	r0, #0
 800acce:	d0f0      	beq.n	800acb2 <pow+0xee>
 800acd0:	4652      	mov	r2, sl
 800acd2:	465b      	mov	r3, fp
 800acd4:	4620      	mov	r0, r4
 800acd6:	4629      	mov	r1, r5
 800acd8:	f7f5 ff28 	bl	8000b2c <__aeabi_dcmplt>
 800acdc:	2800      	cmp	r0, #0
 800acde:	d0e8      	beq.n	800acb2 <pow+0xee>
 800ace0:	2301      	movs	r3, #1
 800ace2:	9302      	str	r3, [sp, #8]
 800ace4:	4b67      	ldr	r3, [pc, #412]	; (800ae84 <pow+0x2c0>)
 800ace6:	9303      	str	r3, [sp, #12]
 800ace8:	f999 3000 	ldrsb.w	r3, [r9]
 800acec:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800acf0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800acf4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800acf8:	b913      	cbnz	r3, 800ad00 <pow+0x13c>
 800acfa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800acfe:	e7a2      	b.n	800ac46 <pow+0x82>
 800ad00:	4962      	ldr	r1, [pc, #392]	; (800ae8c <pow+0x2c8>)
 800ad02:	2000      	movs	r0, #0
 800ad04:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d19c      	bne.n	800ac46 <pow+0x82>
 800ad0c:	f7fd f94c 	bl	8007fa8 <__errno>
 800ad10:	2321      	movs	r3, #33	; 0x21
 800ad12:	6003      	str	r3, [r0, #0]
 800ad14:	e7c5      	b.n	800aca2 <pow+0xde>
 800ad16:	eeb0 0a48 	vmov.f32	s0, s16
 800ad1a:	eef0 0a68 	vmov.f32	s1, s17
 800ad1e:	f001 fff6 	bl	800cd0e <finite>
 800ad22:	9000      	str	r0, [sp, #0]
 800ad24:	2800      	cmp	r0, #0
 800ad26:	f040 8081 	bne.w	800ae2c <pow+0x268>
 800ad2a:	ec47 6b10 	vmov	d0, r6, r7
 800ad2e:	f001 ffee 	bl	800cd0e <finite>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d07a      	beq.n	800ae2c <pow+0x268>
 800ad36:	ec45 4b10 	vmov	d0, r4, r5
 800ad3a:	f001 ffe8 	bl	800cd0e <finite>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d074      	beq.n	800ae2c <pow+0x268>
 800ad42:	ec53 2b18 	vmov	r2, r3, d8
 800ad46:	ee18 0a10 	vmov	r0, s16
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	f7f5 ff16 	bl	8000b7c <__aeabi_dcmpun>
 800ad50:	f999 9000 	ldrsb.w	r9, [r9]
 800ad54:	4b4b      	ldr	r3, [pc, #300]	; (800ae84 <pow+0x2c0>)
 800ad56:	b1b0      	cbz	r0, 800ad86 <pow+0x1c2>
 800ad58:	2201      	movs	r2, #1
 800ad5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad5e:	9b00      	ldr	r3, [sp, #0]
 800ad60:	930a      	str	r3, [sp, #40]	; 0x28
 800ad62:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ad66:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ad6a:	f1b9 0f00 	cmp.w	r9, #0
 800ad6e:	d0c4      	beq.n	800acfa <pow+0x136>
 800ad70:	4652      	mov	r2, sl
 800ad72:	465b      	mov	r3, fp
 800ad74:	4650      	mov	r0, sl
 800ad76:	4659      	mov	r1, fp
 800ad78:	f7f5 fd90 	bl	800089c <__aeabi_ddiv>
 800ad7c:	f1b9 0f02 	cmp.w	r9, #2
 800ad80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad84:	e7c1      	b.n	800ad0a <pow+0x146>
 800ad86:	2203      	movs	r2, #3
 800ad88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad8c:	900a      	str	r0, [sp, #40]	; 0x28
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4620      	mov	r0, r4
 800ad92:	2200      	movs	r2, #0
 800ad94:	4b3e      	ldr	r3, [pc, #248]	; (800ae90 <pow+0x2cc>)
 800ad96:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ad9a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ad9e:	f7f5 fc53 	bl	8000648 <__aeabi_dmul>
 800ada2:	4604      	mov	r4, r0
 800ada4:	460d      	mov	r5, r1
 800ada6:	f1b9 0f00 	cmp.w	r9, #0
 800adaa:	d124      	bne.n	800adf6 <pow+0x232>
 800adac:	4b39      	ldr	r3, [pc, #228]	; (800ae94 <pow+0x2d0>)
 800adae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800adb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800adb6:	4630      	mov	r0, r6
 800adb8:	4652      	mov	r2, sl
 800adba:	465b      	mov	r3, fp
 800adbc:	4639      	mov	r1, r7
 800adbe:	f7f5 feb5 	bl	8000b2c <__aeabi_dcmplt>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	d056      	beq.n	800ae74 <pow+0x2b0>
 800adc6:	ec45 4b10 	vmov	d0, r4, r5
 800adca:	f002 f839 	bl	800ce40 <rint>
 800adce:	4622      	mov	r2, r4
 800add0:	462b      	mov	r3, r5
 800add2:	ec51 0b10 	vmov	r0, r1, d0
 800add6:	f7f5 fe9f 	bl	8000b18 <__aeabi_dcmpeq>
 800adda:	b920      	cbnz	r0, 800ade6 <pow+0x222>
 800addc:	4b2e      	ldr	r3, [pc, #184]	; (800ae98 <pow+0x2d4>)
 800adde:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ade2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ade6:	f998 3000 	ldrsb.w	r3, [r8]
 800adea:	2b02      	cmp	r3, #2
 800adec:	d142      	bne.n	800ae74 <pow+0x2b0>
 800adee:	f7fd f8db 	bl	8007fa8 <__errno>
 800adf2:	2322      	movs	r3, #34	; 0x22
 800adf4:	e78d      	b.n	800ad12 <pow+0x14e>
 800adf6:	4b29      	ldr	r3, [pc, #164]	; (800ae9c <pow+0x2d8>)
 800adf8:	2200      	movs	r2, #0
 800adfa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800adfe:	4630      	mov	r0, r6
 800ae00:	4652      	mov	r2, sl
 800ae02:	465b      	mov	r3, fp
 800ae04:	4639      	mov	r1, r7
 800ae06:	f7f5 fe91 	bl	8000b2c <__aeabi_dcmplt>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d0eb      	beq.n	800ade6 <pow+0x222>
 800ae0e:	ec45 4b10 	vmov	d0, r4, r5
 800ae12:	f002 f815 	bl	800ce40 <rint>
 800ae16:	4622      	mov	r2, r4
 800ae18:	462b      	mov	r3, r5
 800ae1a:	ec51 0b10 	vmov	r0, r1, d0
 800ae1e:	f7f5 fe7b 	bl	8000b18 <__aeabi_dcmpeq>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	d1df      	bne.n	800ade6 <pow+0x222>
 800ae26:	2200      	movs	r2, #0
 800ae28:	4b18      	ldr	r3, [pc, #96]	; (800ae8c <pow+0x2c8>)
 800ae2a:	e7da      	b.n	800ade2 <pow+0x21e>
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	2300      	movs	r3, #0
 800ae30:	ec51 0b18 	vmov	r0, r1, d8
 800ae34:	f7f5 fe70 	bl	8000b18 <__aeabi_dcmpeq>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	f43f af3a 	beq.w	800acb2 <pow+0xee>
 800ae3e:	ec47 6b10 	vmov	d0, r6, r7
 800ae42:	f001 ff64 	bl	800cd0e <finite>
 800ae46:	2800      	cmp	r0, #0
 800ae48:	f43f af33 	beq.w	800acb2 <pow+0xee>
 800ae4c:	ec45 4b10 	vmov	d0, r4, r5
 800ae50:	f001 ff5d 	bl	800cd0e <finite>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	f43f af2c 	beq.w	800acb2 <pow+0xee>
 800ae5a:	2304      	movs	r3, #4
 800ae5c:	9302      	str	r3, [sp, #8]
 800ae5e:	4b09      	ldr	r3, [pc, #36]	; (800ae84 <pow+0x2c0>)
 800ae60:	9303      	str	r3, [sp, #12]
 800ae62:	2300      	movs	r3, #0
 800ae64:	930a      	str	r3, [sp, #40]	; 0x28
 800ae66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ae6a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ae6e:	ed8d 9b08 	vstr	d9, [sp, #32]
 800ae72:	e7b8      	b.n	800ade6 <pow+0x222>
 800ae74:	a802      	add	r0, sp, #8
 800ae76:	f001 ffd7 	bl	800ce28 <matherr>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	f47f af11 	bne.w	800aca2 <pow+0xde>
 800ae80:	e7b5      	b.n	800adee <pow+0x22a>
 800ae82:	bf00      	nop
 800ae84:	0800d528 	.word	0x0800d528
 800ae88:	3ff00000 	.word	0x3ff00000
 800ae8c:	fff00000 	.word	0xfff00000
 800ae90:	3fe00000 	.word	0x3fe00000
 800ae94:	47efffff 	.word	0x47efffff
 800ae98:	c7efffff 	.word	0xc7efffff
 800ae9c:	7ff00000 	.word	0x7ff00000
 800aea0:	200001f0 	.word	0x200001f0

0800aea4 <sqrt>:
 800aea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aea8:	ed2d 8b02 	vpush	{d8}
 800aeac:	b08b      	sub	sp, #44	; 0x2c
 800aeae:	ec55 4b10 	vmov	r4, r5, d0
 800aeb2:	f001 f9af 	bl	800c214 <__ieee754_sqrt>
 800aeb6:	4b26      	ldr	r3, [pc, #152]	; (800af50 <sqrt+0xac>)
 800aeb8:	eeb0 8a40 	vmov.f32	s16, s0
 800aebc:	eef0 8a60 	vmov.f32	s17, s1
 800aec0:	f993 6000 	ldrsb.w	r6, [r3]
 800aec4:	1c73      	adds	r3, r6, #1
 800aec6:	d02a      	beq.n	800af1e <sqrt+0x7a>
 800aec8:	4622      	mov	r2, r4
 800aeca:	462b      	mov	r3, r5
 800aecc:	4620      	mov	r0, r4
 800aece:	4629      	mov	r1, r5
 800aed0:	f7f5 fe54 	bl	8000b7c <__aeabi_dcmpun>
 800aed4:	4607      	mov	r7, r0
 800aed6:	bb10      	cbnz	r0, 800af1e <sqrt+0x7a>
 800aed8:	f04f 0800 	mov.w	r8, #0
 800aedc:	f04f 0900 	mov.w	r9, #0
 800aee0:	4642      	mov	r2, r8
 800aee2:	464b      	mov	r3, r9
 800aee4:	4620      	mov	r0, r4
 800aee6:	4629      	mov	r1, r5
 800aee8:	f7f5 fe20 	bl	8000b2c <__aeabi_dcmplt>
 800aeec:	b1b8      	cbz	r0, 800af1e <sqrt+0x7a>
 800aeee:	2301      	movs	r3, #1
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	4b18      	ldr	r3, [pc, #96]	; (800af54 <sqrt+0xb0>)
 800aef4:	9301      	str	r3, [sp, #4]
 800aef6:	9708      	str	r7, [sp, #32]
 800aef8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800aefc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800af00:	b9b6      	cbnz	r6, 800af30 <sqrt+0x8c>
 800af02:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800af06:	4668      	mov	r0, sp
 800af08:	f001 ff8e 	bl	800ce28 <matherr>
 800af0c:	b1d0      	cbz	r0, 800af44 <sqrt+0xa0>
 800af0e:	9b08      	ldr	r3, [sp, #32]
 800af10:	b11b      	cbz	r3, 800af1a <sqrt+0x76>
 800af12:	f7fd f849 	bl	8007fa8 <__errno>
 800af16:	9b08      	ldr	r3, [sp, #32]
 800af18:	6003      	str	r3, [r0, #0]
 800af1a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800af1e:	eeb0 0a48 	vmov.f32	s0, s16
 800af22:	eef0 0a68 	vmov.f32	s1, s17
 800af26:	b00b      	add	sp, #44	; 0x2c
 800af28:	ecbd 8b02 	vpop	{d8}
 800af2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af30:	4642      	mov	r2, r8
 800af32:	464b      	mov	r3, r9
 800af34:	4640      	mov	r0, r8
 800af36:	4649      	mov	r1, r9
 800af38:	f7f5 fcb0 	bl	800089c <__aeabi_ddiv>
 800af3c:	2e02      	cmp	r6, #2
 800af3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af42:	d1e0      	bne.n	800af06 <sqrt+0x62>
 800af44:	f7fd f830 	bl	8007fa8 <__errno>
 800af48:	2321      	movs	r3, #33	; 0x21
 800af4a:	6003      	str	r3, [r0, #0]
 800af4c:	e7df      	b.n	800af0e <sqrt+0x6a>
 800af4e:	bf00      	nop
 800af50:	200001f0 	.word	0x200001f0
 800af54:	0800d52c 	.word	0x0800d52c

0800af58 <__ieee754_acos>:
 800af58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5c:	ec55 4b10 	vmov	r4, r5, d0
 800af60:	49b7      	ldr	r1, [pc, #732]	; (800b240 <__ieee754_acos+0x2e8>)
 800af62:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800af66:	428b      	cmp	r3, r1
 800af68:	dd1b      	ble.n	800afa2 <__ieee754_acos+0x4a>
 800af6a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800af6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800af72:	4323      	orrs	r3, r4
 800af74:	d109      	bne.n	800af8a <__ieee754_acos+0x32>
 800af76:	2d00      	cmp	r5, #0
 800af78:	f300 8211 	bgt.w	800b39e <__ieee754_acos+0x446>
 800af7c:	a196      	add	r1, pc, #600	; (adr r1, 800b1d8 <__ieee754_acos+0x280>)
 800af7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af82:	ec41 0b10 	vmov	d0, r0, r1
 800af86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af8a:	ee10 2a10 	vmov	r2, s0
 800af8e:	462b      	mov	r3, r5
 800af90:	4620      	mov	r0, r4
 800af92:	4629      	mov	r1, r5
 800af94:	f7f5 f9a0 	bl	80002d8 <__aeabi_dsub>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	f7f5 fc7e 	bl	800089c <__aeabi_ddiv>
 800afa0:	e7ef      	b.n	800af82 <__ieee754_acos+0x2a>
 800afa2:	49a8      	ldr	r1, [pc, #672]	; (800b244 <__ieee754_acos+0x2ec>)
 800afa4:	428b      	cmp	r3, r1
 800afa6:	f300 8087 	bgt.w	800b0b8 <__ieee754_acos+0x160>
 800afaa:	4aa7      	ldr	r2, [pc, #668]	; (800b248 <__ieee754_acos+0x2f0>)
 800afac:	4293      	cmp	r3, r2
 800afae:	f340 81f9 	ble.w	800b3a4 <__ieee754_acos+0x44c>
 800afb2:	ee10 2a10 	vmov	r2, s0
 800afb6:	ee10 0a10 	vmov	r0, s0
 800afba:	462b      	mov	r3, r5
 800afbc:	4629      	mov	r1, r5
 800afbe:	f7f5 fb43 	bl	8000648 <__aeabi_dmul>
 800afc2:	a387      	add	r3, pc, #540	; (adr r3, 800b1e0 <__ieee754_acos+0x288>)
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	4606      	mov	r6, r0
 800afca:	460f      	mov	r7, r1
 800afcc:	f7f5 fb3c 	bl	8000648 <__aeabi_dmul>
 800afd0:	a385      	add	r3, pc, #532	; (adr r3, 800b1e8 <__ieee754_acos+0x290>)
 800afd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd6:	f7f5 f981 	bl	80002dc <__adddf3>
 800afda:	4632      	mov	r2, r6
 800afdc:	463b      	mov	r3, r7
 800afde:	f7f5 fb33 	bl	8000648 <__aeabi_dmul>
 800afe2:	a383      	add	r3, pc, #524	; (adr r3, 800b1f0 <__ieee754_acos+0x298>)
 800afe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe8:	f7f5 f976 	bl	80002d8 <__aeabi_dsub>
 800afec:	4632      	mov	r2, r6
 800afee:	463b      	mov	r3, r7
 800aff0:	f7f5 fb2a 	bl	8000648 <__aeabi_dmul>
 800aff4:	a380      	add	r3, pc, #512	; (adr r3, 800b1f8 <__ieee754_acos+0x2a0>)
 800aff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affa:	f7f5 f96f 	bl	80002dc <__adddf3>
 800affe:	4632      	mov	r2, r6
 800b000:	463b      	mov	r3, r7
 800b002:	f7f5 fb21 	bl	8000648 <__aeabi_dmul>
 800b006:	a37e      	add	r3, pc, #504	; (adr r3, 800b200 <__ieee754_acos+0x2a8>)
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	f7f5 f964 	bl	80002d8 <__aeabi_dsub>
 800b010:	4632      	mov	r2, r6
 800b012:	463b      	mov	r3, r7
 800b014:	f7f5 fb18 	bl	8000648 <__aeabi_dmul>
 800b018:	a37b      	add	r3, pc, #492	; (adr r3, 800b208 <__ieee754_acos+0x2b0>)
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	f7f5 f95d 	bl	80002dc <__adddf3>
 800b022:	4632      	mov	r2, r6
 800b024:	463b      	mov	r3, r7
 800b026:	f7f5 fb0f 	bl	8000648 <__aeabi_dmul>
 800b02a:	a379      	add	r3, pc, #484	; (adr r3, 800b210 <__ieee754_acos+0x2b8>)
 800b02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b030:	4680      	mov	r8, r0
 800b032:	4689      	mov	r9, r1
 800b034:	4630      	mov	r0, r6
 800b036:	4639      	mov	r1, r7
 800b038:	f7f5 fb06 	bl	8000648 <__aeabi_dmul>
 800b03c:	a376      	add	r3, pc, #472	; (adr r3, 800b218 <__ieee754_acos+0x2c0>)
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	f7f5 f949 	bl	80002d8 <__aeabi_dsub>
 800b046:	4632      	mov	r2, r6
 800b048:	463b      	mov	r3, r7
 800b04a:	f7f5 fafd 	bl	8000648 <__aeabi_dmul>
 800b04e:	a374      	add	r3, pc, #464	; (adr r3, 800b220 <__ieee754_acos+0x2c8>)
 800b050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b054:	f7f5 f942 	bl	80002dc <__adddf3>
 800b058:	4632      	mov	r2, r6
 800b05a:	463b      	mov	r3, r7
 800b05c:	f7f5 faf4 	bl	8000648 <__aeabi_dmul>
 800b060:	a371      	add	r3, pc, #452	; (adr r3, 800b228 <__ieee754_acos+0x2d0>)
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	f7f5 f937 	bl	80002d8 <__aeabi_dsub>
 800b06a:	4632      	mov	r2, r6
 800b06c:	463b      	mov	r3, r7
 800b06e:	f7f5 faeb 	bl	8000648 <__aeabi_dmul>
 800b072:	2200      	movs	r2, #0
 800b074:	4b75      	ldr	r3, [pc, #468]	; (800b24c <__ieee754_acos+0x2f4>)
 800b076:	f7f5 f931 	bl	80002dc <__adddf3>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	4640      	mov	r0, r8
 800b080:	4649      	mov	r1, r9
 800b082:	f7f5 fc0b 	bl	800089c <__aeabi_ddiv>
 800b086:	4622      	mov	r2, r4
 800b088:	462b      	mov	r3, r5
 800b08a:	f7f5 fadd 	bl	8000648 <__aeabi_dmul>
 800b08e:	4602      	mov	r2, r0
 800b090:	460b      	mov	r3, r1
 800b092:	a167      	add	r1, pc, #412	; (adr r1, 800b230 <__ieee754_acos+0x2d8>)
 800b094:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b098:	f7f5 f91e 	bl	80002d8 <__aeabi_dsub>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	4629      	mov	r1, r5
 800b0a4:	f7f5 f918 	bl	80002d8 <__aeabi_dsub>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	a162      	add	r1, pc, #392	; (adr r1, 800b238 <__ieee754_acos+0x2e0>)
 800b0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b2:	f7f5 f911 	bl	80002d8 <__aeabi_dsub>
 800b0b6:	e764      	b.n	800af82 <__ieee754_acos+0x2a>
 800b0b8:	2d00      	cmp	r5, #0
 800b0ba:	f280 80cb 	bge.w	800b254 <__ieee754_acos+0x2fc>
 800b0be:	ee10 0a10 	vmov	r0, s0
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	4b61      	ldr	r3, [pc, #388]	; (800b24c <__ieee754_acos+0x2f4>)
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	f7f5 f908 	bl	80002dc <__adddf3>
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	4b60      	ldr	r3, [pc, #384]	; (800b250 <__ieee754_acos+0x2f8>)
 800b0d0:	f7f5 faba 	bl	8000648 <__aeabi_dmul>
 800b0d4:	a342      	add	r3, pc, #264	; (adr r3, 800b1e0 <__ieee754_acos+0x288>)
 800b0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0da:	4604      	mov	r4, r0
 800b0dc:	460d      	mov	r5, r1
 800b0de:	f7f5 fab3 	bl	8000648 <__aeabi_dmul>
 800b0e2:	a341      	add	r3, pc, #260	; (adr r3, 800b1e8 <__ieee754_acos+0x290>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f7f5 f8f8 	bl	80002dc <__adddf3>
 800b0ec:	4622      	mov	r2, r4
 800b0ee:	462b      	mov	r3, r5
 800b0f0:	f7f5 faaa 	bl	8000648 <__aeabi_dmul>
 800b0f4:	a33e      	add	r3, pc, #248	; (adr r3, 800b1f0 <__ieee754_acos+0x298>)
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	f7f5 f8ed 	bl	80002d8 <__aeabi_dsub>
 800b0fe:	4622      	mov	r2, r4
 800b100:	462b      	mov	r3, r5
 800b102:	f7f5 faa1 	bl	8000648 <__aeabi_dmul>
 800b106:	a33c      	add	r3, pc, #240	; (adr r3, 800b1f8 <__ieee754_acos+0x2a0>)
 800b108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10c:	f7f5 f8e6 	bl	80002dc <__adddf3>
 800b110:	4622      	mov	r2, r4
 800b112:	462b      	mov	r3, r5
 800b114:	f7f5 fa98 	bl	8000648 <__aeabi_dmul>
 800b118:	a339      	add	r3, pc, #228	; (adr r3, 800b200 <__ieee754_acos+0x2a8>)
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	f7f5 f8db 	bl	80002d8 <__aeabi_dsub>
 800b122:	4622      	mov	r2, r4
 800b124:	462b      	mov	r3, r5
 800b126:	f7f5 fa8f 	bl	8000648 <__aeabi_dmul>
 800b12a:	a337      	add	r3, pc, #220	; (adr r3, 800b208 <__ieee754_acos+0x2b0>)
 800b12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b130:	f7f5 f8d4 	bl	80002dc <__adddf3>
 800b134:	4622      	mov	r2, r4
 800b136:	462b      	mov	r3, r5
 800b138:	f7f5 fa86 	bl	8000648 <__aeabi_dmul>
 800b13c:	ec45 4b10 	vmov	d0, r4, r5
 800b140:	4680      	mov	r8, r0
 800b142:	4689      	mov	r9, r1
 800b144:	f001 f866 	bl	800c214 <__ieee754_sqrt>
 800b148:	a331      	add	r3, pc, #196	; (adr r3, 800b210 <__ieee754_acos+0x2b8>)
 800b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14e:	4620      	mov	r0, r4
 800b150:	4629      	mov	r1, r5
 800b152:	ec57 6b10 	vmov	r6, r7, d0
 800b156:	f7f5 fa77 	bl	8000648 <__aeabi_dmul>
 800b15a:	a32f      	add	r3, pc, #188	; (adr r3, 800b218 <__ieee754_acos+0x2c0>)
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	f7f5 f8ba 	bl	80002d8 <__aeabi_dsub>
 800b164:	4622      	mov	r2, r4
 800b166:	462b      	mov	r3, r5
 800b168:	f7f5 fa6e 	bl	8000648 <__aeabi_dmul>
 800b16c:	a32c      	add	r3, pc, #176	; (adr r3, 800b220 <__ieee754_acos+0x2c8>)
 800b16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b172:	f7f5 f8b3 	bl	80002dc <__adddf3>
 800b176:	4622      	mov	r2, r4
 800b178:	462b      	mov	r3, r5
 800b17a:	f7f5 fa65 	bl	8000648 <__aeabi_dmul>
 800b17e:	a32a      	add	r3, pc, #168	; (adr r3, 800b228 <__ieee754_acos+0x2d0>)
 800b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b184:	f7f5 f8a8 	bl	80002d8 <__aeabi_dsub>
 800b188:	4622      	mov	r2, r4
 800b18a:	462b      	mov	r3, r5
 800b18c:	f7f5 fa5c 	bl	8000648 <__aeabi_dmul>
 800b190:	2200      	movs	r2, #0
 800b192:	4b2e      	ldr	r3, [pc, #184]	; (800b24c <__ieee754_acos+0x2f4>)
 800b194:	f7f5 f8a2 	bl	80002dc <__adddf3>
 800b198:	4602      	mov	r2, r0
 800b19a:	460b      	mov	r3, r1
 800b19c:	4640      	mov	r0, r8
 800b19e:	4649      	mov	r1, r9
 800b1a0:	f7f5 fb7c 	bl	800089c <__aeabi_ddiv>
 800b1a4:	4632      	mov	r2, r6
 800b1a6:	463b      	mov	r3, r7
 800b1a8:	f7f5 fa4e 	bl	8000648 <__aeabi_dmul>
 800b1ac:	a320      	add	r3, pc, #128	; (adr r3, 800b230 <__ieee754_acos+0x2d8>)
 800b1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b2:	f7f5 f891 	bl	80002d8 <__aeabi_dsub>
 800b1b6:	4632      	mov	r2, r6
 800b1b8:	463b      	mov	r3, r7
 800b1ba:	f7f5 f88f 	bl	80002dc <__adddf3>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	f7f5 f88b 	bl	80002dc <__adddf3>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	a103      	add	r1, pc, #12	; (adr r1, 800b1d8 <__ieee754_acos+0x280>)
 800b1cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1d0:	e76f      	b.n	800b0b2 <__ieee754_acos+0x15a>
 800b1d2:	bf00      	nop
 800b1d4:	f3af 8000 	nop.w
 800b1d8:	54442d18 	.word	0x54442d18
 800b1dc:	400921fb 	.word	0x400921fb
 800b1e0:	0dfdf709 	.word	0x0dfdf709
 800b1e4:	3f023de1 	.word	0x3f023de1
 800b1e8:	7501b288 	.word	0x7501b288
 800b1ec:	3f49efe0 	.word	0x3f49efe0
 800b1f0:	b5688f3b 	.word	0xb5688f3b
 800b1f4:	3fa48228 	.word	0x3fa48228
 800b1f8:	0e884455 	.word	0x0e884455
 800b1fc:	3fc9c155 	.word	0x3fc9c155
 800b200:	03eb6f7d 	.word	0x03eb6f7d
 800b204:	3fd4d612 	.word	0x3fd4d612
 800b208:	55555555 	.word	0x55555555
 800b20c:	3fc55555 	.word	0x3fc55555
 800b210:	b12e9282 	.word	0xb12e9282
 800b214:	3fb3b8c5 	.word	0x3fb3b8c5
 800b218:	1b8d0159 	.word	0x1b8d0159
 800b21c:	3fe6066c 	.word	0x3fe6066c
 800b220:	9c598ac8 	.word	0x9c598ac8
 800b224:	40002ae5 	.word	0x40002ae5
 800b228:	1c8a2d4b 	.word	0x1c8a2d4b
 800b22c:	40033a27 	.word	0x40033a27
 800b230:	33145c07 	.word	0x33145c07
 800b234:	3c91a626 	.word	0x3c91a626
 800b238:	54442d18 	.word	0x54442d18
 800b23c:	3ff921fb 	.word	0x3ff921fb
 800b240:	3fefffff 	.word	0x3fefffff
 800b244:	3fdfffff 	.word	0x3fdfffff
 800b248:	3c600000 	.word	0x3c600000
 800b24c:	3ff00000 	.word	0x3ff00000
 800b250:	3fe00000 	.word	0x3fe00000
 800b254:	ee10 2a10 	vmov	r2, s0
 800b258:	462b      	mov	r3, r5
 800b25a:	2000      	movs	r0, #0
 800b25c:	496a      	ldr	r1, [pc, #424]	; (800b408 <__ieee754_acos+0x4b0>)
 800b25e:	f7f5 f83b 	bl	80002d8 <__aeabi_dsub>
 800b262:	2200      	movs	r2, #0
 800b264:	4b69      	ldr	r3, [pc, #420]	; (800b40c <__ieee754_acos+0x4b4>)
 800b266:	f7f5 f9ef 	bl	8000648 <__aeabi_dmul>
 800b26a:	4604      	mov	r4, r0
 800b26c:	460d      	mov	r5, r1
 800b26e:	ec45 4b10 	vmov	d0, r4, r5
 800b272:	f000 ffcf 	bl	800c214 <__ieee754_sqrt>
 800b276:	a34e      	add	r3, pc, #312	; (adr r3, 800b3b0 <__ieee754_acos+0x458>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	4620      	mov	r0, r4
 800b27e:	4629      	mov	r1, r5
 800b280:	ec59 8b10 	vmov	r8, r9, d0
 800b284:	f7f5 f9e0 	bl	8000648 <__aeabi_dmul>
 800b288:	a34b      	add	r3, pc, #300	; (adr r3, 800b3b8 <__ieee754_acos+0x460>)
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f7f5 f825 	bl	80002dc <__adddf3>
 800b292:	4622      	mov	r2, r4
 800b294:	462b      	mov	r3, r5
 800b296:	f7f5 f9d7 	bl	8000648 <__aeabi_dmul>
 800b29a:	a349      	add	r3, pc, #292	; (adr r3, 800b3c0 <__ieee754_acos+0x468>)
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	f7f5 f81a 	bl	80002d8 <__aeabi_dsub>
 800b2a4:	4622      	mov	r2, r4
 800b2a6:	462b      	mov	r3, r5
 800b2a8:	f7f5 f9ce 	bl	8000648 <__aeabi_dmul>
 800b2ac:	a346      	add	r3, pc, #280	; (adr r3, 800b3c8 <__ieee754_acos+0x470>)
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	f7f5 f813 	bl	80002dc <__adddf3>
 800b2b6:	4622      	mov	r2, r4
 800b2b8:	462b      	mov	r3, r5
 800b2ba:	f7f5 f9c5 	bl	8000648 <__aeabi_dmul>
 800b2be:	a344      	add	r3, pc, #272	; (adr r3, 800b3d0 <__ieee754_acos+0x478>)
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	f7f5 f808 	bl	80002d8 <__aeabi_dsub>
 800b2c8:	4622      	mov	r2, r4
 800b2ca:	462b      	mov	r3, r5
 800b2cc:	f7f5 f9bc 	bl	8000648 <__aeabi_dmul>
 800b2d0:	a341      	add	r3, pc, #260	; (adr r3, 800b3d8 <__ieee754_acos+0x480>)
 800b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d6:	f7f5 f801 	bl	80002dc <__adddf3>
 800b2da:	4622      	mov	r2, r4
 800b2dc:	462b      	mov	r3, r5
 800b2de:	f7f5 f9b3 	bl	8000648 <__aeabi_dmul>
 800b2e2:	a33f      	add	r3, pc, #252	; (adr r3, 800b3e0 <__ieee754_acos+0x488>)
 800b2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e8:	4682      	mov	sl, r0
 800b2ea:	468b      	mov	fp, r1
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	f7f5 f9aa 	bl	8000648 <__aeabi_dmul>
 800b2f4:	a33c      	add	r3, pc, #240	; (adr r3, 800b3e8 <__ieee754_acos+0x490>)
 800b2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fa:	f7f4 ffed 	bl	80002d8 <__aeabi_dsub>
 800b2fe:	4622      	mov	r2, r4
 800b300:	462b      	mov	r3, r5
 800b302:	f7f5 f9a1 	bl	8000648 <__aeabi_dmul>
 800b306:	a33a      	add	r3, pc, #232	; (adr r3, 800b3f0 <__ieee754_acos+0x498>)
 800b308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30c:	f7f4 ffe6 	bl	80002dc <__adddf3>
 800b310:	4622      	mov	r2, r4
 800b312:	462b      	mov	r3, r5
 800b314:	f7f5 f998 	bl	8000648 <__aeabi_dmul>
 800b318:	a337      	add	r3, pc, #220	; (adr r3, 800b3f8 <__ieee754_acos+0x4a0>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	f7f4 ffdb 	bl	80002d8 <__aeabi_dsub>
 800b322:	4622      	mov	r2, r4
 800b324:	462b      	mov	r3, r5
 800b326:	f7f5 f98f 	bl	8000648 <__aeabi_dmul>
 800b32a:	2200      	movs	r2, #0
 800b32c:	4b36      	ldr	r3, [pc, #216]	; (800b408 <__ieee754_acos+0x4b0>)
 800b32e:	f7f4 ffd5 	bl	80002dc <__adddf3>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4650      	mov	r0, sl
 800b338:	4659      	mov	r1, fp
 800b33a:	f7f5 faaf 	bl	800089c <__aeabi_ddiv>
 800b33e:	4642      	mov	r2, r8
 800b340:	464b      	mov	r3, r9
 800b342:	f7f5 f981 	bl	8000648 <__aeabi_dmul>
 800b346:	2600      	movs	r6, #0
 800b348:	4682      	mov	sl, r0
 800b34a:	468b      	mov	fp, r1
 800b34c:	4632      	mov	r2, r6
 800b34e:	464b      	mov	r3, r9
 800b350:	4630      	mov	r0, r6
 800b352:	4649      	mov	r1, r9
 800b354:	f7f5 f978 	bl	8000648 <__aeabi_dmul>
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	4620      	mov	r0, r4
 800b35e:	4629      	mov	r1, r5
 800b360:	f7f4 ffba 	bl	80002d8 <__aeabi_dsub>
 800b364:	4632      	mov	r2, r6
 800b366:	4604      	mov	r4, r0
 800b368:	460d      	mov	r5, r1
 800b36a:	464b      	mov	r3, r9
 800b36c:	4640      	mov	r0, r8
 800b36e:	4649      	mov	r1, r9
 800b370:	f7f4 ffb4 	bl	80002dc <__adddf3>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	4620      	mov	r0, r4
 800b37a:	4629      	mov	r1, r5
 800b37c:	f7f5 fa8e 	bl	800089c <__aeabi_ddiv>
 800b380:	4602      	mov	r2, r0
 800b382:	460b      	mov	r3, r1
 800b384:	4650      	mov	r0, sl
 800b386:	4659      	mov	r1, fp
 800b388:	f7f4 ffa8 	bl	80002dc <__adddf3>
 800b38c:	4632      	mov	r2, r6
 800b38e:	464b      	mov	r3, r9
 800b390:	f7f4 ffa4 	bl	80002dc <__adddf3>
 800b394:	4602      	mov	r2, r0
 800b396:	460b      	mov	r3, r1
 800b398:	f7f4 ffa0 	bl	80002dc <__adddf3>
 800b39c:	e5f1      	b.n	800af82 <__ieee754_acos+0x2a>
 800b39e:	2000      	movs	r0, #0
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	e5ee      	b.n	800af82 <__ieee754_acos+0x2a>
 800b3a4:	a116      	add	r1, pc, #88	; (adr r1, 800b400 <__ieee754_acos+0x4a8>)
 800b3a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3aa:	e5ea      	b.n	800af82 <__ieee754_acos+0x2a>
 800b3ac:	f3af 8000 	nop.w
 800b3b0:	0dfdf709 	.word	0x0dfdf709
 800b3b4:	3f023de1 	.word	0x3f023de1
 800b3b8:	7501b288 	.word	0x7501b288
 800b3bc:	3f49efe0 	.word	0x3f49efe0
 800b3c0:	b5688f3b 	.word	0xb5688f3b
 800b3c4:	3fa48228 	.word	0x3fa48228
 800b3c8:	0e884455 	.word	0x0e884455
 800b3cc:	3fc9c155 	.word	0x3fc9c155
 800b3d0:	03eb6f7d 	.word	0x03eb6f7d
 800b3d4:	3fd4d612 	.word	0x3fd4d612
 800b3d8:	55555555 	.word	0x55555555
 800b3dc:	3fc55555 	.word	0x3fc55555
 800b3e0:	b12e9282 	.word	0xb12e9282
 800b3e4:	3fb3b8c5 	.word	0x3fb3b8c5
 800b3e8:	1b8d0159 	.word	0x1b8d0159
 800b3ec:	3fe6066c 	.word	0x3fe6066c
 800b3f0:	9c598ac8 	.word	0x9c598ac8
 800b3f4:	40002ae5 	.word	0x40002ae5
 800b3f8:	1c8a2d4b 	.word	0x1c8a2d4b
 800b3fc:	40033a27 	.word	0x40033a27
 800b400:	54442d18 	.word	0x54442d18
 800b404:	3ff921fb 	.word	0x3ff921fb
 800b408:	3ff00000 	.word	0x3ff00000
 800b40c:	3fe00000 	.word	0x3fe00000

0800b410 <__ieee754_pow>:
 800b410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b414:	b091      	sub	sp, #68	; 0x44
 800b416:	ed8d 1b00 	vstr	d1, [sp]
 800b41a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b41e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b422:	ea58 0302 	orrs.w	r3, r8, r2
 800b426:	ec57 6b10 	vmov	r6, r7, d0
 800b42a:	f000 84be 	beq.w	800bdaa <__ieee754_pow+0x99a>
 800b42e:	4b7a      	ldr	r3, [pc, #488]	; (800b618 <__ieee754_pow+0x208>)
 800b430:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b434:	429c      	cmp	r4, r3
 800b436:	463d      	mov	r5, r7
 800b438:	ee10 aa10 	vmov	sl, s0
 800b43c:	dc09      	bgt.n	800b452 <__ieee754_pow+0x42>
 800b43e:	d103      	bne.n	800b448 <__ieee754_pow+0x38>
 800b440:	b93e      	cbnz	r6, 800b452 <__ieee754_pow+0x42>
 800b442:	45a0      	cmp	r8, r4
 800b444:	dc0d      	bgt.n	800b462 <__ieee754_pow+0x52>
 800b446:	e001      	b.n	800b44c <__ieee754_pow+0x3c>
 800b448:	4598      	cmp	r8, r3
 800b44a:	dc02      	bgt.n	800b452 <__ieee754_pow+0x42>
 800b44c:	4598      	cmp	r8, r3
 800b44e:	d10e      	bne.n	800b46e <__ieee754_pow+0x5e>
 800b450:	b16a      	cbz	r2, 800b46e <__ieee754_pow+0x5e>
 800b452:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b456:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b45a:	ea54 030a 	orrs.w	r3, r4, sl
 800b45e:	f000 84a4 	beq.w	800bdaa <__ieee754_pow+0x99a>
 800b462:	486e      	ldr	r0, [pc, #440]	; (800b61c <__ieee754_pow+0x20c>)
 800b464:	b011      	add	sp, #68	; 0x44
 800b466:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46a:	f001 bce1 	b.w	800ce30 <nan>
 800b46e:	2d00      	cmp	r5, #0
 800b470:	da53      	bge.n	800b51a <__ieee754_pow+0x10a>
 800b472:	4b6b      	ldr	r3, [pc, #428]	; (800b620 <__ieee754_pow+0x210>)
 800b474:	4598      	cmp	r8, r3
 800b476:	dc4d      	bgt.n	800b514 <__ieee754_pow+0x104>
 800b478:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b47c:	4598      	cmp	r8, r3
 800b47e:	dd4c      	ble.n	800b51a <__ieee754_pow+0x10a>
 800b480:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b484:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b488:	2b14      	cmp	r3, #20
 800b48a:	dd26      	ble.n	800b4da <__ieee754_pow+0xca>
 800b48c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b490:	fa22 f103 	lsr.w	r1, r2, r3
 800b494:	fa01 f303 	lsl.w	r3, r1, r3
 800b498:	4293      	cmp	r3, r2
 800b49a:	d13e      	bne.n	800b51a <__ieee754_pow+0x10a>
 800b49c:	f001 0101 	and.w	r1, r1, #1
 800b4a0:	f1c1 0b02 	rsb	fp, r1, #2
 800b4a4:	2a00      	cmp	r2, #0
 800b4a6:	d15b      	bne.n	800b560 <__ieee754_pow+0x150>
 800b4a8:	4b5b      	ldr	r3, [pc, #364]	; (800b618 <__ieee754_pow+0x208>)
 800b4aa:	4598      	cmp	r8, r3
 800b4ac:	d124      	bne.n	800b4f8 <__ieee754_pow+0xe8>
 800b4ae:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b4b2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b4b6:	ea53 030a 	orrs.w	r3, r3, sl
 800b4ba:	f000 8476 	beq.w	800bdaa <__ieee754_pow+0x99a>
 800b4be:	4b59      	ldr	r3, [pc, #356]	; (800b624 <__ieee754_pow+0x214>)
 800b4c0:	429c      	cmp	r4, r3
 800b4c2:	dd2d      	ble.n	800b520 <__ieee754_pow+0x110>
 800b4c4:	f1b9 0f00 	cmp.w	r9, #0
 800b4c8:	f280 8473 	bge.w	800bdb2 <__ieee754_pow+0x9a2>
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	ec41 0b10 	vmov	d0, r0, r1
 800b4d4:	b011      	add	sp, #68	; 0x44
 800b4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4da:	2a00      	cmp	r2, #0
 800b4dc:	d13e      	bne.n	800b55c <__ieee754_pow+0x14c>
 800b4de:	f1c3 0314 	rsb	r3, r3, #20
 800b4e2:	fa48 f103 	asr.w	r1, r8, r3
 800b4e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b4ea:	4543      	cmp	r3, r8
 800b4ec:	f040 8469 	bne.w	800bdc2 <__ieee754_pow+0x9b2>
 800b4f0:	f001 0101 	and.w	r1, r1, #1
 800b4f4:	f1c1 0b02 	rsb	fp, r1, #2
 800b4f8:	4b4b      	ldr	r3, [pc, #300]	; (800b628 <__ieee754_pow+0x218>)
 800b4fa:	4598      	cmp	r8, r3
 800b4fc:	d118      	bne.n	800b530 <__ieee754_pow+0x120>
 800b4fe:	f1b9 0f00 	cmp.w	r9, #0
 800b502:	f280 845a 	bge.w	800bdba <__ieee754_pow+0x9aa>
 800b506:	4948      	ldr	r1, [pc, #288]	; (800b628 <__ieee754_pow+0x218>)
 800b508:	4632      	mov	r2, r6
 800b50a:	463b      	mov	r3, r7
 800b50c:	2000      	movs	r0, #0
 800b50e:	f7f5 f9c5 	bl	800089c <__aeabi_ddiv>
 800b512:	e7dd      	b.n	800b4d0 <__ieee754_pow+0xc0>
 800b514:	f04f 0b02 	mov.w	fp, #2
 800b518:	e7c4      	b.n	800b4a4 <__ieee754_pow+0x94>
 800b51a:	f04f 0b00 	mov.w	fp, #0
 800b51e:	e7c1      	b.n	800b4a4 <__ieee754_pow+0x94>
 800b520:	f1b9 0f00 	cmp.w	r9, #0
 800b524:	dad2      	bge.n	800b4cc <__ieee754_pow+0xbc>
 800b526:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b52a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b52e:	e7cf      	b.n	800b4d0 <__ieee754_pow+0xc0>
 800b530:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b534:	d106      	bne.n	800b544 <__ieee754_pow+0x134>
 800b536:	4632      	mov	r2, r6
 800b538:	463b      	mov	r3, r7
 800b53a:	4610      	mov	r0, r2
 800b53c:	4619      	mov	r1, r3
 800b53e:	f7f5 f883 	bl	8000648 <__aeabi_dmul>
 800b542:	e7c5      	b.n	800b4d0 <__ieee754_pow+0xc0>
 800b544:	4b39      	ldr	r3, [pc, #228]	; (800b62c <__ieee754_pow+0x21c>)
 800b546:	4599      	cmp	r9, r3
 800b548:	d10a      	bne.n	800b560 <__ieee754_pow+0x150>
 800b54a:	2d00      	cmp	r5, #0
 800b54c:	db08      	blt.n	800b560 <__ieee754_pow+0x150>
 800b54e:	ec47 6b10 	vmov	d0, r6, r7
 800b552:	b011      	add	sp, #68	; 0x44
 800b554:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b558:	f000 be5c 	b.w	800c214 <__ieee754_sqrt>
 800b55c:	f04f 0b00 	mov.w	fp, #0
 800b560:	ec47 6b10 	vmov	d0, r6, r7
 800b564:	f001 fbca 	bl	800ccfc <fabs>
 800b568:	ec51 0b10 	vmov	r0, r1, d0
 800b56c:	f1ba 0f00 	cmp.w	sl, #0
 800b570:	d127      	bne.n	800b5c2 <__ieee754_pow+0x1b2>
 800b572:	b124      	cbz	r4, 800b57e <__ieee754_pow+0x16e>
 800b574:	4b2c      	ldr	r3, [pc, #176]	; (800b628 <__ieee754_pow+0x218>)
 800b576:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d121      	bne.n	800b5c2 <__ieee754_pow+0x1b2>
 800b57e:	f1b9 0f00 	cmp.w	r9, #0
 800b582:	da05      	bge.n	800b590 <__ieee754_pow+0x180>
 800b584:	4602      	mov	r2, r0
 800b586:	460b      	mov	r3, r1
 800b588:	2000      	movs	r0, #0
 800b58a:	4927      	ldr	r1, [pc, #156]	; (800b628 <__ieee754_pow+0x218>)
 800b58c:	f7f5 f986 	bl	800089c <__aeabi_ddiv>
 800b590:	2d00      	cmp	r5, #0
 800b592:	da9d      	bge.n	800b4d0 <__ieee754_pow+0xc0>
 800b594:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b598:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b59c:	ea54 030b 	orrs.w	r3, r4, fp
 800b5a0:	d108      	bne.n	800b5b4 <__ieee754_pow+0x1a4>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	4610      	mov	r0, r2
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	f7f4 fe95 	bl	80002d8 <__aeabi_dsub>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	e7ac      	b.n	800b50e <__ieee754_pow+0xfe>
 800b5b4:	f1bb 0f01 	cmp.w	fp, #1
 800b5b8:	d18a      	bne.n	800b4d0 <__ieee754_pow+0xc0>
 800b5ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5be:	4619      	mov	r1, r3
 800b5c0:	e786      	b.n	800b4d0 <__ieee754_pow+0xc0>
 800b5c2:	0fed      	lsrs	r5, r5, #31
 800b5c4:	1e6b      	subs	r3, r5, #1
 800b5c6:	930d      	str	r3, [sp, #52]	; 0x34
 800b5c8:	ea5b 0303 	orrs.w	r3, fp, r3
 800b5cc:	d102      	bne.n	800b5d4 <__ieee754_pow+0x1c4>
 800b5ce:	4632      	mov	r2, r6
 800b5d0:	463b      	mov	r3, r7
 800b5d2:	e7e8      	b.n	800b5a6 <__ieee754_pow+0x196>
 800b5d4:	4b16      	ldr	r3, [pc, #88]	; (800b630 <__ieee754_pow+0x220>)
 800b5d6:	4598      	cmp	r8, r3
 800b5d8:	f340 80fe 	ble.w	800b7d8 <__ieee754_pow+0x3c8>
 800b5dc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b5e0:	4598      	cmp	r8, r3
 800b5e2:	dd0a      	ble.n	800b5fa <__ieee754_pow+0x1ea>
 800b5e4:	4b0f      	ldr	r3, [pc, #60]	; (800b624 <__ieee754_pow+0x214>)
 800b5e6:	429c      	cmp	r4, r3
 800b5e8:	dc0d      	bgt.n	800b606 <__ieee754_pow+0x1f6>
 800b5ea:	f1b9 0f00 	cmp.w	r9, #0
 800b5ee:	f6bf af6d 	bge.w	800b4cc <__ieee754_pow+0xbc>
 800b5f2:	a307      	add	r3, pc, #28	; (adr r3, 800b610 <__ieee754_pow+0x200>)
 800b5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f8:	e79f      	b.n	800b53a <__ieee754_pow+0x12a>
 800b5fa:	4b0e      	ldr	r3, [pc, #56]	; (800b634 <__ieee754_pow+0x224>)
 800b5fc:	429c      	cmp	r4, r3
 800b5fe:	ddf4      	ble.n	800b5ea <__ieee754_pow+0x1da>
 800b600:	4b09      	ldr	r3, [pc, #36]	; (800b628 <__ieee754_pow+0x218>)
 800b602:	429c      	cmp	r4, r3
 800b604:	dd18      	ble.n	800b638 <__ieee754_pow+0x228>
 800b606:	f1b9 0f00 	cmp.w	r9, #0
 800b60a:	dcf2      	bgt.n	800b5f2 <__ieee754_pow+0x1e2>
 800b60c:	e75e      	b.n	800b4cc <__ieee754_pow+0xbc>
 800b60e:	bf00      	nop
 800b610:	8800759c 	.word	0x8800759c
 800b614:	7e37e43c 	.word	0x7e37e43c
 800b618:	7ff00000 	.word	0x7ff00000
 800b61c:	0800d391 	.word	0x0800d391
 800b620:	433fffff 	.word	0x433fffff
 800b624:	3fefffff 	.word	0x3fefffff
 800b628:	3ff00000 	.word	0x3ff00000
 800b62c:	3fe00000 	.word	0x3fe00000
 800b630:	41e00000 	.word	0x41e00000
 800b634:	3feffffe 	.word	0x3feffffe
 800b638:	2200      	movs	r2, #0
 800b63a:	4b63      	ldr	r3, [pc, #396]	; (800b7c8 <__ieee754_pow+0x3b8>)
 800b63c:	f7f4 fe4c 	bl	80002d8 <__aeabi_dsub>
 800b640:	a355      	add	r3, pc, #340	; (adr r3, 800b798 <__ieee754_pow+0x388>)
 800b642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b646:	4604      	mov	r4, r0
 800b648:	460d      	mov	r5, r1
 800b64a:	f7f4 fffd 	bl	8000648 <__aeabi_dmul>
 800b64e:	a354      	add	r3, pc, #336	; (adr r3, 800b7a0 <__ieee754_pow+0x390>)
 800b650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b654:	4606      	mov	r6, r0
 800b656:	460f      	mov	r7, r1
 800b658:	4620      	mov	r0, r4
 800b65a:	4629      	mov	r1, r5
 800b65c:	f7f4 fff4 	bl	8000648 <__aeabi_dmul>
 800b660:	2200      	movs	r2, #0
 800b662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b666:	4b59      	ldr	r3, [pc, #356]	; (800b7cc <__ieee754_pow+0x3bc>)
 800b668:	4620      	mov	r0, r4
 800b66a:	4629      	mov	r1, r5
 800b66c:	f7f4 ffec 	bl	8000648 <__aeabi_dmul>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	a14c      	add	r1, pc, #304	; (adr r1, 800b7a8 <__ieee754_pow+0x398>)
 800b676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b67a:	f7f4 fe2d 	bl	80002d8 <__aeabi_dsub>
 800b67e:	4622      	mov	r2, r4
 800b680:	462b      	mov	r3, r5
 800b682:	f7f4 ffe1 	bl	8000648 <__aeabi_dmul>
 800b686:	4602      	mov	r2, r0
 800b688:	460b      	mov	r3, r1
 800b68a:	2000      	movs	r0, #0
 800b68c:	4950      	ldr	r1, [pc, #320]	; (800b7d0 <__ieee754_pow+0x3c0>)
 800b68e:	f7f4 fe23 	bl	80002d8 <__aeabi_dsub>
 800b692:	4622      	mov	r2, r4
 800b694:	462b      	mov	r3, r5
 800b696:	4680      	mov	r8, r0
 800b698:	4689      	mov	r9, r1
 800b69a:	4620      	mov	r0, r4
 800b69c:	4629      	mov	r1, r5
 800b69e:	f7f4 ffd3 	bl	8000648 <__aeabi_dmul>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	4640      	mov	r0, r8
 800b6a8:	4649      	mov	r1, r9
 800b6aa:	f7f4 ffcd 	bl	8000648 <__aeabi_dmul>
 800b6ae:	a340      	add	r3, pc, #256	; (adr r3, 800b7b0 <__ieee754_pow+0x3a0>)
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	f7f4 ffc8 	bl	8000648 <__aeabi_dmul>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6c0:	f7f4 fe0a 	bl	80002d8 <__aeabi_dsub>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4604      	mov	r4, r0
 800b6ca:	460d      	mov	r5, r1
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	4639      	mov	r1, r7
 800b6d0:	f7f4 fe04 	bl	80002dc <__adddf3>
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6da:	4632      	mov	r2, r6
 800b6dc:	463b      	mov	r3, r7
 800b6de:	f7f4 fdfb 	bl	80002d8 <__aeabi_dsub>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	f7f4 fdf5 	bl	80002d8 <__aeabi_dsub>
 800b6ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6f0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	460f      	mov	r7, r1
 800b6fa:	f040 81eb 	bne.w	800bad4 <__ieee754_pow+0x6c4>
 800b6fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b7b8 <__ieee754_pow+0x3a8>
 800b702:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b706:	2400      	movs	r4, #0
 800b708:	4622      	mov	r2, r4
 800b70a:	462b      	mov	r3, r5
 800b70c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b710:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b714:	f7f4 fde0 	bl	80002d8 <__aeabi_dsub>
 800b718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b71c:	f7f4 ff94 	bl	8000648 <__aeabi_dmul>
 800b720:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b724:	4680      	mov	r8, r0
 800b726:	4689      	mov	r9, r1
 800b728:	4630      	mov	r0, r6
 800b72a:	4639      	mov	r1, r7
 800b72c:	f7f4 ff8c 	bl	8000648 <__aeabi_dmul>
 800b730:	4602      	mov	r2, r0
 800b732:	460b      	mov	r3, r1
 800b734:	4640      	mov	r0, r8
 800b736:	4649      	mov	r1, r9
 800b738:	f7f4 fdd0 	bl	80002dc <__adddf3>
 800b73c:	4622      	mov	r2, r4
 800b73e:	462b      	mov	r3, r5
 800b740:	4680      	mov	r8, r0
 800b742:	4689      	mov	r9, r1
 800b744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b748:	f7f4 ff7e 	bl	8000648 <__aeabi_dmul>
 800b74c:	460b      	mov	r3, r1
 800b74e:	4604      	mov	r4, r0
 800b750:	460d      	mov	r5, r1
 800b752:	4602      	mov	r2, r0
 800b754:	4649      	mov	r1, r9
 800b756:	4640      	mov	r0, r8
 800b758:	e9cd 4500 	strd	r4, r5, [sp]
 800b75c:	f7f4 fdbe 	bl	80002dc <__adddf3>
 800b760:	4b1c      	ldr	r3, [pc, #112]	; (800b7d4 <__ieee754_pow+0x3c4>)
 800b762:	4299      	cmp	r1, r3
 800b764:	4606      	mov	r6, r0
 800b766:	460f      	mov	r7, r1
 800b768:	468b      	mov	fp, r1
 800b76a:	f340 82f7 	ble.w	800bd5c <__ieee754_pow+0x94c>
 800b76e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b772:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b776:	4303      	orrs	r3, r0
 800b778:	f000 81ea 	beq.w	800bb50 <__ieee754_pow+0x740>
 800b77c:	a310      	add	r3, pc, #64	; (adr r3, 800b7c0 <__ieee754_pow+0x3b0>)
 800b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b786:	f7f4 ff5f 	bl	8000648 <__aeabi_dmul>
 800b78a:	a30d      	add	r3, pc, #52	; (adr r3, 800b7c0 <__ieee754_pow+0x3b0>)
 800b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b790:	e6d5      	b.n	800b53e <__ieee754_pow+0x12e>
 800b792:	bf00      	nop
 800b794:	f3af 8000 	nop.w
 800b798:	60000000 	.word	0x60000000
 800b79c:	3ff71547 	.word	0x3ff71547
 800b7a0:	f85ddf44 	.word	0xf85ddf44
 800b7a4:	3e54ae0b 	.word	0x3e54ae0b
 800b7a8:	55555555 	.word	0x55555555
 800b7ac:	3fd55555 	.word	0x3fd55555
 800b7b0:	652b82fe 	.word	0x652b82fe
 800b7b4:	3ff71547 	.word	0x3ff71547
 800b7b8:	00000000 	.word	0x00000000
 800b7bc:	bff00000 	.word	0xbff00000
 800b7c0:	8800759c 	.word	0x8800759c
 800b7c4:	7e37e43c 	.word	0x7e37e43c
 800b7c8:	3ff00000 	.word	0x3ff00000
 800b7cc:	3fd00000 	.word	0x3fd00000
 800b7d0:	3fe00000 	.word	0x3fe00000
 800b7d4:	408fffff 	.word	0x408fffff
 800b7d8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b7dc:	f04f 0200 	mov.w	r2, #0
 800b7e0:	da05      	bge.n	800b7ee <__ieee754_pow+0x3de>
 800b7e2:	4bd3      	ldr	r3, [pc, #844]	; (800bb30 <__ieee754_pow+0x720>)
 800b7e4:	f7f4 ff30 	bl	8000648 <__aeabi_dmul>
 800b7e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b7ec:	460c      	mov	r4, r1
 800b7ee:	1523      	asrs	r3, r4, #20
 800b7f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b7f4:	4413      	add	r3, r2
 800b7f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f8:	4bce      	ldr	r3, [pc, #824]	; (800bb34 <__ieee754_pow+0x724>)
 800b7fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b7fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b802:	429c      	cmp	r4, r3
 800b804:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b808:	dd08      	ble.n	800b81c <__ieee754_pow+0x40c>
 800b80a:	4bcb      	ldr	r3, [pc, #812]	; (800bb38 <__ieee754_pow+0x728>)
 800b80c:	429c      	cmp	r4, r3
 800b80e:	f340 815e 	ble.w	800bace <__ieee754_pow+0x6be>
 800b812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b814:	3301      	adds	r3, #1
 800b816:	9309      	str	r3, [sp, #36]	; 0x24
 800b818:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b81c:	f04f 0a00 	mov.w	sl, #0
 800b820:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b824:	930c      	str	r3, [sp, #48]	; 0x30
 800b826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b828:	4bc4      	ldr	r3, [pc, #784]	; (800bb3c <__ieee754_pow+0x72c>)
 800b82a:	4413      	add	r3, r2
 800b82c:	ed93 7b00 	vldr	d7, [r3]
 800b830:	4629      	mov	r1, r5
 800b832:	ec53 2b17 	vmov	r2, r3, d7
 800b836:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b83a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b83e:	f7f4 fd4b 	bl	80002d8 <__aeabi_dsub>
 800b842:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b846:	4606      	mov	r6, r0
 800b848:	460f      	mov	r7, r1
 800b84a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b84e:	f7f4 fd45 	bl	80002dc <__adddf3>
 800b852:	4602      	mov	r2, r0
 800b854:	460b      	mov	r3, r1
 800b856:	2000      	movs	r0, #0
 800b858:	49b9      	ldr	r1, [pc, #740]	; (800bb40 <__ieee754_pow+0x730>)
 800b85a:	f7f5 f81f 	bl	800089c <__aeabi_ddiv>
 800b85e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	4630      	mov	r0, r6
 800b868:	4639      	mov	r1, r7
 800b86a:	f7f4 feed 	bl	8000648 <__aeabi_dmul>
 800b86e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b872:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b876:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b87a:	2300      	movs	r3, #0
 800b87c:	9302      	str	r3, [sp, #8]
 800b87e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b882:	106d      	asrs	r5, r5, #1
 800b884:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b888:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b88c:	2200      	movs	r2, #0
 800b88e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b892:	4640      	mov	r0, r8
 800b894:	4649      	mov	r1, r9
 800b896:	4614      	mov	r4, r2
 800b898:	461d      	mov	r5, r3
 800b89a:	f7f4 fed5 	bl	8000648 <__aeabi_dmul>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	4639      	mov	r1, r7
 800b8a6:	f7f4 fd17 	bl	80002d8 <__aeabi_dsub>
 800b8aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8ae:	4606      	mov	r6, r0
 800b8b0:	460f      	mov	r7, r1
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	f7f4 fd0f 	bl	80002d8 <__aeabi_dsub>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	460b      	mov	r3, r1
 800b8be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b8c2:	f7f4 fd09 	bl	80002d8 <__aeabi_dsub>
 800b8c6:	4642      	mov	r2, r8
 800b8c8:	464b      	mov	r3, r9
 800b8ca:	f7f4 febd 	bl	8000648 <__aeabi_dmul>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	4639      	mov	r1, r7
 800b8d6:	f7f4 fcff 	bl	80002d8 <__aeabi_dsub>
 800b8da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b8de:	f7f4 feb3 	bl	8000648 <__aeabi_dmul>
 800b8e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b8ea:	4610      	mov	r0, r2
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	f7f4 feab 	bl	8000648 <__aeabi_dmul>
 800b8f2:	a37b      	add	r3, pc, #492	; (adr r3, 800bae0 <__ieee754_pow+0x6d0>)
 800b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	460d      	mov	r5, r1
 800b8fc:	f7f4 fea4 	bl	8000648 <__aeabi_dmul>
 800b900:	a379      	add	r3, pc, #484	; (adr r3, 800bae8 <__ieee754_pow+0x6d8>)
 800b902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b906:	f7f4 fce9 	bl	80002dc <__adddf3>
 800b90a:	4622      	mov	r2, r4
 800b90c:	462b      	mov	r3, r5
 800b90e:	f7f4 fe9b 	bl	8000648 <__aeabi_dmul>
 800b912:	a377      	add	r3, pc, #476	; (adr r3, 800baf0 <__ieee754_pow+0x6e0>)
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	f7f4 fce0 	bl	80002dc <__adddf3>
 800b91c:	4622      	mov	r2, r4
 800b91e:	462b      	mov	r3, r5
 800b920:	f7f4 fe92 	bl	8000648 <__aeabi_dmul>
 800b924:	a374      	add	r3, pc, #464	; (adr r3, 800baf8 <__ieee754_pow+0x6e8>)
 800b926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92a:	f7f4 fcd7 	bl	80002dc <__adddf3>
 800b92e:	4622      	mov	r2, r4
 800b930:	462b      	mov	r3, r5
 800b932:	f7f4 fe89 	bl	8000648 <__aeabi_dmul>
 800b936:	a372      	add	r3, pc, #456	; (adr r3, 800bb00 <__ieee754_pow+0x6f0>)
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	f7f4 fcce 	bl	80002dc <__adddf3>
 800b940:	4622      	mov	r2, r4
 800b942:	462b      	mov	r3, r5
 800b944:	f7f4 fe80 	bl	8000648 <__aeabi_dmul>
 800b948:	a36f      	add	r3, pc, #444	; (adr r3, 800bb08 <__ieee754_pow+0x6f8>)
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	f7f4 fcc5 	bl	80002dc <__adddf3>
 800b952:	4622      	mov	r2, r4
 800b954:	4606      	mov	r6, r0
 800b956:	460f      	mov	r7, r1
 800b958:	462b      	mov	r3, r5
 800b95a:	4620      	mov	r0, r4
 800b95c:	4629      	mov	r1, r5
 800b95e:	f7f4 fe73 	bl	8000648 <__aeabi_dmul>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	4630      	mov	r0, r6
 800b968:	4639      	mov	r1, r7
 800b96a:	f7f4 fe6d 	bl	8000648 <__aeabi_dmul>
 800b96e:	4642      	mov	r2, r8
 800b970:	4604      	mov	r4, r0
 800b972:	460d      	mov	r5, r1
 800b974:	464b      	mov	r3, r9
 800b976:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b97a:	f7f4 fcaf 	bl	80002dc <__adddf3>
 800b97e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b982:	f7f4 fe61 	bl	8000648 <__aeabi_dmul>
 800b986:	4622      	mov	r2, r4
 800b988:	462b      	mov	r3, r5
 800b98a:	f7f4 fca7 	bl	80002dc <__adddf3>
 800b98e:	4642      	mov	r2, r8
 800b990:	4606      	mov	r6, r0
 800b992:	460f      	mov	r7, r1
 800b994:	464b      	mov	r3, r9
 800b996:	4640      	mov	r0, r8
 800b998:	4649      	mov	r1, r9
 800b99a:	f7f4 fe55 	bl	8000648 <__aeabi_dmul>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	4b68      	ldr	r3, [pc, #416]	; (800bb44 <__ieee754_pow+0x734>)
 800b9a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b9a6:	f7f4 fc99 	bl	80002dc <__adddf3>
 800b9aa:	4632      	mov	r2, r6
 800b9ac:	463b      	mov	r3, r7
 800b9ae:	f7f4 fc95 	bl	80002dc <__adddf3>
 800b9b2:	9802      	ldr	r0, [sp, #8]
 800b9b4:	460d      	mov	r5, r1
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	4640      	mov	r0, r8
 800b9be:	4649      	mov	r1, r9
 800b9c0:	f7f4 fe42 	bl	8000648 <__aeabi_dmul>
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	4680      	mov	r8, r0
 800b9c8:	4689      	mov	r9, r1
 800b9ca:	4b5e      	ldr	r3, [pc, #376]	; (800bb44 <__ieee754_pow+0x734>)
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	f7f4 fc82 	bl	80002d8 <__aeabi_dsub>
 800b9d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b9d8:	f7f4 fc7e 	bl	80002d8 <__aeabi_dsub>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	4639      	mov	r1, r7
 800b9e4:	f7f4 fc78 	bl	80002d8 <__aeabi_dsub>
 800b9e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9ec:	f7f4 fe2c 	bl	8000648 <__aeabi_dmul>
 800b9f0:	4622      	mov	r2, r4
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	460f      	mov	r7, r1
 800b9f6:	462b      	mov	r3, r5
 800b9f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9fc:	f7f4 fe24 	bl	8000648 <__aeabi_dmul>
 800ba00:	4602      	mov	r2, r0
 800ba02:	460b      	mov	r3, r1
 800ba04:	4630      	mov	r0, r6
 800ba06:	4639      	mov	r1, r7
 800ba08:	f7f4 fc68 	bl	80002dc <__adddf3>
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	460f      	mov	r7, r1
 800ba10:	4602      	mov	r2, r0
 800ba12:	460b      	mov	r3, r1
 800ba14:	4640      	mov	r0, r8
 800ba16:	4649      	mov	r1, r9
 800ba18:	f7f4 fc60 	bl	80002dc <__adddf3>
 800ba1c:	9802      	ldr	r0, [sp, #8]
 800ba1e:	a33c      	add	r3, pc, #240	; (adr r3, 800bb10 <__ieee754_pow+0x700>)
 800ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba24:	4604      	mov	r4, r0
 800ba26:	460d      	mov	r5, r1
 800ba28:	f7f4 fe0e 	bl	8000648 <__aeabi_dmul>
 800ba2c:	4642      	mov	r2, r8
 800ba2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ba32:	464b      	mov	r3, r9
 800ba34:	4620      	mov	r0, r4
 800ba36:	4629      	mov	r1, r5
 800ba38:	f7f4 fc4e 	bl	80002d8 <__aeabi_dsub>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	460b      	mov	r3, r1
 800ba40:	4630      	mov	r0, r6
 800ba42:	4639      	mov	r1, r7
 800ba44:	f7f4 fc48 	bl	80002d8 <__aeabi_dsub>
 800ba48:	a333      	add	r3, pc, #204	; (adr r3, 800bb18 <__ieee754_pow+0x708>)
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	f7f4 fdfb 	bl	8000648 <__aeabi_dmul>
 800ba52:	a333      	add	r3, pc, #204	; (adr r3, 800bb20 <__ieee754_pow+0x710>)
 800ba54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba58:	4606      	mov	r6, r0
 800ba5a:	460f      	mov	r7, r1
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	4629      	mov	r1, r5
 800ba60:	f7f4 fdf2 	bl	8000648 <__aeabi_dmul>
 800ba64:	4602      	mov	r2, r0
 800ba66:	460b      	mov	r3, r1
 800ba68:	4630      	mov	r0, r6
 800ba6a:	4639      	mov	r1, r7
 800ba6c:	f7f4 fc36 	bl	80002dc <__adddf3>
 800ba70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba72:	4b35      	ldr	r3, [pc, #212]	; (800bb48 <__ieee754_pow+0x738>)
 800ba74:	4413      	add	r3, r2
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	f7f4 fc2f 	bl	80002dc <__adddf3>
 800ba7e:	4604      	mov	r4, r0
 800ba80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba82:	460d      	mov	r5, r1
 800ba84:	f7f4 fd76 	bl	8000574 <__aeabi_i2d>
 800ba88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba8a:	4b30      	ldr	r3, [pc, #192]	; (800bb4c <__ieee754_pow+0x73c>)
 800ba8c:	4413      	add	r3, r2
 800ba8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba92:	4606      	mov	r6, r0
 800ba94:	460f      	mov	r7, r1
 800ba96:	4622      	mov	r2, r4
 800ba98:	462b      	mov	r3, r5
 800ba9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba9e:	f7f4 fc1d 	bl	80002dc <__adddf3>
 800baa2:	4642      	mov	r2, r8
 800baa4:	464b      	mov	r3, r9
 800baa6:	f7f4 fc19 	bl	80002dc <__adddf3>
 800baaa:	4632      	mov	r2, r6
 800baac:	463b      	mov	r3, r7
 800baae:	f7f4 fc15 	bl	80002dc <__adddf3>
 800bab2:	9802      	ldr	r0, [sp, #8]
 800bab4:	4632      	mov	r2, r6
 800bab6:	463b      	mov	r3, r7
 800bab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800babc:	f7f4 fc0c 	bl	80002d8 <__aeabi_dsub>
 800bac0:	4642      	mov	r2, r8
 800bac2:	464b      	mov	r3, r9
 800bac4:	f7f4 fc08 	bl	80002d8 <__aeabi_dsub>
 800bac8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bacc:	e607      	b.n	800b6de <__ieee754_pow+0x2ce>
 800bace:	f04f 0a01 	mov.w	sl, #1
 800bad2:	e6a5      	b.n	800b820 <__ieee754_pow+0x410>
 800bad4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800bb28 <__ieee754_pow+0x718>
 800bad8:	e613      	b.n	800b702 <__ieee754_pow+0x2f2>
 800bada:	bf00      	nop
 800badc:	f3af 8000 	nop.w
 800bae0:	4a454eef 	.word	0x4a454eef
 800bae4:	3fca7e28 	.word	0x3fca7e28
 800bae8:	93c9db65 	.word	0x93c9db65
 800baec:	3fcd864a 	.word	0x3fcd864a
 800baf0:	a91d4101 	.word	0xa91d4101
 800baf4:	3fd17460 	.word	0x3fd17460
 800baf8:	518f264d 	.word	0x518f264d
 800bafc:	3fd55555 	.word	0x3fd55555
 800bb00:	db6fabff 	.word	0xdb6fabff
 800bb04:	3fdb6db6 	.word	0x3fdb6db6
 800bb08:	33333303 	.word	0x33333303
 800bb0c:	3fe33333 	.word	0x3fe33333
 800bb10:	e0000000 	.word	0xe0000000
 800bb14:	3feec709 	.word	0x3feec709
 800bb18:	dc3a03fd 	.word	0xdc3a03fd
 800bb1c:	3feec709 	.word	0x3feec709
 800bb20:	145b01f5 	.word	0x145b01f5
 800bb24:	be3e2fe0 	.word	0xbe3e2fe0
 800bb28:	00000000 	.word	0x00000000
 800bb2c:	3ff00000 	.word	0x3ff00000
 800bb30:	43400000 	.word	0x43400000
 800bb34:	0003988e 	.word	0x0003988e
 800bb38:	000bb679 	.word	0x000bb679
 800bb3c:	0800d538 	.word	0x0800d538
 800bb40:	3ff00000 	.word	0x3ff00000
 800bb44:	40080000 	.word	0x40080000
 800bb48:	0800d558 	.word	0x0800d558
 800bb4c:	0800d548 	.word	0x0800d548
 800bb50:	a3b4      	add	r3, pc, #720	; (adr r3, 800be24 <__ieee754_pow+0xa14>)
 800bb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb56:	4640      	mov	r0, r8
 800bb58:	4649      	mov	r1, r9
 800bb5a:	f7f4 fbbf 	bl	80002dc <__adddf3>
 800bb5e:	4622      	mov	r2, r4
 800bb60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb64:	462b      	mov	r3, r5
 800bb66:	4630      	mov	r0, r6
 800bb68:	4639      	mov	r1, r7
 800bb6a:	f7f4 fbb5 	bl	80002d8 <__aeabi_dsub>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb76:	f7f4 fff7 	bl	8000b68 <__aeabi_dcmpgt>
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	f47f adfe 	bne.w	800b77c <__ieee754_pow+0x36c>
 800bb80:	4aa3      	ldr	r2, [pc, #652]	; (800be10 <__ieee754_pow+0xa00>)
 800bb82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb86:	4293      	cmp	r3, r2
 800bb88:	f340 810a 	ble.w	800bda0 <__ieee754_pow+0x990>
 800bb8c:	151b      	asrs	r3, r3, #20
 800bb8e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bb92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bb96:	fa4a f303 	asr.w	r3, sl, r3
 800bb9a:	445b      	add	r3, fp
 800bb9c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bba0:	4e9c      	ldr	r6, [pc, #624]	; (800be14 <__ieee754_pow+0xa04>)
 800bba2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bba6:	4116      	asrs	r6, r2
 800bba8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bbac:	2000      	movs	r0, #0
 800bbae:	ea23 0106 	bic.w	r1, r3, r6
 800bbb2:	f1c2 0214 	rsb	r2, r2, #20
 800bbb6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bbba:	fa4a fa02 	asr.w	sl, sl, r2
 800bbbe:	f1bb 0f00 	cmp.w	fp, #0
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	4629      	mov	r1, r5
 800bbca:	bfb8      	it	lt
 800bbcc:	f1ca 0a00 	rsblt	sl, sl, #0
 800bbd0:	f7f4 fb82 	bl	80002d8 <__aeabi_dsub>
 800bbd4:	e9cd 0100 	strd	r0, r1, [sp]
 800bbd8:	4642      	mov	r2, r8
 800bbda:	464b      	mov	r3, r9
 800bbdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbe0:	f7f4 fb7c 	bl	80002dc <__adddf3>
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	a378      	add	r3, pc, #480	; (adr r3, 800bdc8 <__ieee754_pow+0x9b8>)
 800bbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbec:	4604      	mov	r4, r0
 800bbee:	460d      	mov	r5, r1
 800bbf0:	f7f4 fd2a 	bl	8000648 <__aeabi_dmul>
 800bbf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	460f      	mov	r7, r1
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	4629      	mov	r1, r5
 800bc00:	f7f4 fb6a 	bl	80002d8 <__aeabi_dsub>
 800bc04:	4602      	mov	r2, r0
 800bc06:	460b      	mov	r3, r1
 800bc08:	4640      	mov	r0, r8
 800bc0a:	4649      	mov	r1, r9
 800bc0c:	f7f4 fb64 	bl	80002d8 <__aeabi_dsub>
 800bc10:	a36f      	add	r3, pc, #444	; (adr r3, 800bdd0 <__ieee754_pow+0x9c0>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	f7f4 fd17 	bl	8000648 <__aeabi_dmul>
 800bc1a:	a36f      	add	r3, pc, #444	; (adr r3, 800bdd8 <__ieee754_pow+0x9c8>)
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	4680      	mov	r8, r0
 800bc22:	4689      	mov	r9, r1
 800bc24:	4620      	mov	r0, r4
 800bc26:	4629      	mov	r1, r5
 800bc28:	f7f4 fd0e 	bl	8000648 <__aeabi_dmul>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4640      	mov	r0, r8
 800bc32:	4649      	mov	r1, r9
 800bc34:	f7f4 fb52 	bl	80002dc <__adddf3>
 800bc38:	4604      	mov	r4, r0
 800bc3a:	460d      	mov	r5, r1
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	4630      	mov	r0, r6
 800bc42:	4639      	mov	r1, r7
 800bc44:	f7f4 fb4a 	bl	80002dc <__adddf3>
 800bc48:	4632      	mov	r2, r6
 800bc4a:	463b      	mov	r3, r7
 800bc4c:	4680      	mov	r8, r0
 800bc4e:	4689      	mov	r9, r1
 800bc50:	f7f4 fb42 	bl	80002d8 <__aeabi_dsub>
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4620      	mov	r0, r4
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	f7f4 fb3c 	bl	80002d8 <__aeabi_dsub>
 800bc60:	4642      	mov	r2, r8
 800bc62:	4606      	mov	r6, r0
 800bc64:	460f      	mov	r7, r1
 800bc66:	464b      	mov	r3, r9
 800bc68:	4640      	mov	r0, r8
 800bc6a:	4649      	mov	r1, r9
 800bc6c:	f7f4 fcec 	bl	8000648 <__aeabi_dmul>
 800bc70:	a35b      	add	r3, pc, #364	; (adr r3, 800bde0 <__ieee754_pow+0x9d0>)
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	4604      	mov	r4, r0
 800bc78:	460d      	mov	r5, r1
 800bc7a:	f7f4 fce5 	bl	8000648 <__aeabi_dmul>
 800bc7e:	a35a      	add	r3, pc, #360	; (adr r3, 800bde8 <__ieee754_pow+0x9d8>)
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	f7f4 fb28 	bl	80002d8 <__aeabi_dsub>
 800bc88:	4622      	mov	r2, r4
 800bc8a:	462b      	mov	r3, r5
 800bc8c:	f7f4 fcdc 	bl	8000648 <__aeabi_dmul>
 800bc90:	a357      	add	r3, pc, #348	; (adr r3, 800bdf0 <__ieee754_pow+0x9e0>)
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	f7f4 fb21 	bl	80002dc <__adddf3>
 800bc9a:	4622      	mov	r2, r4
 800bc9c:	462b      	mov	r3, r5
 800bc9e:	f7f4 fcd3 	bl	8000648 <__aeabi_dmul>
 800bca2:	a355      	add	r3, pc, #340	; (adr r3, 800bdf8 <__ieee754_pow+0x9e8>)
 800bca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca8:	f7f4 fb16 	bl	80002d8 <__aeabi_dsub>
 800bcac:	4622      	mov	r2, r4
 800bcae:	462b      	mov	r3, r5
 800bcb0:	f7f4 fcca 	bl	8000648 <__aeabi_dmul>
 800bcb4:	a352      	add	r3, pc, #328	; (adr r3, 800be00 <__ieee754_pow+0x9f0>)
 800bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcba:	f7f4 fb0f 	bl	80002dc <__adddf3>
 800bcbe:	4622      	mov	r2, r4
 800bcc0:	462b      	mov	r3, r5
 800bcc2:	f7f4 fcc1 	bl	8000648 <__aeabi_dmul>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	460b      	mov	r3, r1
 800bcca:	4640      	mov	r0, r8
 800bccc:	4649      	mov	r1, r9
 800bcce:	f7f4 fb03 	bl	80002d8 <__aeabi_dsub>
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4649      	mov	r1, r9
 800bcde:	f7f4 fcb3 	bl	8000648 <__aeabi_dmul>
 800bce2:	2200      	movs	r2, #0
 800bce4:	e9cd 0100 	strd	r0, r1, [sp]
 800bce8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bcec:	4620      	mov	r0, r4
 800bcee:	4629      	mov	r1, r5
 800bcf0:	f7f4 faf2 	bl	80002d8 <__aeabi_dsub>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcfc:	f7f4 fdce 	bl	800089c <__aeabi_ddiv>
 800bd00:	4632      	mov	r2, r6
 800bd02:	4604      	mov	r4, r0
 800bd04:	460d      	mov	r5, r1
 800bd06:	463b      	mov	r3, r7
 800bd08:	4640      	mov	r0, r8
 800bd0a:	4649      	mov	r1, r9
 800bd0c:	f7f4 fc9c 	bl	8000648 <__aeabi_dmul>
 800bd10:	4632      	mov	r2, r6
 800bd12:	463b      	mov	r3, r7
 800bd14:	f7f4 fae2 	bl	80002dc <__adddf3>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	4629      	mov	r1, r5
 800bd20:	f7f4 fada 	bl	80002d8 <__aeabi_dsub>
 800bd24:	4642      	mov	r2, r8
 800bd26:	464b      	mov	r3, r9
 800bd28:	f7f4 fad6 	bl	80002d8 <__aeabi_dsub>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	2000      	movs	r0, #0
 800bd32:	4939      	ldr	r1, [pc, #228]	; (800be18 <__ieee754_pow+0xa08>)
 800bd34:	f7f4 fad0 	bl	80002d8 <__aeabi_dsub>
 800bd38:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bd3c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	da2f      	bge.n	800bda6 <__ieee754_pow+0x996>
 800bd46:	4650      	mov	r0, sl
 800bd48:	ec43 2b10 	vmov	d0, r2, r3
 800bd4c:	f001 f8fc 	bl	800cf48 <scalbn>
 800bd50:	ec51 0b10 	vmov	r0, r1, d0
 800bd54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd58:	f7ff bbf1 	b.w	800b53e <__ieee754_pow+0x12e>
 800bd5c:	4b2f      	ldr	r3, [pc, #188]	; (800be1c <__ieee754_pow+0xa0c>)
 800bd5e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bd62:	429e      	cmp	r6, r3
 800bd64:	f77f af0c 	ble.w	800bb80 <__ieee754_pow+0x770>
 800bd68:	4b2d      	ldr	r3, [pc, #180]	; (800be20 <__ieee754_pow+0xa10>)
 800bd6a:	440b      	add	r3, r1
 800bd6c:	4303      	orrs	r3, r0
 800bd6e:	d00b      	beq.n	800bd88 <__ieee754_pow+0x978>
 800bd70:	a325      	add	r3, pc, #148	; (adr r3, 800be08 <__ieee754_pow+0x9f8>)
 800bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd7a:	f7f4 fc65 	bl	8000648 <__aeabi_dmul>
 800bd7e:	a322      	add	r3, pc, #136	; (adr r3, 800be08 <__ieee754_pow+0x9f8>)
 800bd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd84:	f7ff bbdb 	b.w	800b53e <__ieee754_pow+0x12e>
 800bd88:	4622      	mov	r2, r4
 800bd8a:	462b      	mov	r3, r5
 800bd8c:	f7f4 faa4 	bl	80002d8 <__aeabi_dsub>
 800bd90:	4642      	mov	r2, r8
 800bd92:	464b      	mov	r3, r9
 800bd94:	f7f4 fede 	bl	8000b54 <__aeabi_dcmpge>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	f43f aef1 	beq.w	800bb80 <__ieee754_pow+0x770>
 800bd9e:	e7e7      	b.n	800bd70 <__ieee754_pow+0x960>
 800bda0:	f04f 0a00 	mov.w	sl, #0
 800bda4:	e718      	b.n	800bbd8 <__ieee754_pow+0x7c8>
 800bda6:	4621      	mov	r1, r4
 800bda8:	e7d4      	b.n	800bd54 <__ieee754_pow+0x944>
 800bdaa:	2000      	movs	r0, #0
 800bdac:	491a      	ldr	r1, [pc, #104]	; (800be18 <__ieee754_pow+0xa08>)
 800bdae:	f7ff bb8f 	b.w	800b4d0 <__ieee754_pow+0xc0>
 800bdb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdb6:	f7ff bb8b 	b.w	800b4d0 <__ieee754_pow+0xc0>
 800bdba:	4630      	mov	r0, r6
 800bdbc:	4639      	mov	r1, r7
 800bdbe:	f7ff bb87 	b.w	800b4d0 <__ieee754_pow+0xc0>
 800bdc2:	4693      	mov	fp, r2
 800bdc4:	f7ff bb98 	b.w	800b4f8 <__ieee754_pow+0xe8>
 800bdc8:	00000000 	.word	0x00000000
 800bdcc:	3fe62e43 	.word	0x3fe62e43
 800bdd0:	fefa39ef 	.word	0xfefa39ef
 800bdd4:	3fe62e42 	.word	0x3fe62e42
 800bdd8:	0ca86c39 	.word	0x0ca86c39
 800bddc:	be205c61 	.word	0xbe205c61
 800bde0:	72bea4d0 	.word	0x72bea4d0
 800bde4:	3e663769 	.word	0x3e663769
 800bde8:	c5d26bf1 	.word	0xc5d26bf1
 800bdec:	3ebbbd41 	.word	0x3ebbbd41
 800bdf0:	af25de2c 	.word	0xaf25de2c
 800bdf4:	3f11566a 	.word	0x3f11566a
 800bdf8:	16bebd93 	.word	0x16bebd93
 800bdfc:	3f66c16c 	.word	0x3f66c16c
 800be00:	5555553e 	.word	0x5555553e
 800be04:	3fc55555 	.word	0x3fc55555
 800be08:	c2f8f359 	.word	0xc2f8f359
 800be0c:	01a56e1f 	.word	0x01a56e1f
 800be10:	3fe00000 	.word	0x3fe00000
 800be14:	000fffff 	.word	0x000fffff
 800be18:	3ff00000 	.word	0x3ff00000
 800be1c:	4090cbff 	.word	0x4090cbff
 800be20:	3f6f3400 	.word	0x3f6f3400
 800be24:	652b82fe 	.word	0x652b82fe
 800be28:	3c971547 	.word	0x3c971547
 800be2c:	00000000 	.word	0x00000000

0800be30 <__ieee754_rem_pio2>:
 800be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be34:	ec57 6b10 	vmov	r6, r7, d0
 800be38:	4bc3      	ldr	r3, [pc, #780]	; (800c148 <__ieee754_rem_pio2+0x318>)
 800be3a:	b08d      	sub	sp, #52	; 0x34
 800be3c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800be40:	4598      	cmp	r8, r3
 800be42:	4604      	mov	r4, r0
 800be44:	9704      	str	r7, [sp, #16]
 800be46:	dc07      	bgt.n	800be58 <__ieee754_rem_pio2+0x28>
 800be48:	2200      	movs	r2, #0
 800be4a:	2300      	movs	r3, #0
 800be4c:	ed84 0b00 	vstr	d0, [r4]
 800be50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800be54:	2500      	movs	r5, #0
 800be56:	e027      	b.n	800bea8 <__ieee754_rem_pio2+0x78>
 800be58:	4bbc      	ldr	r3, [pc, #752]	; (800c14c <__ieee754_rem_pio2+0x31c>)
 800be5a:	4598      	cmp	r8, r3
 800be5c:	dc75      	bgt.n	800bf4a <__ieee754_rem_pio2+0x11a>
 800be5e:	9b04      	ldr	r3, [sp, #16]
 800be60:	4dbb      	ldr	r5, [pc, #748]	; (800c150 <__ieee754_rem_pio2+0x320>)
 800be62:	2b00      	cmp	r3, #0
 800be64:	ee10 0a10 	vmov	r0, s0
 800be68:	a3a9      	add	r3, pc, #676	; (adr r3, 800c110 <__ieee754_rem_pio2+0x2e0>)
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	4639      	mov	r1, r7
 800be70:	dd36      	ble.n	800bee0 <__ieee754_rem_pio2+0xb0>
 800be72:	f7f4 fa31 	bl	80002d8 <__aeabi_dsub>
 800be76:	45a8      	cmp	r8, r5
 800be78:	4606      	mov	r6, r0
 800be7a:	460f      	mov	r7, r1
 800be7c:	d018      	beq.n	800beb0 <__ieee754_rem_pio2+0x80>
 800be7e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c118 <__ieee754_rem_pio2+0x2e8>)
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	f7f4 fa28 	bl	80002d8 <__aeabi_dsub>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	e9c4 2300 	strd	r2, r3, [r4]
 800be90:	4630      	mov	r0, r6
 800be92:	4639      	mov	r1, r7
 800be94:	f7f4 fa20 	bl	80002d8 <__aeabi_dsub>
 800be98:	a39f      	add	r3, pc, #636	; (adr r3, 800c118 <__ieee754_rem_pio2+0x2e8>)
 800be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9e:	f7f4 fa1b 	bl	80002d8 <__aeabi_dsub>
 800bea2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bea6:	2501      	movs	r5, #1
 800bea8:	4628      	mov	r0, r5
 800beaa:	b00d      	add	sp, #52	; 0x34
 800beac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb0:	a39b      	add	r3, pc, #620	; (adr r3, 800c120 <__ieee754_rem_pio2+0x2f0>)
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	f7f4 fa0f 	bl	80002d8 <__aeabi_dsub>
 800beba:	a39b      	add	r3, pc, #620	; (adr r3, 800c128 <__ieee754_rem_pio2+0x2f8>)
 800bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec0:	4606      	mov	r6, r0
 800bec2:	460f      	mov	r7, r1
 800bec4:	f7f4 fa08 	bl	80002d8 <__aeabi_dsub>
 800bec8:	4602      	mov	r2, r0
 800beca:	460b      	mov	r3, r1
 800becc:	e9c4 2300 	strd	r2, r3, [r4]
 800bed0:	4630      	mov	r0, r6
 800bed2:	4639      	mov	r1, r7
 800bed4:	f7f4 fa00 	bl	80002d8 <__aeabi_dsub>
 800bed8:	a393      	add	r3, pc, #588	; (adr r3, 800c128 <__ieee754_rem_pio2+0x2f8>)
 800beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bede:	e7de      	b.n	800be9e <__ieee754_rem_pio2+0x6e>
 800bee0:	f7f4 f9fc 	bl	80002dc <__adddf3>
 800bee4:	45a8      	cmp	r8, r5
 800bee6:	4606      	mov	r6, r0
 800bee8:	460f      	mov	r7, r1
 800beea:	d016      	beq.n	800bf1a <__ieee754_rem_pio2+0xea>
 800beec:	a38a      	add	r3, pc, #552	; (adr r3, 800c118 <__ieee754_rem_pio2+0x2e8>)
 800beee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef2:	f7f4 f9f3 	bl	80002dc <__adddf3>
 800bef6:	4602      	mov	r2, r0
 800bef8:	460b      	mov	r3, r1
 800befa:	e9c4 2300 	strd	r2, r3, [r4]
 800befe:	4630      	mov	r0, r6
 800bf00:	4639      	mov	r1, r7
 800bf02:	f7f4 f9e9 	bl	80002d8 <__aeabi_dsub>
 800bf06:	a384      	add	r3, pc, #528	; (adr r3, 800c118 <__ieee754_rem_pio2+0x2e8>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	f7f4 f9e6 	bl	80002dc <__adddf3>
 800bf10:	f04f 35ff 	mov.w	r5, #4294967295
 800bf14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf18:	e7c6      	b.n	800bea8 <__ieee754_rem_pio2+0x78>
 800bf1a:	a381      	add	r3, pc, #516	; (adr r3, 800c120 <__ieee754_rem_pio2+0x2f0>)
 800bf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf20:	f7f4 f9dc 	bl	80002dc <__adddf3>
 800bf24:	a380      	add	r3, pc, #512	; (adr r3, 800c128 <__ieee754_rem_pio2+0x2f8>)
 800bf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2a:	4606      	mov	r6, r0
 800bf2c:	460f      	mov	r7, r1
 800bf2e:	f7f4 f9d5 	bl	80002dc <__adddf3>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	e9c4 2300 	strd	r2, r3, [r4]
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	4639      	mov	r1, r7
 800bf3e:	f7f4 f9cb 	bl	80002d8 <__aeabi_dsub>
 800bf42:	a379      	add	r3, pc, #484	; (adr r3, 800c128 <__ieee754_rem_pio2+0x2f8>)
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	e7e0      	b.n	800bf0c <__ieee754_rem_pio2+0xdc>
 800bf4a:	4b82      	ldr	r3, [pc, #520]	; (800c154 <__ieee754_rem_pio2+0x324>)
 800bf4c:	4598      	cmp	r8, r3
 800bf4e:	f300 80d0 	bgt.w	800c0f2 <__ieee754_rem_pio2+0x2c2>
 800bf52:	f000 fed3 	bl	800ccfc <fabs>
 800bf56:	ec57 6b10 	vmov	r6, r7, d0
 800bf5a:	ee10 0a10 	vmov	r0, s0
 800bf5e:	a374      	add	r3, pc, #464	; (adr r3, 800c130 <__ieee754_rem_pio2+0x300>)
 800bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf64:	4639      	mov	r1, r7
 800bf66:	f7f4 fb6f 	bl	8000648 <__aeabi_dmul>
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	4b7a      	ldr	r3, [pc, #488]	; (800c158 <__ieee754_rem_pio2+0x328>)
 800bf6e:	f7f4 f9b5 	bl	80002dc <__adddf3>
 800bf72:	f7f4 fe19 	bl	8000ba8 <__aeabi_d2iz>
 800bf76:	4605      	mov	r5, r0
 800bf78:	f7f4 fafc 	bl	8000574 <__aeabi_i2d>
 800bf7c:	a364      	add	r3, pc, #400	; (adr r3, 800c110 <__ieee754_rem_pio2+0x2e0>)
 800bf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf86:	f7f4 fb5f 	bl	8000648 <__aeabi_dmul>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	4630      	mov	r0, r6
 800bf90:	4639      	mov	r1, r7
 800bf92:	f7f4 f9a1 	bl	80002d8 <__aeabi_dsub>
 800bf96:	a360      	add	r3, pc, #384	; (adr r3, 800c118 <__ieee754_rem_pio2+0x2e8>)
 800bf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9c:	4682      	mov	sl, r0
 800bf9e:	468b      	mov	fp, r1
 800bfa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfa4:	f7f4 fb50 	bl	8000648 <__aeabi_dmul>
 800bfa8:	2d1f      	cmp	r5, #31
 800bfaa:	4606      	mov	r6, r0
 800bfac:	460f      	mov	r7, r1
 800bfae:	dc0c      	bgt.n	800bfca <__ieee754_rem_pio2+0x19a>
 800bfb0:	1e6a      	subs	r2, r5, #1
 800bfb2:	4b6a      	ldr	r3, [pc, #424]	; (800c15c <__ieee754_rem_pio2+0x32c>)
 800bfb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb8:	4543      	cmp	r3, r8
 800bfba:	d006      	beq.n	800bfca <__ieee754_rem_pio2+0x19a>
 800bfbc:	4632      	mov	r2, r6
 800bfbe:	463b      	mov	r3, r7
 800bfc0:	4650      	mov	r0, sl
 800bfc2:	4659      	mov	r1, fp
 800bfc4:	f7f4 f988 	bl	80002d8 <__aeabi_dsub>
 800bfc8:	e00e      	b.n	800bfe8 <__ieee754_rem_pio2+0x1b8>
 800bfca:	4632      	mov	r2, r6
 800bfcc:	463b      	mov	r3, r7
 800bfce:	4650      	mov	r0, sl
 800bfd0:	4659      	mov	r1, fp
 800bfd2:	f7f4 f981 	bl	80002d8 <__aeabi_dsub>
 800bfd6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bfda:	9305      	str	r3, [sp, #20]
 800bfdc:	9a05      	ldr	r2, [sp, #20]
 800bfde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	2b10      	cmp	r3, #16
 800bfe6:	dc02      	bgt.n	800bfee <__ieee754_rem_pio2+0x1be>
 800bfe8:	e9c4 0100 	strd	r0, r1, [r4]
 800bfec:	e039      	b.n	800c062 <__ieee754_rem_pio2+0x232>
 800bfee:	a34c      	add	r3, pc, #304	; (adr r3, 800c120 <__ieee754_rem_pio2+0x2f0>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bff8:	f7f4 fb26 	bl	8000648 <__aeabi_dmul>
 800bffc:	4606      	mov	r6, r0
 800bffe:	460f      	mov	r7, r1
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4650      	mov	r0, sl
 800c006:	4659      	mov	r1, fp
 800c008:	f7f4 f966 	bl	80002d8 <__aeabi_dsub>
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	4680      	mov	r8, r0
 800c012:	4689      	mov	r9, r1
 800c014:	4650      	mov	r0, sl
 800c016:	4659      	mov	r1, fp
 800c018:	f7f4 f95e 	bl	80002d8 <__aeabi_dsub>
 800c01c:	4632      	mov	r2, r6
 800c01e:	463b      	mov	r3, r7
 800c020:	f7f4 f95a 	bl	80002d8 <__aeabi_dsub>
 800c024:	a340      	add	r3, pc, #256	; (adr r3, 800c128 <__ieee754_rem_pio2+0x2f8>)
 800c026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02a:	4606      	mov	r6, r0
 800c02c:	460f      	mov	r7, r1
 800c02e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c032:	f7f4 fb09 	bl	8000648 <__aeabi_dmul>
 800c036:	4632      	mov	r2, r6
 800c038:	463b      	mov	r3, r7
 800c03a:	f7f4 f94d 	bl	80002d8 <__aeabi_dsub>
 800c03e:	4602      	mov	r2, r0
 800c040:	460b      	mov	r3, r1
 800c042:	4606      	mov	r6, r0
 800c044:	460f      	mov	r7, r1
 800c046:	4640      	mov	r0, r8
 800c048:	4649      	mov	r1, r9
 800c04a:	f7f4 f945 	bl	80002d8 <__aeabi_dsub>
 800c04e:	9a05      	ldr	r2, [sp, #20]
 800c050:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	2b31      	cmp	r3, #49	; 0x31
 800c058:	dc20      	bgt.n	800c09c <__ieee754_rem_pio2+0x26c>
 800c05a:	e9c4 0100 	strd	r0, r1, [r4]
 800c05e:	46c2      	mov	sl, r8
 800c060:	46cb      	mov	fp, r9
 800c062:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c066:	4650      	mov	r0, sl
 800c068:	4642      	mov	r2, r8
 800c06a:	464b      	mov	r3, r9
 800c06c:	4659      	mov	r1, fp
 800c06e:	f7f4 f933 	bl	80002d8 <__aeabi_dsub>
 800c072:	463b      	mov	r3, r7
 800c074:	4632      	mov	r2, r6
 800c076:	f7f4 f92f 	bl	80002d8 <__aeabi_dsub>
 800c07a:	9b04      	ldr	r3, [sp, #16]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c082:	f6bf af11 	bge.w	800bea8 <__ieee754_rem_pio2+0x78>
 800c086:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c08a:	6063      	str	r3, [r4, #4]
 800c08c:	f8c4 8000 	str.w	r8, [r4]
 800c090:	60a0      	str	r0, [r4, #8]
 800c092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c096:	60e3      	str	r3, [r4, #12]
 800c098:	426d      	negs	r5, r5
 800c09a:	e705      	b.n	800bea8 <__ieee754_rem_pio2+0x78>
 800c09c:	a326      	add	r3, pc, #152	; (adr r3, 800c138 <__ieee754_rem_pio2+0x308>)
 800c09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0a6:	f7f4 facf 	bl	8000648 <__aeabi_dmul>
 800c0aa:	4606      	mov	r6, r0
 800c0ac:	460f      	mov	r7, r1
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	4640      	mov	r0, r8
 800c0b4:	4649      	mov	r1, r9
 800c0b6:	f7f4 f90f 	bl	80002d8 <__aeabi_dsub>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	4682      	mov	sl, r0
 800c0c0:	468b      	mov	fp, r1
 800c0c2:	4640      	mov	r0, r8
 800c0c4:	4649      	mov	r1, r9
 800c0c6:	f7f4 f907 	bl	80002d8 <__aeabi_dsub>
 800c0ca:	4632      	mov	r2, r6
 800c0cc:	463b      	mov	r3, r7
 800c0ce:	f7f4 f903 	bl	80002d8 <__aeabi_dsub>
 800c0d2:	a31b      	add	r3, pc, #108	; (adr r3, 800c140 <__ieee754_rem_pio2+0x310>)
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	4606      	mov	r6, r0
 800c0da:	460f      	mov	r7, r1
 800c0dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0e0:	f7f4 fab2 	bl	8000648 <__aeabi_dmul>
 800c0e4:	4632      	mov	r2, r6
 800c0e6:	463b      	mov	r3, r7
 800c0e8:	f7f4 f8f6 	bl	80002d8 <__aeabi_dsub>
 800c0ec:	4606      	mov	r6, r0
 800c0ee:	460f      	mov	r7, r1
 800c0f0:	e764      	b.n	800bfbc <__ieee754_rem_pio2+0x18c>
 800c0f2:	4b1b      	ldr	r3, [pc, #108]	; (800c160 <__ieee754_rem_pio2+0x330>)
 800c0f4:	4598      	cmp	r8, r3
 800c0f6:	dd35      	ble.n	800c164 <__ieee754_rem_pio2+0x334>
 800c0f8:	ee10 2a10 	vmov	r2, s0
 800c0fc:	463b      	mov	r3, r7
 800c0fe:	4630      	mov	r0, r6
 800c100:	4639      	mov	r1, r7
 800c102:	f7f4 f8e9 	bl	80002d8 <__aeabi_dsub>
 800c106:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c10a:	e9c4 0100 	strd	r0, r1, [r4]
 800c10e:	e6a1      	b.n	800be54 <__ieee754_rem_pio2+0x24>
 800c110:	54400000 	.word	0x54400000
 800c114:	3ff921fb 	.word	0x3ff921fb
 800c118:	1a626331 	.word	0x1a626331
 800c11c:	3dd0b461 	.word	0x3dd0b461
 800c120:	1a600000 	.word	0x1a600000
 800c124:	3dd0b461 	.word	0x3dd0b461
 800c128:	2e037073 	.word	0x2e037073
 800c12c:	3ba3198a 	.word	0x3ba3198a
 800c130:	6dc9c883 	.word	0x6dc9c883
 800c134:	3fe45f30 	.word	0x3fe45f30
 800c138:	2e000000 	.word	0x2e000000
 800c13c:	3ba3198a 	.word	0x3ba3198a
 800c140:	252049c1 	.word	0x252049c1
 800c144:	397b839a 	.word	0x397b839a
 800c148:	3fe921fb 	.word	0x3fe921fb
 800c14c:	4002d97b 	.word	0x4002d97b
 800c150:	3ff921fb 	.word	0x3ff921fb
 800c154:	413921fb 	.word	0x413921fb
 800c158:	3fe00000 	.word	0x3fe00000
 800c15c:	0800d568 	.word	0x0800d568
 800c160:	7fefffff 	.word	0x7fefffff
 800c164:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c168:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c16c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c170:	4630      	mov	r0, r6
 800c172:	460f      	mov	r7, r1
 800c174:	f7f4 fd18 	bl	8000ba8 <__aeabi_d2iz>
 800c178:	f7f4 f9fc 	bl	8000574 <__aeabi_i2d>
 800c17c:	4602      	mov	r2, r0
 800c17e:	460b      	mov	r3, r1
 800c180:	4630      	mov	r0, r6
 800c182:	4639      	mov	r1, r7
 800c184:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c188:	f7f4 f8a6 	bl	80002d8 <__aeabi_dsub>
 800c18c:	2200      	movs	r2, #0
 800c18e:	4b1f      	ldr	r3, [pc, #124]	; (800c20c <__ieee754_rem_pio2+0x3dc>)
 800c190:	f7f4 fa5a 	bl	8000648 <__aeabi_dmul>
 800c194:	460f      	mov	r7, r1
 800c196:	4606      	mov	r6, r0
 800c198:	f7f4 fd06 	bl	8000ba8 <__aeabi_d2iz>
 800c19c:	f7f4 f9ea 	bl	8000574 <__aeabi_i2d>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c1ac:	f7f4 f894 	bl	80002d8 <__aeabi_dsub>
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	4b16      	ldr	r3, [pc, #88]	; (800c20c <__ieee754_rem_pio2+0x3dc>)
 800c1b4:	f7f4 fa48 	bl	8000648 <__aeabi_dmul>
 800c1b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c1bc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c1c0:	f04f 0803 	mov.w	r8, #3
 800c1c4:	2600      	movs	r6, #0
 800c1c6:	2700      	movs	r7, #0
 800c1c8:	4632      	mov	r2, r6
 800c1ca:	463b      	mov	r3, r7
 800c1cc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c1d0:	f108 3aff 	add.w	sl, r8, #4294967295
 800c1d4:	f7f4 fca0 	bl	8000b18 <__aeabi_dcmpeq>
 800c1d8:	b9b0      	cbnz	r0, 800c208 <__ieee754_rem_pio2+0x3d8>
 800c1da:	4b0d      	ldr	r3, [pc, #52]	; (800c210 <__ieee754_rem_pio2+0x3e0>)
 800c1dc:	9301      	str	r3, [sp, #4]
 800c1de:	2302      	movs	r3, #2
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	462a      	mov	r2, r5
 800c1e4:	4643      	mov	r3, r8
 800c1e6:	4621      	mov	r1, r4
 800c1e8:	a806      	add	r0, sp, #24
 800c1ea:	f000 f98d 	bl	800c508 <__kernel_rem_pio2>
 800c1ee:	9b04      	ldr	r3, [sp, #16]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	f6bf ae58 	bge.w	800bea8 <__ieee754_rem_pio2+0x78>
 800c1f8:	6863      	ldr	r3, [r4, #4]
 800c1fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c1fe:	6063      	str	r3, [r4, #4]
 800c200:	68e3      	ldr	r3, [r4, #12]
 800c202:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c206:	e746      	b.n	800c096 <__ieee754_rem_pio2+0x266>
 800c208:	46d0      	mov	r8, sl
 800c20a:	e7dd      	b.n	800c1c8 <__ieee754_rem_pio2+0x398>
 800c20c:	41700000 	.word	0x41700000
 800c210:	0800d5e8 	.word	0x0800d5e8

0800c214 <__ieee754_sqrt>:
 800c214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c218:	4955      	ldr	r1, [pc, #340]	; (800c370 <__ieee754_sqrt+0x15c>)
 800c21a:	ec55 4b10 	vmov	r4, r5, d0
 800c21e:	43a9      	bics	r1, r5
 800c220:	462b      	mov	r3, r5
 800c222:	462a      	mov	r2, r5
 800c224:	d112      	bne.n	800c24c <__ieee754_sqrt+0x38>
 800c226:	ee10 2a10 	vmov	r2, s0
 800c22a:	ee10 0a10 	vmov	r0, s0
 800c22e:	4629      	mov	r1, r5
 800c230:	f7f4 fa0a 	bl	8000648 <__aeabi_dmul>
 800c234:	4602      	mov	r2, r0
 800c236:	460b      	mov	r3, r1
 800c238:	4620      	mov	r0, r4
 800c23a:	4629      	mov	r1, r5
 800c23c:	f7f4 f84e 	bl	80002dc <__adddf3>
 800c240:	4604      	mov	r4, r0
 800c242:	460d      	mov	r5, r1
 800c244:	ec45 4b10 	vmov	d0, r4, r5
 800c248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c24c:	2d00      	cmp	r5, #0
 800c24e:	ee10 0a10 	vmov	r0, s0
 800c252:	4621      	mov	r1, r4
 800c254:	dc0f      	bgt.n	800c276 <__ieee754_sqrt+0x62>
 800c256:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c25a:	4330      	orrs	r0, r6
 800c25c:	d0f2      	beq.n	800c244 <__ieee754_sqrt+0x30>
 800c25e:	b155      	cbz	r5, 800c276 <__ieee754_sqrt+0x62>
 800c260:	ee10 2a10 	vmov	r2, s0
 800c264:	4620      	mov	r0, r4
 800c266:	4629      	mov	r1, r5
 800c268:	f7f4 f836 	bl	80002d8 <__aeabi_dsub>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	f7f4 fb14 	bl	800089c <__aeabi_ddiv>
 800c274:	e7e4      	b.n	800c240 <__ieee754_sqrt+0x2c>
 800c276:	151b      	asrs	r3, r3, #20
 800c278:	d073      	beq.n	800c362 <__ieee754_sqrt+0x14e>
 800c27a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c27e:	07dd      	lsls	r5, r3, #31
 800c280:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c284:	bf48      	it	mi
 800c286:	0fc8      	lsrmi	r0, r1, #31
 800c288:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c28c:	bf44      	itt	mi
 800c28e:	0049      	lslmi	r1, r1, #1
 800c290:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c294:	2500      	movs	r5, #0
 800c296:	1058      	asrs	r0, r3, #1
 800c298:	0fcb      	lsrs	r3, r1, #31
 800c29a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c29e:	0049      	lsls	r1, r1, #1
 800c2a0:	2316      	movs	r3, #22
 800c2a2:	462c      	mov	r4, r5
 800c2a4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c2a8:	19a7      	adds	r7, r4, r6
 800c2aa:	4297      	cmp	r7, r2
 800c2ac:	bfde      	ittt	le
 800c2ae:	19bc      	addle	r4, r7, r6
 800c2b0:	1bd2      	suble	r2, r2, r7
 800c2b2:	19ad      	addle	r5, r5, r6
 800c2b4:	0fcf      	lsrs	r7, r1, #31
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c2bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c2c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c2c4:	d1f0      	bne.n	800c2a8 <__ieee754_sqrt+0x94>
 800c2c6:	f04f 0c20 	mov.w	ip, #32
 800c2ca:	469e      	mov	lr, r3
 800c2cc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c2d0:	42a2      	cmp	r2, r4
 800c2d2:	eb06 070e 	add.w	r7, r6, lr
 800c2d6:	dc02      	bgt.n	800c2de <__ieee754_sqrt+0xca>
 800c2d8:	d112      	bne.n	800c300 <__ieee754_sqrt+0xec>
 800c2da:	428f      	cmp	r7, r1
 800c2dc:	d810      	bhi.n	800c300 <__ieee754_sqrt+0xec>
 800c2de:	2f00      	cmp	r7, #0
 800c2e0:	eb07 0e06 	add.w	lr, r7, r6
 800c2e4:	da42      	bge.n	800c36c <__ieee754_sqrt+0x158>
 800c2e6:	f1be 0f00 	cmp.w	lr, #0
 800c2ea:	db3f      	blt.n	800c36c <__ieee754_sqrt+0x158>
 800c2ec:	f104 0801 	add.w	r8, r4, #1
 800c2f0:	1b12      	subs	r2, r2, r4
 800c2f2:	428f      	cmp	r7, r1
 800c2f4:	bf88      	it	hi
 800c2f6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c2fa:	1bc9      	subs	r1, r1, r7
 800c2fc:	4433      	add	r3, r6
 800c2fe:	4644      	mov	r4, r8
 800c300:	0052      	lsls	r2, r2, #1
 800c302:	f1bc 0c01 	subs.w	ip, ip, #1
 800c306:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c30a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c30e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c312:	d1dd      	bne.n	800c2d0 <__ieee754_sqrt+0xbc>
 800c314:	430a      	orrs	r2, r1
 800c316:	d006      	beq.n	800c326 <__ieee754_sqrt+0x112>
 800c318:	1c5c      	adds	r4, r3, #1
 800c31a:	bf13      	iteet	ne
 800c31c:	3301      	addne	r3, #1
 800c31e:	3501      	addeq	r5, #1
 800c320:	4663      	moveq	r3, ip
 800c322:	f023 0301 	bicne.w	r3, r3, #1
 800c326:	106a      	asrs	r2, r5, #1
 800c328:	085b      	lsrs	r3, r3, #1
 800c32a:	07e9      	lsls	r1, r5, #31
 800c32c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c330:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c334:	bf48      	it	mi
 800c336:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c33a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c33e:	461c      	mov	r4, r3
 800c340:	e780      	b.n	800c244 <__ieee754_sqrt+0x30>
 800c342:	0aca      	lsrs	r2, r1, #11
 800c344:	3815      	subs	r0, #21
 800c346:	0549      	lsls	r1, r1, #21
 800c348:	2a00      	cmp	r2, #0
 800c34a:	d0fa      	beq.n	800c342 <__ieee754_sqrt+0x12e>
 800c34c:	02d6      	lsls	r6, r2, #11
 800c34e:	d50a      	bpl.n	800c366 <__ieee754_sqrt+0x152>
 800c350:	f1c3 0420 	rsb	r4, r3, #32
 800c354:	fa21 f404 	lsr.w	r4, r1, r4
 800c358:	1e5d      	subs	r5, r3, #1
 800c35a:	4099      	lsls	r1, r3
 800c35c:	4322      	orrs	r2, r4
 800c35e:	1b43      	subs	r3, r0, r5
 800c360:	e78b      	b.n	800c27a <__ieee754_sqrt+0x66>
 800c362:	4618      	mov	r0, r3
 800c364:	e7f0      	b.n	800c348 <__ieee754_sqrt+0x134>
 800c366:	0052      	lsls	r2, r2, #1
 800c368:	3301      	adds	r3, #1
 800c36a:	e7ef      	b.n	800c34c <__ieee754_sqrt+0x138>
 800c36c:	46a0      	mov	r8, r4
 800c36e:	e7bf      	b.n	800c2f0 <__ieee754_sqrt+0xdc>
 800c370:	7ff00000 	.word	0x7ff00000
 800c374:	00000000 	.word	0x00000000

0800c378 <__kernel_cos>:
 800c378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37c:	ec59 8b10 	vmov	r8, r9, d0
 800c380:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800c384:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c388:	ed2d 8b02 	vpush	{d8}
 800c38c:	eeb0 8a41 	vmov.f32	s16, s2
 800c390:	eef0 8a61 	vmov.f32	s17, s3
 800c394:	da07      	bge.n	800c3a6 <__kernel_cos+0x2e>
 800c396:	ee10 0a10 	vmov	r0, s0
 800c39a:	4649      	mov	r1, r9
 800c39c:	f7f4 fc04 	bl	8000ba8 <__aeabi_d2iz>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	f000 8089 	beq.w	800c4b8 <__kernel_cos+0x140>
 800c3a6:	4642      	mov	r2, r8
 800c3a8:	464b      	mov	r3, r9
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	f7f4 f94b 	bl	8000648 <__aeabi_dmul>
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	4b4e      	ldr	r3, [pc, #312]	; (800c4f0 <__kernel_cos+0x178>)
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	460d      	mov	r5, r1
 800c3ba:	f7f4 f945 	bl	8000648 <__aeabi_dmul>
 800c3be:	a340      	add	r3, pc, #256	; (adr r3, 800c4c0 <__kernel_cos+0x148>)
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	4682      	mov	sl, r0
 800c3c6:	468b      	mov	fp, r1
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	f7f4 f93c 	bl	8000648 <__aeabi_dmul>
 800c3d0:	a33d      	add	r3, pc, #244	; (adr r3, 800c4c8 <__kernel_cos+0x150>)
 800c3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d6:	f7f3 ff81 	bl	80002dc <__adddf3>
 800c3da:	4622      	mov	r2, r4
 800c3dc:	462b      	mov	r3, r5
 800c3de:	f7f4 f933 	bl	8000648 <__aeabi_dmul>
 800c3e2:	a33b      	add	r3, pc, #236	; (adr r3, 800c4d0 <__kernel_cos+0x158>)
 800c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e8:	f7f3 ff76 	bl	80002d8 <__aeabi_dsub>
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	462b      	mov	r3, r5
 800c3f0:	f7f4 f92a 	bl	8000648 <__aeabi_dmul>
 800c3f4:	a338      	add	r3, pc, #224	; (adr r3, 800c4d8 <__kernel_cos+0x160>)
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	f7f3 ff6f 	bl	80002dc <__adddf3>
 800c3fe:	4622      	mov	r2, r4
 800c400:	462b      	mov	r3, r5
 800c402:	f7f4 f921 	bl	8000648 <__aeabi_dmul>
 800c406:	a336      	add	r3, pc, #216	; (adr r3, 800c4e0 <__kernel_cos+0x168>)
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	f7f3 ff64 	bl	80002d8 <__aeabi_dsub>
 800c410:	4622      	mov	r2, r4
 800c412:	462b      	mov	r3, r5
 800c414:	f7f4 f918 	bl	8000648 <__aeabi_dmul>
 800c418:	a333      	add	r3, pc, #204	; (adr r3, 800c4e8 <__kernel_cos+0x170>)
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	f7f3 ff5d 	bl	80002dc <__adddf3>
 800c422:	4622      	mov	r2, r4
 800c424:	462b      	mov	r3, r5
 800c426:	f7f4 f90f 	bl	8000648 <__aeabi_dmul>
 800c42a:	4622      	mov	r2, r4
 800c42c:	462b      	mov	r3, r5
 800c42e:	f7f4 f90b 	bl	8000648 <__aeabi_dmul>
 800c432:	ec53 2b18 	vmov	r2, r3, d8
 800c436:	4604      	mov	r4, r0
 800c438:	460d      	mov	r5, r1
 800c43a:	4640      	mov	r0, r8
 800c43c:	4649      	mov	r1, r9
 800c43e:	f7f4 f903 	bl	8000648 <__aeabi_dmul>
 800c442:	460b      	mov	r3, r1
 800c444:	4602      	mov	r2, r0
 800c446:	4629      	mov	r1, r5
 800c448:	4620      	mov	r0, r4
 800c44a:	f7f3 ff45 	bl	80002d8 <__aeabi_dsub>
 800c44e:	4b29      	ldr	r3, [pc, #164]	; (800c4f4 <__kernel_cos+0x17c>)
 800c450:	429e      	cmp	r6, r3
 800c452:	4680      	mov	r8, r0
 800c454:	4689      	mov	r9, r1
 800c456:	dc11      	bgt.n	800c47c <__kernel_cos+0x104>
 800c458:	4602      	mov	r2, r0
 800c45a:	460b      	mov	r3, r1
 800c45c:	4650      	mov	r0, sl
 800c45e:	4659      	mov	r1, fp
 800c460:	f7f3 ff3a 	bl	80002d8 <__aeabi_dsub>
 800c464:	460b      	mov	r3, r1
 800c466:	4924      	ldr	r1, [pc, #144]	; (800c4f8 <__kernel_cos+0x180>)
 800c468:	4602      	mov	r2, r0
 800c46a:	2000      	movs	r0, #0
 800c46c:	f7f3 ff34 	bl	80002d8 <__aeabi_dsub>
 800c470:	ecbd 8b02 	vpop	{d8}
 800c474:	ec41 0b10 	vmov	d0, r0, r1
 800c478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47c:	4b1f      	ldr	r3, [pc, #124]	; (800c4fc <__kernel_cos+0x184>)
 800c47e:	491e      	ldr	r1, [pc, #120]	; (800c4f8 <__kernel_cos+0x180>)
 800c480:	429e      	cmp	r6, r3
 800c482:	bfcc      	ite	gt
 800c484:	4d1e      	ldrgt	r5, [pc, #120]	; (800c500 <__kernel_cos+0x188>)
 800c486:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c48a:	2400      	movs	r4, #0
 800c48c:	4622      	mov	r2, r4
 800c48e:	462b      	mov	r3, r5
 800c490:	2000      	movs	r0, #0
 800c492:	f7f3 ff21 	bl	80002d8 <__aeabi_dsub>
 800c496:	4622      	mov	r2, r4
 800c498:	4606      	mov	r6, r0
 800c49a:	460f      	mov	r7, r1
 800c49c:	462b      	mov	r3, r5
 800c49e:	4650      	mov	r0, sl
 800c4a0:	4659      	mov	r1, fp
 800c4a2:	f7f3 ff19 	bl	80002d8 <__aeabi_dsub>
 800c4a6:	4642      	mov	r2, r8
 800c4a8:	464b      	mov	r3, r9
 800c4aa:	f7f3 ff15 	bl	80002d8 <__aeabi_dsub>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	4639      	mov	r1, r7
 800c4b6:	e7d9      	b.n	800c46c <__kernel_cos+0xf4>
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	490f      	ldr	r1, [pc, #60]	; (800c4f8 <__kernel_cos+0x180>)
 800c4bc:	e7d8      	b.n	800c470 <__kernel_cos+0xf8>
 800c4be:	bf00      	nop
 800c4c0:	be8838d4 	.word	0xbe8838d4
 800c4c4:	bda8fae9 	.word	0xbda8fae9
 800c4c8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c4cc:	3e21ee9e 	.word	0x3e21ee9e
 800c4d0:	809c52ad 	.word	0x809c52ad
 800c4d4:	3e927e4f 	.word	0x3e927e4f
 800c4d8:	19cb1590 	.word	0x19cb1590
 800c4dc:	3efa01a0 	.word	0x3efa01a0
 800c4e0:	16c15177 	.word	0x16c15177
 800c4e4:	3f56c16c 	.word	0x3f56c16c
 800c4e8:	5555554c 	.word	0x5555554c
 800c4ec:	3fa55555 	.word	0x3fa55555
 800c4f0:	3fe00000 	.word	0x3fe00000
 800c4f4:	3fd33332 	.word	0x3fd33332
 800c4f8:	3ff00000 	.word	0x3ff00000
 800c4fc:	3fe90000 	.word	0x3fe90000
 800c500:	3fd20000 	.word	0x3fd20000
 800c504:	00000000 	.word	0x00000000

0800c508 <__kernel_rem_pio2>:
 800c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	ed2d 8b02 	vpush	{d8}
 800c510:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c514:	1ed4      	subs	r4, r2, #3
 800c516:	9308      	str	r3, [sp, #32]
 800c518:	9101      	str	r1, [sp, #4]
 800c51a:	4bc5      	ldr	r3, [pc, #788]	; (800c830 <__kernel_rem_pio2+0x328>)
 800c51c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c51e:	9009      	str	r0, [sp, #36]	; 0x24
 800c520:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c524:	9304      	str	r3, [sp, #16]
 800c526:	9b08      	ldr	r3, [sp, #32]
 800c528:	3b01      	subs	r3, #1
 800c52a:	9307      	str	r3, [sp, #28]
 800c52c:	2318      	movs	r3, #24
 800c52e:	fb94 f4f3 	sdiv	r4, r4, r3
 800c532:	f06f 0317 	mvn.w	r3, #23
 800c536:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c53a:	fb04 3303 	mla	r3, r4, r3, r3
 800c53e:	eb03 0a02 	add.w	sl, r3, r2
 800c542:	9b04      	ldr	r3, [sp, #16]
 800c544:	9a07      	ldr	r2, [sp, #28]
 800c546:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c820 <__kernel_rem_pio2+0x318>
 800c54a:	eb03 0802 	add.w	r8, r3, r2
 800c54e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c550:	1aa7      	subs	r7, r4, r2
 800c552:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c556:	ae22      	add	r6, sp, #136	; 0x88
 800c558:	2500      	movs	r5, #0
 800c55a:	4545      	cmp	r5, r8
 800c55c:	dd13      	ble.n	800c586 <__kernel_rem_pio2+0x7e>
 800c55e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800c820 <__kernel_rem_pio2+0x318>
 800c562:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c566:	2600      	movs	r6, #0
 800c568:	9b04      	ldr	r3, [sp, #16]
 800c56a:	429e      	cmp	r6, r3
 800c56c:	dc32      	bgt.n	800c5d4 <__kernel_rem_pio2+0xcc>
 800c56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c570:	9302      	str	r3, [sp, #8]
 800c572:	9b08      	ldr	r3, [sp, #32]
 800c574:	199d      	adds	r5, r3, r6
 800c576:	ab22      	add	r3, sp, #136	; 0x88
 800c578:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c57c:	9306      	str	r3, [sp, #24]
 800c57e:	ec59 8b18 	vmov	r8, r9, d8
 800c582:	2700      	movs	r7, #0
 800c584:	e01f      	b.n	800c5c6 <__kernel_rem_pio2+0xbe>
 800c586:	42ef      	cmn	r7, r5
 800c588:	d407      	bmi.n	800c59a <__kernel_rem_pio2+0x92>
 800c58a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c58e:	f7f3 fff1 	bl	8000574 <__aeabi_i2d>
 800c592:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c596:	3501      	adds	r5, #1
 800c598:	e7df      	b.n	800c55a <__kernel_rem_pio2+0x52>
 800c59a:	ec51 0b18 	vmov	r0, r1, d8
 800c59e:	e7f8      	b.n	800c592 <__kernel_rem_pio2+0x8a>
 800c5a0:	9906      	ldr	r1, [sp, #24]
 800c5a2:	9d02      	ldr	r5, [sp, #8]
 800c5a4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c5a8:	9106      	str	r1, [sp, #24]
 800c5aa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800c5ae:	9502      	str	r5, [sp, #8]
 800c5b0:	f7f4 f84a 	bl	8000648 <__aeabi_dmul>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	4640      	mov	r0, r8
 800c5ba:	4649      	mov	r1, r9
 800c5bc:	f7f3 fe8e 	bl	80002dc <__adddf3>
 800c5c0:	3701      	adds	r7, #1
 800c5c2:	4680      	mov	r8, r0
 800c5c4:	4689      	mov	r9, r1
 800c5c6:	9b07      	ldr	r3, [sp, #28]
 800c5c8:	429f      	cmp	r7, r3
 800c5ca:	dde9      	ble.n	800c5a0 <__kernel_rem_pio2+0x98>
 800c5cc:	e8eb 8902 	strd	r8, r9, [fp], #8
 800c5d0:	3601      	adds	r6, #1
 800c5d2:	e7c9      	b.n	800c568 <__kernel_rem_pio2+0x60>
 800c5d4:	9b04      	ldr	r3, [sp, #16]
 800c5d6:	aa0e      	add	r2, sp, #56	; 0x38
 800c5d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c5dc:	930c      	str	r3, [sp, #48]	; 0x30
 800c5de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c5e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c5e4:	9c04      	ldr	r4, [sp, #16]
 800c5e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5e8:	ab9a      	add	r3, sp, #616	; 0x268
 800c5ea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800c5ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c5f6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800c5fa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800c5fe:	ab9a      	add	r3, sp, #616	; 0x268
 800c600:	445b      	add	r3, fp
 800c602:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800c606:	2500      	movs	r5, #0
 800c608:	1b63      	subs	r3, r4, r5
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	dc78      	bgt.n	800c700 <__kernel_rem_pio2+0x1f8>
 800c60e:	4650      	mov	r0, sl
 800c610:	ec49 8b10 	vmov	d0, r8, r9
 800c614:	f000 fc98 	bl	800cf48 <scalbn>
 800c618:	ec57 6b10 	vmov	r6, r7, d0
 800c61c:	2200      	movs	r2, #0
 800c61e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c622:	ee10 0a10 	vmov	r0, s0
 800c626:	4639      	mov	r1, r7
 800c628:	f7f4 f80e 	bl	8000648 <__aeabi_dmul>
 800c62c:	ec41 0b10 	vmov	d0, r0, r1
 800c630:	f000 fb76 	bl	800cd20 <floor>
 800c634:	2200      	movs	r2, #0
 800c636:	ec51 0b10 	vmov	r0, r1, d0
 800c63a:	4b7e      	ldr	r3, [pc, #504]	; (800c834 <__kernel_rem_pio2+0x32c>)
 800c63c:	f7f4 f804 	bl	8000648 <__aeabi_dmul>
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	4630      	mov	r0, r6
 800c646:	4639      	mov	r1, r7
 800c648:	f7f3 fe46 	bl	80002d8 <__aeabi_dsub>
 800c64c:	460f      	mov	r7, r1
 800c64e:	4606      	mov	r6, r0
 800c650:	f7f4 faaa 	bl	8000ba8 <__aeabi_d2iz>
 800c654:	9006      	str	r0, [sp, #24]
 800c656:	f7f3 ff8d 	bl	8000574 <__aeabi_i2d>
 800c65a:	4602      	mov	r2, r0
 800c65c:	460b      	mov	r3, r1
 800c65e:	4630      	mov	r0, r6
 800c660:	4639      	mov	r1, r7
 800c662:	f7f3 fe39 	bl	80002d8 <__aeabi_dsub>
 800c666:	f1ba 0f00 	cmp.w	sl, #0
 800c66a:	4606      	mov	r6, r0
 800c66c:	460f      	mov	r7, r1
 800c66e:	dd6c      	ble.n	800c74a <__kernel_rem_pio2+0x242>
 800c670:	1e62      	subs	r2, r4, #1
 800c672:	ab0e      	add	r3, sp, #56	; 0x38
 800c674:	f1ca 0118 	rsb	r1, sl, #24
 800c678:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c67c:	9d06      	ldr	r5, [sp, #24]
 800c67e:	fa40 f301 	asr.w	r3, r0, r1
 800c682:	441d      	add	r5, r3
 800c684:	408b      	lsls	r3, r1
 800c686:	1ac0      	subs	r0, r0, r3
 800c688:	ab0e      	add	r3, sp, #56	; 0x38
 800c68a:	9506      	str	r5, [sp, #24]
 800c68c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c690:	f1ca 0317 	rsb	r3, sl, #23
 800c694:	fa40 f303 	asr.w	r3, r0, r3
 800c698:	9302      	str	r3, [sp, #8]
 800c69a:	9b02      	ldr	r3, [sp, #8]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	dd62      	ble.n	800c766 <__kernel_rem_pio2+0x25e>
 800c6a0:	9b06      	ldr	r3, [sp, #24]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	9306      	str	r3, [sp, #24]
 800c6a8:	4615      	mov	r5, r2
 800c6aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c6ae:	4294      	cmp	r4, r2
 800c6b0:	f300 8095 	bgt.w	800c7de <__kernel_rem_pio2+0x2d6>
 800c6b4:	f1ba 0f00 	cmp.w	sl, #0
 800c6b8:	dd07      	ble.n	800c6ca <__kernel_rem_pio2+0x1c2>
 800c6ba:	f1ba 0f01 	cmp.w	sl, #1
 800c6be:	f000 80a2 	beq.w	800c806 <__kernel_rem_pio2+0x2fe>
 800c6c2:	f1ba 0f02 	cmp.w	sl, #2
 800c6c6:	f000 80c1 	beq.w	800c84c <__kernel_rem_pio2+0x344>
 800c6ca:	9b02      	ldr	r3, [sp, #8]
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d14a      	bne.n	800c766 <__kernel_rem_pio2+0x25e>
 800c6d0:	4632      	mov	r2, r6
 800c6d2:	463b      	mov	r3, r7
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	4958      	ldr	r1, [pc, #352]	; (800c838 <__kernel_rem_pio2+0x330>)
 800c6d8:	f7f3 fdfe 	bl	80002d8 <__aeabi_dsub>
 800c6dc:	4606      	mov	r6, r0
 800c6de:	460f      	mov	r7, r1
 800c6e0:	2d00      	cmp	r5, #0
 800c6e2:	d040      	beq.n	800c766 <__kernel_rem_pio2+0x25e>
 800c6e4:	4650      	mov	r0, sl
 800c6e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c828 <__kernel_rem_pio2+0x320>
 800c6ea:	f000 fc2d 	bl	800cf48 <scalbn>
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	4639      	mov	r1, r7
 800c6f2:	ec53 2b10 	vmov	r2, r3, d0
 800c6f6:	f7f3 fdef 	bl	80002d8 <__aeabi_dsub>
 800c6fa:	4606      	mov	r6, r0
 800c6fc:	460f      	mov	r7, r1
 800c6fe:	e032      	b.n	800c766 <__kernel_rem_pio2+0x25e>
 800c700:	2200      	movs	r2, #0
 800c702:	4b4e      	ldr	r3, [pc, #312]	; (800c83c <__kernel_rem_pio2+0x334>)
 800c704:	4640      	mov	r0, r8
 800c706:	4649      	mov	r1, r9
 800c708:	f7f3 ff9e 	bl	8000648 <__aeabi_dmul>
 800c70c:	f7f4 fa4c 	bl	8000ba8 <__aeabi_d2iz>
 800c710:	f7f3 ff30 	bl	8000574 <__aeabi_i2d>
 800c714:	2200      	movs	r2, #0
 800c716:	4b4a      	ldr	r3, [pc, #296]	; (800c840 <__kernel_rem_pio2+0x338>)
 800c718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c71c:	f7f3 ff94 	bl	8000648 <__aeabi_dmul>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4640      	mov	r0, r8
 800c726:	4649      	mov	r1, r9
 800c728:	f7f3 fdd6 	bl	80002d8 <__aeabi_dsub>
 800c72c:	f7f4 fa3c 	bl	8000ba8 <__aeabi_d2iz>
 800c730:	ab0e      	add	r3, sp, #56	; 0x38
 800c732:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800c736:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c73a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c73e:	f7f3 fdcd 	bl	80002dc <__adddf3>
 800c742:	3501      	adds	r5, #1
 800c744:	4680      	mov	r8, r0
 800c746:	4689      	mov	r9, r1
 800c748:	e75e      	b.n	800c608 <__kernel_rem_pio2+0x100>
 800c74a:	d105      	bne.n	800c758 <__kernel_rem_pio2+0x250>
 800c74c:	1e63      	subs	r3, r4, #1
 800c74e:	aa0e      	add	r2, sp, #56	; 0x38
 800c750:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c754:	15c3      	asrs	r3, r0, #23
 800c756:	e79f      	b.n	800c698 <__kernel_rem_pio2+0x190>
 800c758:	2200      	movs	r2, #0
 800c75a:	4b3a      	ldr	r3, [pc, #232]	; (800c844 <__kernel_rem_pio2+0x33c>)
 800c75c:	f7f4 f9fa 	bl	8000b54 <__aeabi_dcmpge>
 800c760:	2800      	cmp	r0, #0
 800c762:	d139      	bne.n	800c7d8 <__kernel_rem_pio2+0x2d0>
 800c764:	9002      	str	r0, [sp, #8]
 800c766:	2200      	movs	r2, #0
 800c768:	2300      	movs	r3, #0
 800c76a:	4630      	mov	r0, r6
 800c76c:	4639      	mov	r1, r7
 800c76e:	f7f4 f9d3 	bl	8000b18 <__aeabi_dcmpeq>
 800c772:	2800      	cmp	r0, #0
 800c774:	f000 80c7 	beq.w	800c906 <__kernel_rem_pio2+0x3fe>
 800c778:	1e65      	subs	r5, r4, #1
 800c77a:	462b      	mov	r3, r5
 800c77c:	2200      	movs	r2, #0
 800c77e:	9904      	ldr	r1, [sp, #16]
 800c780:	428b      	cmp	r3, r1
 800c782:	da6a      	bge.n	800c85a <__kernel_rem_pio2+0x352>
 800c784:	2a00      	cmp	r2, #0
 800c786:	f000 8088 	beq.w	800c89a <__kernel_rem_pio2+0x392>
 800c78a:	ab0e      	add	r3, sp, #56	; 0x38
 800c78c:	f1aa 0a18 	sub.w	sl, sl, #24
 800c790:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c794:	2b00      	cmp	r3, #0
 800c796:	f000 80b4 	beq.w	800c902 <__kernel_rem_pio2+0x3fa>
 800c79a:	4650      	mov	r0, sl
 800c79c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800c828 <__kernel_rem_pio2+0x320>
 800c7a0:	f000 fbd2 	bl	800cf48 <scalbn>
 800c7a4:	00ec      	lsls	r4, r5, #3
 800c7a6:	ab72      	add	r3, sp, #456	; 0x1c8
 800c7a8:	191e      	adds	r6, r3, r4
 800c7aa:	ec59 8b10 	vmov	r8, r9, d0
 800c7ae:	f106 0a08 	add.w	sl, r6, #8
 800c7b2:	462f      	mov	r7, r5
 800c7b4:	2f00      	cmp	r7, #0
 800c7b6:	f280 80df 	bge.w	800c978 <__kernel_rem_pio2+0x470>
 800c7ba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800c820 <__kernel_rem_pio2+0x318>
 800c7be:	f04f 0a00 	mov.w	sl, #0
 800c7c2:	eba5 030a 	sub.w	r3, r5, sl
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f2c0 810a 	blt.w	800c9e0 <__kernel_rem_pio2+0x4d8>
 800c7cc:	f8df b078 	ldr.w	fp, [pc, #120]	; 800c848 <__kernel_rem_pio2+0x340>
 800c7d0:	ec59 8b18 	vmov	r8, r9, d8
 800c7d4:	2700      	movs	r7, #0
 800c7d6:	e0f5      	b.n	800c9c4 <__kernel_rem_pio2+0x4bc>
 800c7d8:	2302      	movs	r3, #2
 800c7da:	9302      	str	r3, [sp, #8]
 800c7dc:	e760      	b.n	800c6a0 <__kernel_rem_pio2+0x198>
 800c7de:	ab0e      	add	r3, sp, #56	; 0x38
 800c7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e4:	b94d      	cbnz	r5, 800c7fa <__kernel_rem_pio2+0x2f2>
 800c7e6:	b12b      	cbz	r3, 800c7f4 <__kernel_rem_pio2+0x2ec>
 800c7e8:	a80e      	add	r0, sp, #56	; 0x38
 800c7ea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c7ee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	3201      	adds	r2, #1
 800c7f6:	461d      	mov	r5, r3
 800c7f8:	e759      	b.n	800c6ae <__kernel_rem_pio2+0x1a6>
 800c7fa:	a80e      	add	r0, sp, #56	; 0x38
 800c7fc:	1acb      	subs	r3, r1, r3
 800c7fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c802:	462b      	mov	r3, r5
 800c804:	e7f6      	b.n	800c7f4 <__kernel_rem_pio2+0x2ec>
 800c806:	1e62      	subs	r2, r4, #1
 800c808:	ab0e      	add	r3, sp, #56	; 0x38
 800c80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c80e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c812:	a90e      	add	r1, sp, #56	; 0x38
 800c814:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c818:	e757      	b.n	800c6ca <__kernel_rem_pio2+0x1c2>
 800c81a:	bf00      	nop
 800c81c:	f3af 8000 	nop.w
	...
 800c82c:	3ff00000 	.word	0x3ff00000
 800c830:	0800d730 	.word	0x0800d730
 800c834:	40200000 	.word	0x40200000
 800c838:	3ff00000 	.word	0x3ff00000
 800c83c:	3e700000 	.word	0x3e700000
 800c840:	41700000 	.word	0x41700000
 800c844:	3fe00000 	.word	0x3fe00000
 800c848:	0800d6f0 	.word	0x0800d6f0
 800c84c:	1e62      	subs	r2, r4, #1
 800c84e:	ab0e      	add	r3, sp, #56	; 0x38
 800c850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c854:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c858:	e7db      	b.n	800c812 <__kernel_rem_pio2+0x30a>
 800c85a:	a90e      	add	r1, sp, #56	; 0x38
 800c85c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c860:	3b01      	subs	r3, #1
 800c862:	430a      	orrs	r2, r1
 800c864:	e78b      	b.n	800c77e <__kernel_rem_pio2+0x276>
 800c866:	3301      	adds	r3, #1
 800c868:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c86c:	2900      	cmp	r1, #0
 800c86e:	d0fa      	beq.n	800c866 <__kernel_rem_pio2+0x35e>
 800c870:	9a08      	ldr	r2, [sp, #32]
 800c872:	4422      	add	r2, r4
 800c874:	00d2      	lsls	r2, r2, #3
 800c876:	a922      	add	r1, sp, #136	; 0x88
 800c878:	18e3      	adds	r3, r4, r3
 800c87a:	9206      	str	r2, [sp, #24]
 800c87c:	440a      	add	r2, r1
 800c87e:	9302      	str	r3, [sp, #8]
 800c880:	f10b 0108 	add.w	r1, fp, #8
 800c884:	f102 0308 	add.w	r3, r2, #8
 800c888:	1c66      	adds	r6, r4, #1
 800c88a:	910a      	str	r1, [sp, #40]	; 0x28
 800c88c:	2500      	movs	r5, #0
 800c88e:	930d      	str	r3, [sp, #52]	; 0x34
 800c890:	9b02      	ldr	r3, [sp, #8]
 800c892:	42b3      	cmp	r3, r6
 800c894:	da04      	bge.n	800c8a0 <__kernel_rem_pio2+0x398>
 800c896:	461c      	mov	r4, r3
 800c898:	e6a6      	b.n	800c5e8 <__kernel_rem_pio2+0xe0>
 800c89a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c89c:	2301      	movs	r3, #1
 800c89e:	e7e3      	b.n	800c868 <__kernel_rem_pio2+0x360>
 800c8a0:	9b06      	ldr	r3, [sp, #24]
 800c8a2:	18ef      	adds	r7, r5, r3
 800c8a4:	ab22      	add	r3, sp, #136	; 0x88
 800c8a6:	441f      	add	r7, r3
 800c8a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c8ae:	f7f3 fe61 	bl	8000574 <__aeabi_i2d>
 800c8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8b4:	461c      	mov	r4, r3
 800c8b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8b8:	e9c7 0100 	strd	r0, r1, [r7]
 800c8bc:	eb03 0b05 	add.w	fp, r3, r5
 800c8c0:	2700      	movs	r7, #0
 800c8c2:	f04f 0800 	mov.w	r8, #0
 800c8c6:	f04f 0900 	mov.w	r9, #0
 800c8ca:	9b07      	ldr	r3, [sp, #28]
 800c8cc:	429f      	cmp	r7, r3
 800c8ce:	dd08      	ble.n	800c8e2 <__kernel_rem_pio2+0x3da>
 800c8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8d2:	aa72      	add	r2, sp, #456	; 0x1c8
 800c8d4:	18eb      	adds	r3, r5, r3
 800c8d6:	4413      	add	r3, r2
 800c8d8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800c8dc:	3601      	adds	r6, #1
 800c8de:	3508      	adds	r5, #8
 800c8e0:	e7d6      	b.n	800c890 <__kernel_rem_pio2+0x388>
 800c8e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c8e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c8ea:	f7f3 fead 	bl	8000648 <__aeabi_dmul>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	4640      	mov	r0, r8
 800c8f4:	4649      	mov	r1, r9
 800c8f6:	f7f3 fcf1 	bl	80002dc <__adddf3>
 800c8fa:	3701      	adds	r7, #1
 800c8fc:	4680      	mov	r8, r0
 800c8fe:	4689      	mov	r9, r1
 800c900:	e7e3      	b.n	800c8ca <__kernel_rem_pio2+0x3c2>
 800c902:	3d01      	subs	r5, #1
 800c904:	e741      	b.n	800c78a <__kernel_rem_pio2+0x282>
 800c906:	f1ca 0000 	rsb	r0, sl, #0
 800c90a:	ec47 6b10 	vmov	d0, r6, r7
 800c90e:	f000 fb1b 	bl	800cf48 <scalbn>
 800c912:	ec57 6b10 	vmov	r6, r7, d0
 800c916:	2200      	movs	r2, #0
 800c918:	4b99      	ldr	r3, [pc, #612]	; (800cb80 <__kernel_rem_pio2+0x678>)
 800c91a:	ee10 0a10 	vmov	r0, s0
 800c91e:	4639      	mov	r1, r7
 800c920:	f7f4 f918 	bl	8000b54 <__aeabi_dcmpge>
 800c924:	b1f8      	cbz	r0, 800c966 <__kernel_rem_pio2+0x45e>
 800c926:	2200      	movs	r2, #0
 800c928:	4b96      	ldr	r3, [pc, #600]	; (800cb84 <__kernel_rem_pio2+0x67c>)
 800c92a:	4630      	mov	r0, r6
 800c92c:	4639      	mov	r1, r7
 800c92e:	f7f3 fe8b 	bl	8000648 <__aeabi_dmul>
 800c932:	f7f4 f939 	bl	8000ba8 <__aeabi_d2iz>
 800c936:	4680      	mov	r8, r0
 800c938:	f7f3 fe1c 	bl	8000574 <__aeabi_i2d>
 800c93c:	2200      	movs	r2, #0
 800c93e:	4b90      	ldr	r3, [pc, #576]	; (800cb80 <__kernel_rem_pio2+0x678>)
 800c940:	f7f3 fe82 	bl	8000648 <__aeabi_dmul>
 800c944:	460b      	mov	r3, r1
 800c946:	4602      	mov	r2, r0
 800c948:	4639      	mov	r1, r7
 800c94a:	4630      	mov	r0, r6
 800c94c:	f7f3 fcc4 	bl	80002d8 <__aeabi_dsub>
 800c950:	f7f4 f92a 	bl	8000ba8 <__aeabi_d2iz>
 800c954:	1c65      	adds	r5, r4, #1
 800c956:	ab0e      	add	r3, sp, #56	; 0x38
 800c958:	f10a 0a18 	add.w	sl, sl, #24
 800c95c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c960:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c964:	e719      	b.n	800c79a <__kernel_rem_pio2+0x292>
 800c966:	4630      	mov	r0, r6
 800c968:	4639      	mov	r1, r7
 800c96a:	f7f4 f91d 	bl	8000ba8 <__aeabi_d2iz>
 800c96e:	ab0e      	add	r3, sp, #56	; 0x38
 800c970:	4625      	mov	r5, r4
 800c972:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c976:	e710      	b.n	800c79a <__kernel_rem_pio2+0x292>
 800c978:	ab0e      	add	r3, sp, #56	; 0x38
 800c97a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c97e:	f7f3 fdf9 	bl	8000574 <__aeabi_i2d>
 800c982:	4642      	mov	r2, r8
 800c984:	464b      	mov	r3, r9
 800c986:	f7f3 fe5f 	bl	8000648 <__aeabi_dmul>
 800c98a:	2200      	movs	r2, #0
 800c98c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800c990:	4b7c      	ldr	r3, [pc, #496]	; (800cb84 <__kernel_rem_pio2+0x67c>)
 800c992:	4640      	mov	r0, r8
 800c994:	4649      	mov	r1, r9
 800c996:	f7f3 fe57 	bl	8000648 <__aeabi_dmul>
 800c99a:	3f01      	subs	r7, #1
 800c99c:	4680      	mov	r8, r0
 800c99e:	4689      	mov	r9, r1
 800c9a0:	e708      	b.n	800c7b4 <__kernel_rem_pio2+0x2ac>
 800c9a2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800c9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9aa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800c9ae:	f7f3 fe4b 	bl	8000648 <__aeabi_dmul>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	4640      	mov	r0, r8
 800c9b8:	4649      	mov	r1, r9
 800c9ba:	f7f3 fc8f 	bl	80002dc <__adddf3>
 800c9be:	3701      	adds	r7, #1
 800c9c0:	4680      	mov	r8, r0
 800c9c2:	4689      	mov	r9, r1
 800c9c4:	9b04      	ldr	r3, [sp, #16]
 800c9c6:	429f      	cmp	r7, r3
 800c9c8:	dc01      	bgt.n	800c9ce <__kernel_rem_pio2+0x4c6>
 800c9ca:	45ba      	cmp	sl, r7
 800c9cc:	dae9      	bge.n	800c9a2 <__kernel_rem_pio2+0x49a>
 800c9ce:	ab4a      	add	r3, sp, #296	; 0x128
 800c9d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c9d4:	e9c3 8900 	strd	r8, r9, [r3]
 800c9d8:	f10a 0a01 	add.w	sl, sl, #1
 800c9dc:	3e08      	subs	r6, #8
 800c9de:	e6f0      	b.n	800c7c2 <__kernel_rem_pio2+0x2ba>
 800c9e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c9e2:	2b03      	cmp	r3, #3
 800c9e4:	d85b      	bhi.n	800ca9e <__kernel_rem_pio2+0x596>
 800c9e6:	e8df f003 	tbb	[pc, r3]
 800c9ea:	264a      	.short	0x264a
 800c9ec:	0226      	.short	0x0226
 800c9ee:	ab9a      	add	r3, sp, #616	; 0x268
 800c9f0:	441c      	add	r4, r3
 800c9f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c9f6:	46a2      	mov	sl, r4
 800c9f8:	46ab      	mov	fp, r5
 800c9fa:	f1bb 0f00 	cmp.w	fp, #0
 800c9fe:	dc6c      	bgt.n	800cada <__kernel_rem_pio2+0x5d2>
 800ca00:	46a2      	mov	sl, r4
 800ca02:	46ab      	mov	fp, r5
 800ca04:	f1bb 0f01 	cmp.w	fp, #1
 800ca08:	f300 8086 	bgt.w	800cb18 <__kernel_rem_pio2+0x610>
 800ca0c:	2000      	movs	r0, #0
 800ca0e:	2100      	movs	r1, #0
 800ca10:	2d01      	cmp	r5, #1
 800ca12:	f300 80a0 	bgt.w	800cb56 <__kernel_rem_pio2+0x64e>
 800ca16:	9b02      	ldr	r3, [sp, #8]
 800ca18:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ca1c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f040 809e 	bne.w	800cb62 <__kernel_rem_pio2+0x65a>
 800ca26:	9b01      	ldr	r3, [sp, #4]
 800ca28:	e9c3 7800 	strd	r7, r8, [r3]
 800ca2c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ca30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ca34:	e033      	b.n	800ca9e <__kernel_rem_pio2+0x596>
 800ca36:	3408      	adds	r4, #8
 800ca38:	ab4a      	add	r3, sp, #296	; 0x128
 800ca3a:	441c      	add	r4, r3
 800ca3c:	462e      	mov	r6, r5
 800ca3e:	2000      	movs	r0, #0
 800ca40:	2100      	movs	r1, #0
 800ca42:	2e00      	cmp	r6, #0
 800ca44:	da3a      	bge.n	800cabc <__kernel_rem_pio2+0x5b4>
 800ca46:	9b02      	ldr	r3, [sp, #8]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d03d      	beq.n	800cac8 <__kernel_rem_pio2+0x5c0>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca52:	9c01      	ldr	r4, [sp, #4]
 800ca54:	e9c4 2300 	strd	r2, r3, [r4]
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ca60:	f7f3 fc3a 	bl	80002d8 <__aeabi_dsub>
 800ca64:	ae4c      	add	r6, sp, #304	; 0x130
 800ca66:	2401      	movs	r4, #1
 800ca68:	42a5      	cmp	r5, r4
 800ca6a:	da30      	bge.n	800cace <__kernel_rem_pio2+0x5c6>
 800ca6c:	9b02      	ldr	r3, [sp, #8]
 800ca6e:	b113      	cbz	r3, 800ca76 <__kernel_rem_pio2+0x56e>
 800ca70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca74:	4619      	mov	r1, r3
 800ca76:	9b01      	ldr	r3, [sp, #4]
 800ca78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ca7c:	e00f      	b.n	800ca9e <__kernel_rem_pio2+0x596>
 800ca7e:	ab9a      	add	r3, sp, #616	; 0x268
 800ca80:	441c      	add	r4, r3
 800ca82:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ca86:	2000      	movs	r0, #0
 800ca88:	2100      	movs	r1, #0
 800ca8a:	2d00      	cmp	r5, #0
 800ca8c:	da10      	bge.n	800cab0 <__kernel_rem_pio2+0x5a8>
 800ca8e:	9b02      	ldr	r3, [sp, #8]
 800ca90:	b113      	cbz	r3, 800ca98 <__kernel_rem_pio2+0x590>
 800ca92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca96:	4619      	mov	r1, r3
 800ca98:	9b01      	ldr	r3, [sp, #4]
 800ca9a:	e9c3 0100 	strd	r0, r1, [r3]
 800ca9e:	9b06      	ldr	r3, [sp, #24]
 800caa0:	f003 0007 	and.w	r0, r3, #7
 800caa4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800caa8:	ecbd 8b02 	vpop	{d8}
 800caac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cab4:	f7f3 fc12 	bl	80002dc <__adddf3>
 800cab8:	3d01      	subs	r5, #1
 800caba:	e7e6      	b.n	800ca8a <__kernel_rem_pio2+0x582>
 800cabc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cac0:	f7f3 fc0c 	bl	80002dc <__adddf3>
 800cac4:	3e01      	subs	r6, #1
 800cac6:	e7bc      	b.n	800ca42 <__kernel_rem_pio2+0x53a>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	e7c1      	b.n	800ca52 <__kernel_rem_pio2+0x54a>
 800cace:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800cad2:	f7f3 fc03 	bl	80002dc <__adddf3>
 800cad6:	3401      	adds	r4, #1
 800cad8:	e7c6      	b.n	800ca68 <__kernel_rem_pio2+0x560>
 800cada:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800cade:	ed3a 7b02 	vldmdb	sl!, {d7}
 800cae2:	4640      	mov	r0, r8
 800cae4:	ec53 2b17 	vmov	r2, r3, d7
 800cae8:	4649      	mov	r1, r9
 800caea:	ed8d 7b04 	vstr	d7, [sp, #16]
 800caee:	f7f3 fbf5 	bl	80002dc <__adddf3>
 800caf2:	4602      	mov	r2, r0
 800caf4:	460b      	mov	r3, r1
 800caf6:	4606      	mov	r6, r0
 800caf8:	460f      	mov	r7, r1
 800cafa:	4640      	mov	r0, r8
 800cafc:	4649      	mov	r1, r9
 800cafe:	f7f3 fbeb 	bl	80002d8 <__aeabi_dsub>
 800cb02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb06:	f7f3 fbe9 	bl	80002dc <__adddf3>
 800cb0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb0e:	e9ca 0100 	strd	r0, r1, [sl]
 800cb12:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800cb16:	e770      	b.n	800c9fa <__kernel_rem_pio2+0x4f2>
 800cb18:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800cb1c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800cb20:	4630      	mov	r0, r6
 800cb22:	ec53 2b17 	vmov	r2, r3, d7
 800cb26:	4639      	mov	r1, r7
 800cb28:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cb2c:	f7f3 fbd6 	bl	80002dc <__adddf3>
 800cb30:	4602      	mov	r2, r0
 800cb32:	460b      	mov	r3, r1
 800cb34:	4680      	mov	r8, r0
 800cb36:	4689      	mov	r9, r1
 800cb38:	4630      	mov	r0, r6
 800cb3a:	4639      	mov	r1, r7
 800cb3c:	f7f3 fbcc 	bl	80002d8 <__aeabi_dsub>
 800cb40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb44:	f7f3 fbca 	bl	80002dc <__adddf3>
 800cb48:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb4c:	e9ca 0100 	strd	r0, r1, [sl]
 800cb50:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800cb54:	e756      	b.n	800ca04 <__kernel_rem_pio2+0x4fc>
 800cb56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cb5a:	f7f3 fbbf 	bl	80002dc <__adddf3>
 800cb5e:	3d01      	subs	r5, #1
 800cb60:	e756      	b.n	800ca10 <__kernel_rem_pio2+0x508>
 800cb62:	9b01      	ldr	r3, [sp, #4]
 800cb64:	9a01      	ldr	r2, [sp, #4]
 800cb66:	601f      	str	r7, [r3, #0]
 800cb68:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800cb6c:	605c      	str	r4, [r3, #4]
 800cb6e:	609d      	str	r5, [r3, #8]
 800cb70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cb74:	60d3      	str	r3, [r2, #12]
 800cb76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb7a:	6110      	str	r0, [r2, #16]
 800cb7c:	6153      	str	r3, [r2, #20]
 800cb7e:	e78e      	b.n	800ca9e <__kernel_rem_pio2+0x596>
 800cb80:	41700000 	.word	0x41700000
 800cb84:	3e700000 	.word	0x3e700000

0800cb88 <__kernel_sin>:
 800cb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb8c:	ec55 4b10 	vmov	r4, r5, d0
 800cb90:	b085      	sub	sp, #20
 800cb92:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cb96:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cb9a:	ed8d 1b00 	vstr	d1, [sp]
 800cb9e:	9002      	str	r0, [sp, #8]
 800cba0:	da06      	bge.n	800cbb0 <__kernel_sin+0x28>
 800cba2:	ee10 0a10 	vmov	r0, s0
 800cba6:	4629      	mov	r1, r5
 800cba8:	f7f3 fffe 	bl	8000ba8 <__aeabi_d2iz>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	d051      	beq.n	800cc54 <__kernel_sin+0xcc>
 800cbb0:	4622      	mov	r2, r4
 800cbb2:	462b      	mov	r3, r5
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	f7f3 fd46 	bl	8000648 <__aeabi_dmul>
 800cbbc:	4682      	mov	sl, r0
 800cbbe:	468b      	mov	fp, r1
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	f7f3 fd3e 	bl	8000648 <__aeabi_dmul>
 800cbcc:	a341      	add	r3, pc, #260	; (adr r3, 800ccd4 <__kernel_sin+0x14c>)
 800cbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd2:	4680      	mov	r8, r0
 800cbd4:	4689      	mov	r9, r1
 800cbd6:	4650      	mov	r0, sl
 800cbd8:	4659      	mov	r1, fp
 800cbda:	f7f3 fd35 	bl	8000648 <__aeabi_dmul>
 800cbde:	a33f      	add	r3, pc, #252	; (adr r3, 800ccdc <__kernel_sin+0x154>)
 800cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe4:	f7f3 fb78 	bl	80002d8 <__aeabi_dsub>
 800cbe8:	4652      	mov	r2, sl
 800cbea:	465b      	mov	r3, fp
 800cbec:	f7f3 fd2c 	bl	8000648 <__aeabi_dmul>
 800cbf0:	a33c      	add	r3, pc, #240	; (adr r3, 800cce4 <__kernel_sin+0x15c>)
 800cbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf6:	f7f3 fb71 	bl	80002dc <__adddf3>
 800cbfa:	4652      	mov	r2, sl
 800cbfc:	465b      	mov	r3, fp
 800cbfe:	f7f3 fd23 	bl	8000648 <__aeabi_dmul>
 800cc02:	a33a      	add	r3, pc, #232	; (adr r3, 800ccec <__kernel_sin+0x164>)
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	f7f3 fb66 	bl	80002d8 <__aeabi_dsub>
 800cc0c:	4652      	mov	r2, sl
 800cc0e:	465b      	mov	r3, fp
 800cc10:	f7f3 fd1a 	bl	8000648 <__aeabi_dmul>
 800cc14:	a337      	add	r3, pc, #220	; (adr r3, 800ccf4 <__kernel_sin+0x16c>)
 800cc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1a:	f7f3 fb5f 	bl	80002dc <__adddf3>
 800cc1e:	9b02      	ldr	r3, [sp, #8]
 800cc20:	4606      	mov	r6, r0
 800cc22:	460f      	mov	r7, r1
 800cc24:	b9db      	cbnz	r3, 800cc5e <__kernel_sin+0xd6>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	4650      	mov	r0, sl
 800cc2c:	4659      	mov	r1, fp
 800cc2e:	f7f3 fd0b 	bl	8000648 <__aeabi_dmul>
 800cc32:	a325      	add	r3, pc, #148	; (adr r3, 800ccc8 <__kernel_sin+0x140>)
 800cc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc38:	f7f3 fb4e 	bl	80002d8 <__aeabi_dsub>
 800cc3c:	4642      	mov	r2, r8
 800cc3e:	464b      	mov	r3, r9
 800cc40:	f7f3 fd02 	bl	8000648 <__aeabi_dmul>
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	4620      	mov	r0, r4
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	f7f3 fb46 	bl	80002dc <__adddf3>
 800cc50:	4604      	mov	r4, r0
 800cc52:	460d      	mov	r5, r1
 800cc54:	ec45 4b10 	vmov	d0, r4, r5
 800cc58:	b005      	add	sp, #20
 800cc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc5e:	2200      	movs	r2, #0
 800cc60:	4b1b      	ldr	r3, [pc, #108]	; (800ccd0 <__kernel_sin+0x148>)
 800cc62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc66:	f7f3 fcef 	bl	8000648 <__aeabi_dmul>
 800cc6a:	4632      	mov	r2, r6
 800cc6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc70:	463b      	mov	r3, r7
 800cc72:	4640      	mov	r0, r8
 800cc74:	4649      	mov	r1, r9
 800cc76:	f7f3 fce7 	bl	8000648 <__aeabi_dmul>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc82:	f7f3 fb29 	bl	80002d8 <__aeabi_dsub>
 800cc86:	4652      	mov	r2, sl
 800cc88:	465b      	mov	r3, fp
 800cc8a:	f7f3 fcdd 	bl	8000648 <__aeabi_dmul>
 800cc8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc92:	f7f3 fb21 	bl	80002d8 <__aeabi_dsub>
 800cc96:	a30c      	add	r3, pc, #48	; (adr r3, 800ccc8 <__kernel_sin+0x140>)
 800cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9c:	4606      	mov	r6, r0
 800cc9e:	460f      	mov	r7, r1
 800cca0:	4640      	mov	r0, r8
 800cca2:	4649      	mov	r1, r9
 800cca4:	f7f3 fcd0 	bl	8000648 <__aeabi_dmul>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	460b      	mov	r3, r1
 800ccac:	4630      	mov	r0, r6
 800ccae:	4639      	mov	r1, r7
 800ccb0:	f7f3 fb14 	bl	80002dc <__adddf3>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	4620      	mov	r0, r4
 800ccba:	4629      	mov	r1, r5
 800ccbc:	f7f3 fb0c 	bl	80002d8 <__aeabi_dsub>
 800ccc0:	e7c6      	b.n	800cc50 <__kernel_sin+0xc8>
 800ccc2:	bf00      	nop
 800ccc4:	f3af 8000 	nop.w
 800ccc8:	55555549 	.word	0x55555549
 800cccc:	3fc55555 	.word	0x3fc55555
 800ccd0:	3fe00000 	.word	0x3fe00000
 800ccd4:	5acfd57c 	.word	0x5acfd57c
 800ccd8:	3de5d93a 	.word	0x3de5d93a
 800ccdc:	8a2b9ceb 	.word	0x8a2b9ceb
 800cce0:	3e5ae5e6 	.word	0x3e5ae5e6
 800cce4:	57b1fe7d 	.word	0x57b1fe7d
 800cce8:	3ec71de3 	.word	0x3ec71de3
 800ccec:	19c161d5 	.word	0x19c161d5
 800ccf0:	3f2a01a0 	.word	0x3f2a01a0
 800ccf4:	1110f8a6 	.word	0x1110f8a6
 800ccf8:	3f811111 	.word	0x3f811111

0800ccfc <fabs>:
 800ccfc:	ec51 0b10 	vmov	r0, r1, d0
 800cd00:	ee10 2a10 	vmov	r2, s0
 800cd04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd08:	ec43 2b10 	vmov	d0, r2, r3
 800cd0c:	4770      	bx	lr

0800cd0e <finite>:
 800cd0e:	ee10 3a90 	vmov	r3, s1
 800cd12:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800cd16:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cd1a:	0fc0      	lsrs	r0, r0, #31
 800cd1c:	4770      	bx	lr
	...

0800cd20 <floor>:
 800cd20:	ec51 0b10 	vmov	r0, r1, d0
 800cd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cd2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cd30:	2e13      	cmp	r6, #19
 800cd32:	460c      	mov	r4, r1
 800cd34:	ee10 5a10 	vmov	r5, s0
 800cd38:	4680      	mov	r8, r0
 800cd3a:	dc34      	bgt.n	800cda6 <floor+0x86>
 800cd3c:	2e00      	cmp	r6, #0
 800cd3e:	da16      	bge.n	800cd6e <floor+0x4e>
 800cd40:	a335      	add	r3, pc, #212	; (adr r3, 800ce18 <floor+0xf8>)
 800cd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd46:	f7f3 fac9 	bl	80002dc <__adddf3>
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	f7f3 ff0b 	bl	8000b68 <__aeabi_dcmpgt>
 800cd52:	b148      	cbz	r0, 800cd68 <floor+0x48>
 800cd54:	2c00      	cmp	r4, #0
 800cd56:	da59      	bge.n	800ce0c <floor+0xec>
 800cd58:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cd5c:	4a30      	ldr	r2, [pc, #192]	; (800ce20 <floor+0x100>)
 800cd5e:	432b      	orrs	r3, r5
 800cd60:	2500      	movs	r5, #0
 800cd62:	42ab      	cmp	r3, r5
 800cd64:	bf18      	it	ne
 800cd66:	4614      	movne	r4, r2
 800cd68:	4621      	mov	r1, r4
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	e025      	b.n	800cdba <floor+0x9a>
 800cd6e:	4f2d      	ldr	r7, [pc, #180]	; (800ce24 <floor+0x104>)
 800cd70:	4137      	asrs	r7, r6
 800cd72:	ea01 0307 	and.w	r3, r1, r7
 800cd76:	4303      	orrs	r3, r0
 800cd78:	d01f      	beq.n	800cdba <floor+0x9a>
 800cd7a:	a327      	add	r3, pc, #156	; (adr r3, 800ce18 <floor+0xf8>)
 800cd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd80:	f7f3 faac 	bl	80002dc <__adddf3>
 800cd84:	2200      	movs	r2, #0
 800cd86:	2300      	movs	r3, #0
 800cd88:	f7f3 feee 	bl	8000b68 <__aeabi_dcmpgt>
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d0eb      	beq.n	800cd68 <floor+0x48>
 800cd90:	2c00      	cmp	r4, #0
 800cd92:	bfbe      	ittt	lt
 800cd94:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cd98:	fa43 f606 	asrlt.w	r6, r3, r6
 800cd9c:	19a4      	addlt	r4, r4, r6
 800cd9e:	ea24 0407 	bic.w	r4, r4, r7
 800cda2:	2500      	movs	r5, #0
 800cda4:	e7e0      	b.n	800cd68 <floor+0x48>
 800cda6:	2e33      	cmp	r6, #51	; 0x33
 800cda8:	dd0b      	ble.n	800cdc2 <floor+0xa2>
 800cdaa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cdae:	d104      	bne.n	800cdba <floor+0x9a>
 800cdb0:	ee10 2a10 	vmov	r2, s0
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	f7f3 fa91 	bl	80002dc <__adddf3>
 800cdba:	ec41 0b10 	vmov	d0, r0, r1
 800cdbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdc2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cdc6:	f04f 33ff 	mov.w	r3, #4294967295
 800cdca:	fa23 f707 	lsr.w	r7, r3, r7
 800cdce:	4207      	tst	r7, r0
 800cdd0:	d0f3      	beq.n	800cdba <floor+0x9a>
 800cdd2:	a311      	add	r3, pc, #68	; (adr r3, 800ce18 <floor+0xf8>)
 800cdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd8:	f7f3 fa80 	bl	80002dc <__adddf3>
 800cddc:	2200      	movs	r2, #0
 800cdde:	2300      	movs	r3, #0
 800cde0:	f7f3 fec2 	bl	8000b68 <__aeabi_dcmpgt>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	d0bf      	beq.n	800cd68 <floor+0x48>
 800cde8:	2c00      	cmp	r4, #0
 800cdea:	da02      	bge.n	800cdf2 <floor+0xd2>
 800cdec:	2e14      	cmp	r6, #20
 800cdee:	d103      	bne.n	800cdf8 <floor+0xd8>
 800cdf0:	3401      	adds	r4, #1
 800cdf2:	ea25 0507 	bic.w	r5, r5, r7
 800cdf6:	e7b7      	b.n	800cd68 <floor+0x48>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cdfe:	fa03 f606 	lsl.w	r6, r3, r6
 800ce02:	4435      	add	r5, r6
 800ce04:	4545      	cmp	r5, r8
 800ce06:	bf38      	it	cc
 800ce08:	18e4      	addcc	r4, r4, r3
 800ce0a:	e7f2      	b.n	800cdf2 <floor+0xd2>
 800ce0c:	2500      	movs	r5, #0
 800ce0e:	462c      	mov	r4, r5
 800ce10:	e7aa      	b.n	800cd68 <floor+0x48>
 800ce12:	bf00      	nop
 800ce14:	f3af 8000 	nop.w
 800ce18:	8800759c 	.word	0x8800759c
 800ce1c:	7e37e43c 	.word	0x7e37e43c
 800ce20:	bff00000 	.word	0xbff00000
 800ce24:	000fffff 	.word	0x000fffff

0800ce28 <matherr>:
 800ce28:	2000      	movs	r0, #0
 800ce2a:	4770      	bx	lr
 800ce2c:	0000      	movs	r0, r0
	...

0800ce30 <nan>:
 800ce30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ce38 <nan+0x8>
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	00000000 	.word	0x00000000
 800ce3c:	7ff80000 	.word	0x7ff80000

0800ce40 <rint>:
 800ce40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce42:	ec51 0b10 	vmov	r0, r1, d0
 800ce46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce4a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ce4e:	2e13      	cmp	r6, #19
 800ce50:	460b      	mov	r3, r1
 800ce52:	ee10 4a10 	vmov	r4, s0
 800ce56:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ce5a:	dc56      	bgt.n	800cf0a <rint+0xca>
 800ce5c:	2e00      	cmp	r6, #0
 800ce5e:	da2b      	bge.n	800ceb8 <rint+0x78>
 800ce60:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ce64:	4302      	orrs	r2, r0
 800ce66:	d023      	beq.n	800ceb0 <rint+0x70>
 800ce68:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ce6c:	4302      	orrs	r2, r0
 800ce6e:	4254      	negs	r4, r2
 800ce70:	4314      	orrs	r4, r2
 800ce72:	0c4b      	lsrs	r3, r1, #17
 800ce74:	0b24      	lsrs	r4, r4, #12
 800ce76:	045b      	lsls	r3, r3, #17
 800ce78:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ce7c:	ea44 0103 	orr.w	r1, r4, r3
 800ce80:	460b      	mov	r3, r1
 800ce82:	492f      	ldr	r1, [pc, #188]	; (800cf40 <rint+0x100>)
 800ce84:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800ce88:	e9d1 6700 	ldrd	r6, r7, [r1]
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	4639      	mov	r1, r7
 800ce90:	4630      	mov	r0, r6
 800ce92:	f7f3 fa23 	bl	80002dc <__adddf3>
 800ce96:	e9cd 0100 	strd	r0, r1, [sp]
 800ce9a:	463b      	mov	r3, r7
 800ce9c:	4632      	mov	r2, r6
 800ce9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cea2:	f7f3 fa19 	bl	80002d8 <__aeabi_dsub>
 800cea6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ceaa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ceae:	4639      	mov	r1, r7
 800ceb0:	ec41 0b10 	vmov	d0, r0, r1
 800ceb4:	b003      	add	sp, #12
 800ceb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceb8:	4a22      	ldr	r2, [pc, #136]	; (800cf44 <rint+0x104>)
 800ceba:	4132      	asrs	r2, r6
 800cebc:	ea01 0702 	and.w	r7, r1, r2
 800cec0:	4307      	orrs	r7, r0
 800cec2:	d0f5      	beq.n	800ceb0 <rint+0x70>
 800cec4:	0852      	lsrs	r2, r2, #1
 800cec6:	4011      	ands	r1, r2
 800cec8:	430c      	orrs	r4, r1
 800ceca:	d00b      	beq.n	800cee4 <rint+0xa4>
 800cecc:	ea23 0202 	bic.w	r2, r3, r2
 800ced0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ced4:	2e13      	cmp	r6, #19
 800ced6:	fa43 f306 	asr.w	r3, r3, r6
 800ceda:	bf0c      	ite	eq
 800cedc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800cee0:	2400      	movne	r4, #0
 800cee2:	4313      	orrs	r3, r2
 800cee4:	4916      	ldr	r1, [pc, #88]	; (800cf40 <rint+0x100>)
 800cee6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ceea:	4622      	mov	r2, r4
 800ceec:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cef0:	4620      	mov	r0, r4
 800cef2:	4629      	mov	r1, r5
 800cef4:	f7f3 f9f2 	bl	80002dc <__adddf3>
 800cef8:	e9cd 0100 	strd	r0, r1, [sp]
 800cefc:	4622      	mov	r2, r4
 800cefe:	462b      	mov	r3, r5
 800cf00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf04:	f7f3 f9e8 	bl	80002d8 <__aeabi_dsub>
 800cf08:	e7d2      	b.n	800ceb0 <rint+0x70>
 800cf0a:	2e33      	cmp	r6, #51	; 0x33
 800cf0c:	dd07      	ble.n	800cf1e <rint+0xde>
 800cf0e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cf12:	d1cd      	bne.n	800ceb0 <rint+0x70>
 800cf14:	ee10 2a10 	vmov	r2, s0
 800cf18:	f7f3 f9e0 	bl	80002dc <__adddf3>
 800cf1c:	e7c8      	b.n	800ceb0 <rint+0x70>
 800cf1e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800cf22:	f04f 32ff 	mov.w	r2, #4294967295
 800cf26:	40f2      	lsrs	r2, r6
 800cf28:	4210      	tst	r0, r2
 800cf2a:	d0c1      	beq.n	800ceb0 <rint+0x70>
 800cf2c:	0852      	lsrs	r2, r2, #1
 800cf2e:	4210      	tst	r0, r2
 800cf30:	bf1f      	itttt	ne
 800cf32:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800cf36:	ea20 0202 	bicne.w	r2, r0, r2
 800cf3a:	4134      	asrne	r4, r6
 800cf3c:	4314      	orrne	r4, r2
 800cf3e:	e7d1      	b.n	800cee4 <rint+0xa4>
 800cf40:	0800d740 	.word	0x0800d740
 800cf44:	000fffff 	.word	0x000fffff

0800cf48 <scalbn>:
 800cf48:	b570      	push	{r4, r5, r6, lr}
 800cf4a:	ec55 4b10 	vmov	r4, r5, d0
 800cf4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cf52:	4606      	mov	r6, r0
 800cf54:	462b      	mov	r3, r5
 800cf56:	b9aa      	cbnz	r2, 800cf84 <scalbn+0x3c>
 800cf58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cf5c:	4323      	orrs	r3, r4
 800cf5e:	d03b      	beq.n	800cfd8 <scalbn+0x90>
 800cf60:	4b31      	ldr	r3, [pc, #196]	; (800d028 <scalbn+0xe0>)
 800cf62:	4629      	mov	r1, r5
 800cf64:	2200      	movs	r2, #0
 800cf66:	ee10 0a10 	vmov	r0, s0
 800cf6a:	f7f3 fb6d 	bl	8000648 <__aeabi_dmul>
 800cf6e:	4b2f      	ldr	r3, [pc, #188]	; (800d02c <scalbn+0xe4>)
 800cf70:	429e      	cmp	r6, r3
 800cf72:	4604      	mov	r4, r0
 800cf74:	460d      	mov	r5, r1
 800cf76:	da12      	bge.n	800cf9e <scalbn+0x56>
 800cf78:	a327      	add	r3, pc, #156	; (adr r3, 800d018 <scalbn+0xd0>)
 800cf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7e:	f7f3 fb63 	bl	8000648 <__aeabi_dmul>
 800cf82:	e009      	b.n	800cf98 <scalbn+0x50>
 800cf84:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cf88:	428a      	cmp	r2, r1
 800cf8a:	d10c      	bne.n	800cfa6 <scalbn+0x5e>
 800cf8c:	ee10 2a10 	vmov	r2, s0
 800cf90:	4620      	mov	r0, r4
 800cf92:	4629      	mov	r1, r5
 800cf94:	f7f3 f9a2 	bl	80002dc <__adddf3>
 800cf98:	4604      	mov	r4, r0
 800cf9a:	460d      	mov	r5, r1
 800cf9c:	e01c      	b.n	800cfd8 <scalbn+0x90>
 800cf9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	3a36      	subs	r2, #54	; 0x36
 800cfa6:	4432      	add	r2, r6
 800cfa8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cfac:	428a      	cmp	r2, r1
 800cfae:	dd0b      	ble.n	800cfc8 <scalbn+0x80>
 800cfb0:	ec45 4b11 	vmov	d1, r4, r5
 800cfb4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d020 <scalbn+0xd8>
 800cfb8:	f000 f83c 	bl	800d034 <copysign>
 800cfbc:	a318      	add	r3, pc, #96	; (adr r3, 800d020 <scalbn+0xd8>)
 800cfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc2:	ec51 0b10 	vmov	r0, r1, d0
 800cfc6:	e7da      	b.n	800cf7e <scalbn+0x36>
 800cfc8:	2a00      	cmp	r2, #0
 800cfca:	dd08      	ble.n	800cfde <scalbn+0x96>
 800cfcc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cfd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cfd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cfd8:	ec45 4b10 	vmov	d0, r4, r5
 800cfdc:	bd70      	pop	{r4, r5, r6, pc}
 800cfde:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cfe2:	da0d      	bge.n	800d000 <scalbn+0xb8>
 800cfe4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cfe8:	429e      	cmp	r6, r3
 800cfea:	ec45 4b11 	vmov	d1, r4, r5
 800cfee:	dce1      	bgt.n	800cfb4 <scalbn+0x6c>
 800cff0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800d018 <scalbn+0xd0>
 800cff4:	f000 f81e 	bl	800d034 <copysign>
 800cff8:	a307      	add	r3, pc, #28	; (adr r3, 800d018 <scalbn+0xd0>)
 800cffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffe:	e7e0      	b.n	800cfc2 <scalbn+0x7a>
 800d000:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d004:	3236      	adds	r2, #54	; 0x36
 800d006:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d00a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d00e:	4620      	mov	r0, r4
 800d010:	4629      	mov	r1, r5
 800d012:	2200      	movs	r2, #0
 800d014:	4b06      	ldr	r3, [pc, #24]	; (800d030 <scalbn+0xe8>)
 800d016:	e7b2      	b.n	800cf7e <scalbn+0x36>
 800d018:	c2f8f359 	.word	0xc2f8f359
 800d01c:	01a56e1f 	.word	0x01a56e1f
 800d020:	8800759c 	.word	0x8800759c
 800d024:	7e37e43c 	.word	0x7e37e43c
 800d028:	43500000 	.word	0x43500000
 800d02c:	ffff3cb0 	.word	0xffff3cb0
 800d030:	3c900000 	.word	0x3c900000

0800d034 <copysign>:
 800d034:	ec51 0b10 	vmov	r0, r1, d0
 800d038:	ee11 0a90 	vmov	r0, s3
 800d03c:	ee10 2a10 	vmov	r2, s0
 800d040:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d044:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d048:	ea41 0300 	orr.w	r3, r1, r0
 800d04c:	ec43 2b10 	vmov	d0, r2, r3
 800d050:	4770      	bx	lr
	...

0800d054 <_init>:
 800d054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d056:	bf00      	nop
 800d058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d05a:	bc08      	pop	{r3}
 800d05c:	469e      	mov	lr, r3
 800d05e:	4770      	bx	lr

0800d060 <_fini>:
 800d060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d062:	bf00      	nop
 800d064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d066:	bc08      	pop	{r3}
 800d068:	469e      	mov	lr, r3
 800d06a:	4770      	bx	lr
